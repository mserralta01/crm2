{
    "sourceFile": "components/leads/call-section.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1743708891254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743708987381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n import { Separator } from \"@/components/ui/separator\";\n import { toast } from '@/hooks/use-toast';\n import { addActivityToLead, updateLeadActivity, deleteLeadActivity } from '@/lib/services/leads-service';\n import { Activity } from '@/data/leads';\n-import { Phone, Clock, CalendarClock, MicOff, Mic, Play, Pause, Plus, Calendar, X, Check, Clock8, PhoneOutgoing, PhoneIncoming, PhoneMissed, Trash2, MoreVertical, PhoneCall, Download } from 'lucide-react';\n+import { Phone, Clock, CalendarClock, MicOff, Mic, Play, Pause, Plus, Calendar, X, Check, Clock8, PhoneOutgoing, PhoneIncoming, PhoneMissed, Trash2, MoreVertical, PhoneCall, Download, Pencil } from 'lucide-react';\n import { format, formatDistance, formatDistanceToNow, parseISO } from 'date-fns';\n import { useForm } from 'react-hook-form';\n import { zodResolver } from '@hookform/resolvers/zod';\n import * as z from 'zod';\n@@ -652,9 +652,9 @@\n                           <Calendar className=\"w-3 h-3 mr-1\" />\n                           {format(new Date(call.date), 'MMM d, yyyy h:mm a')}\n                         </span>\n                         \n-                        {isScheduled && (\n+                        {isScheduled && call.scheduledDate && (\n                           <span className=\"flex items-center text-blue-600\">\n                             <CalendarClock className=\"w-3 h-3 mr-1\" />\n                             Scheduled: {format(new Date(call.scheduledDate), 'MMM d, yyyy h:mm a')}\n                           </span>\n"
                },
                {
                    "date": 1743709134740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,762 +1,1 @@\n-\"use client\";\n-\n-import { useState, useEffect, useRef } from 'react';\n-import { Button } from '@/components/ui/button';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Textarea } from '@/components/ui/textarea';\n-import { Badge } from '@/components/ui/badge';\n-import { Card } from '@/components/ui/card';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogDescription,\n-  DialogFooter,\n-  DialogHeader,\n-  DialogTitle,\n-  DialogTrigger,\n-  DialogClose,\n-} from \"@/components/ui/dialog\";\n-import {\n-  Select,\n-  SelectContent,\n-  SelectItem,\n-  SelectTrigger,\n-  SelectValue,\n-} from \"@/components/ui/select\";\n-import {\n-  Form,\n-  FormControl,\n-  FormDescription,\n-  FormField,\n-  FormItem,\n-  FormLabel,\n-  FormMessage,\n-} from \"@/components/ui/form\";\n-import { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n-import { Separator } from \"@/components/ui/separator\";\n-import { toast } from '@/hooks/use-toast';\n-import { addActivityToLead, updateLeadActivity, deleteLeadActivity } from '@/lib/services/leads-service';\n-import { Activity } from '@/data/leads';\n-import { Phone, Clock, CalendarClock, MicOff, Mic, Play, Pause, Plus, Calendar, X, Check, Clock8, PhoneOutgoing, PhoneIncoming, PhoneMissed, Trash2, MoreVertical, PhoneCall, Download, Pencil } from 'lucide-react';\n-import { format, formatDistance, formatDistanceToNow, parseISO } from 'date-fns';\n-import { useForm } from 'react-hook-form';\n-import { zodResolver } from '@hookform/resolvers/zod';\n-import * as z from 'zod';\n-import {\n-  DropdownMenu,\n-  DropdownMenuContent,\n-  DropdownMenuItem,\n-  DropdownMenuLabel,\n-  DropdownMenuSeparator,\n-  DropdownMenuTrigger,\n-} from \"@/components/ui/dropdown-menu\";\n-import { cn } from '@/lib/utils';\n-\n-const CALL_STATUSES = [\n-  { value: 'completed', label: 'Completed', color: 'bg-green-500' },\n-  { value: 'missed', label: 'Missed', color: 'bg-red-500' },\n-  { value: 'voicemail', label: 'Voicemail', color: 'bg-yellow-500' },\n-  { value: 'scheduled', label: 'Scheduled', color: 'bg-blue-500' },\n-  { value: 'callback-required', label: 'Callback Required', color: 'bg-purple-500' },\n-];\n-\n-const CALL_TYPES = [\n-  { value: 'outbound', label: 'Outbound', icon: PhoneOutgoing },\n-  { value: 'inbound', label: 'Inbound', icon: PhoneIncoming },\n-  { value: 'missed', label: 'Missed', icon: PhoneMissed },\n-];\n-\n-const CALL_OUTCOMES = [\n-  { value: 'interested', label: 'Interested' },\n-  { value: 'not-interested', label: 'Not Interested' },\n-  { value: 'no-answer', label: 'No Answer' },\n-  { value: 'left-voicemail', label: 'Left Voicemail' },\n-  { value: 'follow-up-required', label: 'Follow-up Required' },\n-  { value: 'wrong-number', label: 'Wrong Number' },\n-  { value: 'meeting-scheduled', label: 'Meeting Scheduled' },\n-  { value: 'information-provided', label: 'Information Provided' },\n-];\n-\n-const callSchema = z.object({\n-  title: z.string().min(2, \"Title is required\"),\n-  description: z.string().optional(),\n-  callType: z.string(),\n-  duration: z.string().optional(),\n-  status: z.string(),\n-  outcome: z.string().optional(),\n-  scheduled: z.boolean().optional(),\n-  scheduledDate: z.string().optional(),\n-  followUp: z.boolean().optional(),\n-  followUpDate: z.string().optional(),\n-  recordingUrl: z.string().optional(),\n-});\n-\n-type CallFormValues = z.infer<typeof callSchema>;\n-\n-interface CallActivity extends Activity {\n-  callType?: string;\n-  outcome?: string;\n-  scheduled?: boolean;\n-  scheduledDate?: string;\n-  followUp?: boolean;\n-  followUpDate?: string;\n-  recordingUrl?: string;\n-}\n-\n-interface CallSectionProps {\n-  leadId: string;\n-  calls: Activity[];\n-  phoneNumber?: string;\n-}\n-\n-export function CallSection({ leadId, calls: initialCalls, phoneNumber }: CallSectionProps) {\n-  const [calls, setCalls] = useState<CallActivity[]>(initialCalls || []);\n-  const [isCallLogOpen, setIsCallLogOpen] = useState(false);\n-  const [activeTab, setActiveTab] = useState<string>(\"all\");\n-  const [isDeleting, setIsDeleting] = useState<number | null>(null);\n-  const [callDuration, setCallDuration] = useState(0); // In seconds\n-  const [isCallActive, setIsCallActive] = useState(false);\n-  const [isRecording, setIsRecording] = useState(false);\n-  const timerRef = useRef<NodeJS.Timeout | null>(null);\n-\n-  // Timer for call tracking\n-  useEffect(() => {\n-    if (isCallActive && !timerRef.current) {\n-      timerRef.current = setInterval(() => {\n-        setCallDuration(prev => prev + 1);\n-      }, 1000);\n-    } else if (!isCallActive && timerRef.current) {\n-      clearInterval(timerRef.current);\n-      timerRef.current = null;\n-    }\n-\n-    return () => {\n-      if (timerRef.current) {\n-        clearInterval(timerRef.current);\n-      }\n-    };\n-  }, [isCallActive]);\n-\n-  // Initialize the form\n-  const form = useForm<CallFormValues>({\n-    resolver: zodResolver(callSchema),\n-    defaultValues: {\n-      title: '',\n-      description: '',\n-      callType: 'outbound',\n-      duration: '00:00',\n-      status: 'completed',\n-      outcome: '',\n-      scheduled: false,\n-      scheduledDate: '',\n-      followUp: false,\n-      followUpDate: '',\n-      recordingUrl: '',\n-    },\n-  });\n-\n-  // Format seconds to MM:SS\n-  const formatDuration = (seconds: number): string => {\n-    const minutes = Math.floor(seconds / 60);\n-    const remainingSeconds = seconds % 60;\n-    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n-  };\n-\n-  // Call starter function\n-  const startCall = () => {\n-    setIsCallActive(true);\n-    setCallDuration(0);\n-    // Prepopulate the form with outbound call\n-    form.setValue('callType', 'outbound');\n-    form.setValue('title', 'Call with ' + (phoneNumber ? formatPhoneNumber(phoneNumber) : 'Lead'));\n-  };\n-\n-  // Format phone for display\n-  const formatPhoneNumber = (phone: string): string => {\n-    // Basic formatting, you could enhance this\n-    if (!phone) return '';\n-    return phone.startsWith('+') ? phone : `+${phone}`;\n-  };\n-\n-  // Call ender function\n-  const endCall = () => {\n-    setIsCallActive(false);\n-    setIsCallLogOpen(true);\n-    // Set the final duration\n-    form.setValue('duration', formatDuration(callDuration));\n-  };\n-\n-  // Toggle recording\n-  const toggleRecording = () => {\n-    setIsRecording(!isRecording);\n-    toast({\n-      title: isRecording ? \"Recording Stopped\" : \"Recording Started\",\n-      description: isRecording ? \"Call recording has stopped\" : \"Call is now being recorded\",\n-      duration: 2000,\n-    });\n-  };\n-\n-  // Filter calls by status\n-  const filteredCalls = calls.filter(call => {\n-    if (activeTab === 'all') return true;\n-    if (activeTab === 'scheduled' && call.scheduled) return true;\n-    if (activeTab === 'followup' && call.followUp) return true;\n-    return call.status === activeTab;\n-  });\n-\n-  // Sort calls - scheduled first, then by date descending\n-  const sortedCalls = [...filteredCalls].sort((a, b) => {\n-    // Scheduled calls on top\n-    if (a.scheduled && a.scheduledDate && !b.scheduled) return -1;\n-    if (!a.scheduled && b.scheduled && b.scheduledDate) return 1;\n-    \n-    // Then sort by date (newest first)\n-    return new Date(b.date).getTime() - new Date(a.date).getTime();\n-  });\n-\n-  // Handle form submission\n-  const handleSubmit = async (values: CallFormValues) => {\n-    try {\n-      // Create call activity\n-      const callActivity: Partial<CallActivity> = {\n-        type: 'call',\n-        title: values.title,\n-        description: values.description || '',\n-        status: values.status,\n-        duration: values.duration,\n-        callType: values.callType,\n-        outcome: values.outcome,\n-        scheduled: values.scheduled,\n-        scheduledDate: values.scheduledDate,\n-        followUp: values.followUp,\n-        followUpDate: values.followUpDate,\n-        recordingUrl: values.recordingUrl,\n-      };\n-\n-      // Add to database\n-      await addActivityToLead(leadId, 'calls', callActivity);\n-\n-      // Optimistic update for UI\n-      const optimisticCall: CallActivity = {\n-        ...callActivity as CallActivity,\n-        id: Date.now(),\n-        date: new Date().toISOString(),\n-      };\n-\n-      setCalls(prev => [optimisticCall, ...prev]);\n-      setIsCallLogOpen(false);\n-      \n-      toast({\n-        title: \"Call Logged\",\n-        description: \"Call has been successfully logged\",\n-        duration: 2000,\n-      });\n-\n-      // Reset form\n-      form.reset();\n-      setCallDuration(0);\n-    } catch (error) {\n-      console.error('Error logging call:', error);\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to log call. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-    }\n-  };\n-\n-  // Delete a call\n-  const deleteCall = async (callId: number) => {\n-    try {\n-      setIsDeleting(callId);\n-      await deleteLeadActivity(leadId, 'calls', callId);\n-      setCalls(prev => prev.filter(call => call.id !== callId));\n-      toast({\n-        title: \"Call Deleted\",\n-        description: \"Call has been successfully deleted\",\n-        duration: 2000,\n-      });\n-    } catch (error) {\n-      console.error('Error deleting call:', error);\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to delete call. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-    } finally {\n-      setIsDeleting(null);\n-    }\n-  };\n-\n-  return (\n-    <div>\n-      {/* Call Controls */}\n-      <div className=\"flex items-center justify-between mb-4\">\n-        <div className=\"flex space-x-2\">\n-          {isCallActive ? (\n-            <>\n-              <Button \n-                variant=\"destructive\" \n-                size=\"sm\"\n-                onClick={endCall}\n-              >\n-                <X className=\"mr-1 h-4 w-4\" /> End Call ({formatDuration(callDuration)})\n-              </Button>\n-              <Button\n-                variant={isRecording ? \"destructive\" : \"outline\"}\n-                size=\"sm\"\n-                onClick={toggleRecording}\n-              >\n-                {isRecording ? <MicOff className=\"mr-1 h-4 w-4\" /> : <Mic className=\"mr-1 h-4 w-4\" />}\n-                {isRecording ? \"Stop Recording\" : \"Record Call\"}\n-              </Button>\n-            </>\n-          ) : (\n-            <div className=\"flex space-x-2\">\n-              {phoneNumber && (\n-                <Button className=\"bg-green-600 hover:bg-green-700\" onClick={startCall}>\n-                  <Phone className=\"mr-1 h-4 w-4\" /> \n-                  Call {formatPhoneNumber(phoneNumber)}\n-                </Button>\n-              )}\n-              <Dialog open={isCallLogOpen} onOpenChange={setIsCallLogOpen}>\n-                <DialogTrigger asChild>\n-                  <Button variant=\"outline\">\n-                    <Plus className=\"mr-1 h-4 w-4\" /> Log Call\n-                  </Button>\n-                </DialogTrigger>\n-                <DialogContent className=\"max-w-lg\">\n-                  <DialogHeader>\n-                    <DialogTitle>Log a Call</DialogTitle>\n-                    <DialogDescription>\n-                      Record details about a call with this lead\n-                    </DialogDescription>\n-                  </DialogHeader>\n-                  \n-                  <Form {...form}>\n-                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n-                      <FormField\n-                        control={form.control}\n-                        name=\"title\"\n-                        render={({ field }) => (\n-                          <FormItem>\n-                            <FormLabel>Call Title</FormLabel>\n-                            <FormControl>\n-                              <Input placeholder=\"e.g. Initial Discussion\" {...field} />\n-                            </FormControl>\n-                            <FormMessage />\n-                          </FormItem>\n-                        )}\n-                      />\n-                      \n-                      <div className=\"grid grid-cols-2 gap-4\">\n-                        <FormField\n-                          control={form.control}\n-                          name=\"callType\"\n-                          render={({ field }) => (\n-                            <FormItem>\n-                              <FormLabel>Call Type</FormLabel>\n-                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n-                                <FormControl>\n-                                  <SelectTrigger>\n-                                    <SelectValue placeholder=\"Select type\" />\n-                                  </SelectTrigger>\n-                                </FormControl>\n-                                <SelectContent>\n-                                  {CALL_TYPES.map(type => (\n-                                    <SelectItem key={type.value} value={type.value}>\n-                                      <div className=\"flex items-center\">\n-                                        <type.icon className=\"mr-2 h-4 w-4\" />\n-                                        {type.label}\n-                                      </div>\n-                                    </SelectItem>\n-                                  ))}\n-                                </SelectContent>\n-                              </Select>\n-                              <FormMessage />\n-                            </FormItem>\n-                          )}\n-                        />\n-                        \n-                        <FormField\n-                          control={form.control}\n-                          name=\"status\"\n-                          render={({ field }) => (\n-                            <FormItem>\n-                              <FormLabel>Call Status</FormLabel>\n-                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n-                                <FormControl>\n-                                  <SelectTrigger>\n-                                    <SelectValue placeholder=\"Select status\" />\n-                                  </SelectTrigger>\n-                                </FormControl>\n-                                <SelectContent>\n-                                  {CALL_STATUSES.map(status => (\n-                                    <SelectItem key={status.value} value={status.value}>\n-                                      <div className=\"flex items-center\">\n-                                        <span className={`w-2 h-2 rounded-full mr-2 ${status.color}`} />\n-                                        {status.label}\n-                                      </div>\n-                                    </SelectItem>\n-                                  ))}\n-                                </SelectContent>\n-                              </Select>\n-                              <FormMessage />\n-                            </FormItem>\n-                          )}\n-                        />\n-                      </div>\n-                      \n-                      <div className=\"grid grid-cols-2 gap-4\">\n-                        <FormField\n-                          control={form.control}\n-                          name=\"duration\"\n-                          render={({ field }) => (\n-                            <FormItem>\n-                              <FormLabel>Duration</FormLabel>\n-                              <FormControl>\n-                                <Input placeholder=\"e.g. 15:30\" {...field} />\n-                              </FormControl>\n-                              <FormDescription>\n-                                Format as MM:SS\n-                              </FormDescription>\n-                              <FormMessage />\n-                            </FormItem>\n-                          )}\n-                        />\n-                        \n-                        <FormField\n-                          control={form.control}\n-                          name=\"outcome\"\n-                          render={({ field }) => (\n-                            <FormItem>\n-                              <FormLabel>Outcome</FormLabel>\n-                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n-                                <FormControl>\n-                                  <SelectTrigger>\n-                                    <SelectValue placeholder=\"Select outcome\" />\n-                                  </SelectTrigger>\n-                                </FormControl>\n-                                <SelectContent>\n-                                  {CALL_OUTCOMES.map(outcome => (\n-                                    <SelectItem key={outcome.value} value={outcome.value}>\n-                                      {outcome.label}\n-                                    </SelectItem>\n-                                  ))}\n-                                </SelectContent>\n-                              </Select>\n-                              <FormMessage />\n-                            </FormItem>\n-                          )}\n-                        />\n-                      </div>\n-                      \n-                      <FormField\n-                        control={form.control}\n-                        name=\"description\"\n-                        render={({ field }) => (\n-                          <FormItem>\n-                            <FormLabel>Notes</FormLabel>\n-                            <FormControl>\n-                              <Textarea \n-                                placeholder=\"Enter notes about the call...\" \n-                                className=\"min-h-[100px]\" \n-                                {...field} \n-                              />\n-                            </FormControl>\n-                            <FormMessage />\n-                          </FormItem>\n-                        )}\n-                      />\n-                      \n-                      <Separator />\n-                      \n-                      <div className=\"space-y-4\">\n-                        <FormField\n-                          control={form.control}\n-                          name=\"scheduled\"\n-                          render={({ field }) => (\n-                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n-                              <FormControl>\n-                                <input\n-                                  type=\"checkbox\"\n-                                  checked={field.value}\n-                                  onChange={(e) => field.onChange(e.target.checked)}\n-                                  className=\"h-4 w-4 rounded border-gray-300\"\n-                                />\n-                              </FormControl>\n-                              <div className=\"space-y-1 leading-none\">\n-                                <FormLabel>Scheduled Call</FormLabel>\n-                                <FormDescription>\n-                                  Is this a call scheduled for a future date?\n-                                </FormDescription>\n-                              </div>\n-                            </FormItem>\n-                          )}\n-                        />\n-                        \n-                        {form.watch(\"scheduled\") && (\n-                          <FormField\n-                            control={form.control}\n-                            name=\"scheduledDate\"\n-                            render={({ field }) => (\n-                              <FormItem>\n-                                <FormLabel>Scheduled Date</FormLabel>\n-                                <FormControl>\n-                                  <Input type=\"datetime-local\" {...field} />\n-                                </FormControl>\n-                                <FormMessage />\n-                              </FormItem>\n-                            )}\n-                          />\n-                        )}\n-                      </div>\n-                      \n-                      <Separator />\n-                      \n-                      <div className=\"space-y-4\">\n-                        <FormField\n-                          control={form.control}\n-                          name=\"followUp\"\n-                          render={({ field }) => (\n-                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n-                              <FormControl>\n-                                <input\n-                                  type=\"checkbox\"\n-                                  checked={field.value}\n-                                  onChange={(e) => field.onChange(e.target.checked)}\n-                                  className=\"h-4 w-4 rounded border-gray-300\"\n-                                />\n-                              </FormControl>\n-                              <div className=\"space-y-1 leading-none\">\n-                                <FormLabel>Follow up Required</FormLabel>\n-                                <FormDescription>\n-                                  Do you need to follow up after this call?\n-                                </FormDescription>\n-                              </div>\n-                            </FormItem>\n-                          )}\n-                        />\n-                        \n-                        {form.watch(\"followUp\") && (\n-                          <FormField\n-                            control={form.control}\n-                            name=\"followUpDate\"\n-                            render={({ field }) => (\n-                              <FormItem>\n-                                <FormLabel>Follow-up Date</FormLabel>\n-                                <FormControl>\n-                                  <Input type=\"datetime-local\" {...field} />\n-                                </FormControl>\n-                                <FormMessage />\n-                              </FormItem>\n-                            )}\n-                          />\n-                        )}\n-                      </div>\n-                      \n-                      <DialogFooter>\n-                        <DialogClose asChild>\n-                          <Button type=\"button\" variant=\"outline\">Cancel</Button>\n-                        </DialogClose>\n-                        <Button type=\"submit\">Save Call</Button>\n-                      </DialogFooter>\n-                    </form>\n-                  </Form>\n-                </DialogContent>\n-              </Dialog>\n-            </div>\n-          )}\n-        </div>\n-        \n-        {!isCallActive && (\n-          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-fit\">\n-            <TabsList>\n-              <TabsTrigger value=\"all\">All</TabsTrigger>\n-              <TabsTrigger value=\"scheduled\">Scheduled</TabsTrigger>\n-              <TabsTrigger value=\"followup\">Follow-up</TabsTrigger>\n-              <TabsTrigger value=\"missed\">Missed</TabsTrigger>\n-            </TabsList>\n-          </Tabs>\n-        )}\n-      </div>\n-\n-      {/* Call List */}\n-      <div className=\"space-y-4 mt-4\">\n-        {sortedCalls.length === 0 ? (\n-          <div className=\"text-center p-8 border-2 border-dashed rounded-lg\">\n-            <PhoneCall className=\"mx-auto h-12 w-12 text-gray-400\" />\n-            <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No calls</h3>\n-            <p className=\"mt-1 text-sm text-gray-500\">Get started by making a new call or logging a past call.</p>\n-          </div>\n-        ) : (\n-          sortedCalls.map(call => {\n-            const callStatus = CALL_STATUSES.find(s => s.value === call.status) || CALL_STATUSES[0];\n-            const callType = CALL_TYPES.find(t => t.value === call.callType);\n-            const isScheduled = call.scheduled && call.scheduledDate;\n-            const CallTypeIcon = callType?.icon || Phone;\n-            \n-            return (\n-              <Card key={call.id} className={cn(\n-                \"p-4\",\n-                isScheduled ? \"border-blue-200 bg-blue-50\" : \"bg-muted/50\",\n-                call.followUp ? \"border-purple-200\" : \"\"\n-              )}>\n-                <div className=\"flex items-start justify-between\">\n-                  <div className=\"flex items-start space-x-3\">\n-                    <div className={cn(\n-                      \"mt-1 p-2 rounded-full\",\n-                      callStatus.color + \"/20\"\n-                    )}>\n-                      <CallTypeIcon className={cn(\n-                        \"w-4 h-4\",\n-                        callStatus.color.replace('bg-', 'text-').replace('-500', '-700')\n-                      )} />\n-                    </div>\n-                    <div>\n-                      <div className=\"flex items-center\">\n-                        <h4 className=\"font-medium\">{call.title}</h4>\n-                        <Badge \n-                          variant=\"outline\" \n-                          className={cn(\n-                            \"ml-2 text-xs\",\n-                            callStatus.color.replace('bg-', 'border-'),\n-                            callStatus.color.replace('bg-', 'text-').replace('-500', '-700'),\n-                          )}\n-                        >\n-                          {callStatus.label}\n-                        </Badge>\n-                        \n-                        {call.outcome && (\n-                          <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n-                            {CALL_OUTCOMES.find(o => o.value === call.outcome)?.label || call.outcome}\n-                          </Badge>\n-                        )}\n-                      </div>\n-                      \n-                      {call.description && (\n-                        <p className=\"text-sm text-muted-foreground mt-1\">{call.description}</p>\n-                      )}\n-                      \n-                      <div className=\"flex items-center flex-wrap gap-3 mt-2 text-xs\">\n-                        {call.duration && (\n-                          <span className=\"flex items-center text-muted-foreground\">\n-                            <Clock className=\"w-3 h-3 mr-1\" />\n-                            {call.duration}\n-                          </span>\n-                        )}\n-                        \n-                        <span className=\"flex items-center text-muted-foreground\">\n-                          <Calendar className=\"w-3 h-3 mr-1\" />\n-                          {format(new Date(call.date), 'MMM d, yyyy h:mm a')}\n-                        </span>\n-                        \n-                        {isScheduled && call.scheduledDate && (\n-                          <span className=\"flex items-center text-blue-600\">\n-                            <CalendarClock className=\"w-3 h-3 mr-1\" />\n-                            Scheduled: {format(new Date(call.scheduledDate), 'MMM d, yyyy h:mm a')}\n-                          </span>\n-                        )}\n-                        \n-                        {call.followUp && call.followUpDate && (\n-                          <span className=\"flex items-center text-purple-600\">\n-                            <Clock8 className=\"w-3 h-3 mr-1\" />\n-                            Follow-up: {format(new Date(call.followUpDate), 'MMM d, yyyy h:mm a')}\n-                          </span>\n-                        )}\n-                        \n-                        {call.recordingUrl && (\n-                          <span className=\"flex items-center text-primary\">\n-                            <Download className=\"w-3 h-3 mr-1\" />\n-                            <a \n-                              href={call.recordingUrl} \n-                              target=\"_blank\" \n-                              rel=\"noopener noreferrer\"\n-                              className=\"underline hover:text-primary/80\"\n-                            >\n-                              Download Recording\n-                            </a>\n-                          </span>\n-                        )}\n-                      </div>\n-                    </div>\n-                  </div>\n-                  \n-                  <DropdownMenu>\n-                    <DropdownMenuTrigger asChild>\n-                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n-                        <MoreVertical className=\"h-4 w-4\" />\n-                      </Button>\n-                    </DropdownMenuTrigger>\n-                    <DropdownMenuContent align=\"end\">\n-                      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n-                      <DropdownMenuItem\n-                        onClick={() => {\n-                          // Clone and edit the call (reusing same form)\n-                          form.reset({\n-                            title: call.title,\n-                            description: call.description,\n-                            callType: call.callType || 'outbound',\n-                            duration: call.duration || '00:00',\n-                            status: call.status || 'completed',\n-                            outcome: call.outcome || '',\n-                            scheduled: call.scheduled || false,\n-                            scheduledDate: call.scheduledDate || '',\n-                            followUp: call.followUp || false,\n-                            followUpDate: call.followUpDate || '',\n-                            recordingUrl: call.recordingUrl || '',\n-                          });\n-                          setIsCallLogOpen(true);\n-                        }}\n-                      >\n-                        <Pencil className=\"mr-2 h-4 w-4\" />\n-                        Edit Call\n-                      </DropdownMenuItem>\n-                      \n-                      {!call.scheduled && (\n-                        <DropdownMenuItem\n-                          onClick={() => {\n-                            // Edit just to set scheduled\n-                            form.reset({\n-                              ...form.getValues(),\n-                              title: call.title,\n-                              scheduled: true,\n-                              scheduledDate: new Date().toISOString().slice(0, 16),\n-                            });\n-                            setIsCallLogOpen(true);\n-                          }}\n-                        >\n-                          <Calendar className=\"mr-2 h-4 w-4\" />\n-                          Schedule Follow-up\n-                        </DropdownMenuItem>\n-                      )}\n-                      \n-                      <DropdownMenuSeparator />\n-                      \n-                      <DropdownMenuItem\n-                        onClick={() => deleteCall(call.id)}\n-                        disabled={isDeleting === call.id}\n-                        className=\"text-destructive focus:text-destructive\"\n-                      >\n-                        {isDeleting === call.id ? (\n-                          <>Loading...</>\n-                        ) : (\n-                          <>\n-                            <Trash2 className=\"mr-2 h-4 w-4\" />\n-                            Delete\n-                          </>\n-                        )}\n-                      </DropdownMenuItem>\n-                    </DropdownMenuContent>\n-                  </DropdownMenu>\n-                </div>\n-              </Card>\n-            );\n-          })\n-        )}\n-      </div>\n-    </div>\n-  );\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743708891254,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Card } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogClose,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { toast } from '@/hooks/use-toast';\nimport { addActivityToLead, updateLeadActivity, deleteLeadActivity } from '@/lib/services/leads-service';\nimport { Activity } from '@/data/leads';\nimport { Phone, Clock, CalendarClock, MicOff, Mic, Play, Pause, Plus, Calendar, X, Check, Clock8, PhoneOutgoing, PhoneIncoming, PhoneMissed, Trash2, MoreVertical, PhoneCall, Download } from 'lucide-react';\nimport { format, formatDistance, formatDistanceToNow, parseISO } from 'date-fns';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn } from '@/lib/utils';\n\nconst CALL_STATUSES = [\n  { value: 'completed', label: 'Completed', color: 'bg-green-500' },\n  { value: 'missed', label: 'Missed', color: 'bg-red-500' },\n  { value: 'voicemail', label: 'Voicemail', color: 'bg-yellow-500' },\n  { value: 'scheduled', label: 'Scheduled', color: 'bg-blue-500' },\n  { value: 'callback-required', label: 'Callback Required', color: 'bg-purple-500' },\n];\n\nconst CALL_TYPES = [\n  { value: 'outbound', label: 'Outbound', icon: PhoneOutgoing },\n  { value: 'inbound', label: 'Inbound', icon: PhoneIncoming },\n  { value: 'missed', label: 'Missed', icon: PhoneMissed },\n];\n\nconst CALL_OUTCOMES = [\n  { value: 'interested', label: 'Interested' },\n  { value: 'not-interested', label: 'Not Interested' },\n  { value: 'no-answer', label: 'No Answer' },\n  { value: 'left-voicemail', label: 'Left Voicemail' },\n  { value: 'follow-up-required', label: 'Follow-up Required' },\n  { value: 'wrong-number', label: 'Wrong Number' },\n  { value: 'meeting-scheduled', label: 'Meeting Scheduled' },\n  { value: 'information-provided', label: 'Information Provided' },\n];\n\nconst callSchema = z.object({\n  title: z.string().min(2, \"Title is required\"),\n  description: z.string().optional(),\n  callType: z.string(),\n  duration: z.string().optional(),\n  status: z.string(),\n  outcome: z.string().optional(),\n  scheduled: z.boolean().optional(),\n  scheduledDate: z.string().optional(),\n  followUp: z.boolean().optional(),\n  followUpDate: z.string().optional(),\n  recordingUrl: z.string().optional(),\n});\n\ntype CallFormValues = z.infer<typeof callSchema>;\n\ninterface CallActivity extends Activity {\n  callType?: string;\n  outcome?: string;\n  scheduled?: boolean;\n  scheduledDate?: string;\n  followUp?: boolean;\n  followUpDate?: string;\n  recordingUrl?: string;\n}\n\ninterface CallSectionProps {\n  leadId: string;\n  calls: Activity[];\n  phoneNumber?: string;\n}\n\nexport function CallSection({ leadId, calls: initialCalls, phoneNumber }: CallSectionProps) {\n  const [calls, setCalls] = useState<CallActivity[]>(initialCalls || []);\n  const [isCallLogOpen, setIsCallLogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<string>(\"all\");\n  const [isDeleting, setIsDeleting] = useState<number | null>(null);\n  const [callDuration, setCallDuration] = useState(0); // In seconds\n  const [isCallActive, setIsCallActive] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Timer for call tracking\n  useEffect(() => {\n    if (isCallActive && !timerRef.current) {\n      timerRef.current = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    } else if (!isCallActive && timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isCallActive]);\n\n  // Initialize the form\n  const form = useForm<CallFormValues>({\n    resolver: zodResolver(callSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      callType: 'outbound',\n      duration: '00:00',\n      status: 'completed',\n      outcome: '',\n      scheduled: false,\n      scheduledDate: '',\n      followUp: false,\n      followUpDate: '',\n      recordingUrl: '',\n    },\n  });\n\n  // Format seconds to MM:SS\n  const formatDuration = (seconds: number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // Call starter function\n  const startCall = () => {\n    setIsCallActive(true);\n    setCallDuration(0);\n    // Prepopulate the form with outbound call\n    form.setValue('callType', 'outbound');\n    form.setValue('title', 'Call with ' + (phoneNumber ? formatPhoneNumber(phoneNumber) : 'Lead'));\n  };\n\n  // Format phone for display\n  const formatPhoneNumber = (phone: string): string => {\n    // Basic formatting, you could enhance this\n    if (!phone) return '';\n    return phone.startsWith('+') ? phone : `+${phone}`;\n  };\n\n  // Call ender function\n  const endCall = () => {\n    setIsCallActive(false);\n    setIsCallLogOpen(true);\n    // Set the final duration\n    form.setValue('duration', formatDuration(callDuration));\n  };\n\n  // Toggle recording\n  const toggleRecording = () => {\n    setIsRecording(!isRecording);\n    toast({\n      title: isRecording ? \"Recording Stopped\" : \"Recording Started\",\n      description: isRecording ? \"Call recording has stopped\" : \"Call is now being recorded\",\n      duration: 2000,\n    });\n  };\n\n  // Filter calls by status\n  const filteredCalls = calls.filter(call => {\n    if (activeTab === 'all') return true;\n    if (activeTab === 'scheduled' && call.scheduled) return true;\n    if (activeTab === 'followup' && call.followUp) return true;\n    return call.status === activeTab;\n  });\n\n  // Sort calls - scheduled first, then by date descending\n  const sortedCalls = [...filteredCalls].sort((a, b) => {\n    // Scheduled calls on top\n    if (a.scheduled && a.scheduledDate && !b.scheduled) return -1;\n    if (!a.scheduled && b.scheduled && b.scheduledDate) return 1;\n    \n    // Then sort by date (newest first)\n    return new Date(b.date).getTime() - new Date(a.date).getTime();\n  });\n\n  // Handle form submission\n  const handleSubmit = async (values: CallFormValues) => {\n    try {\n      // Create call activity\n      const callActivity: Partial<CallActivity> = {\n        type: 'call',\n        title: values.title,\n        description: values.description || '',\n        status: values.status,\n        duration: values.duration,\n        callType: values.callType,\n        outcome: values.outcome,\n        scheduled: values.scheduled,\n        scheduledDate: values.scheduledDate,\n        followUp: values.followUp,\n        followUpDate: values.followUpDate,\n        recordingUrl: values.recordingUrl,\n      };\n\n      // Add to database\n      await addActivityToLead(leadId, 'calls', callActivity);\n\n      // Optimistic update for UI\n      const optimisticCall: CallActivity = {\n        ...callActivity as CallActivity,\n        id: Date.now(),\n        date: new Date().toISOString(),\n      };\n\n      setCalls(prev => [optimisticCall, ...prev]);\n      setIsCallLogOpen(false);\n      \n      toast({\n        title: \"Call Logged\",\n        description: \"Call has been successfully logged\",\n        duration: 2000,\n      });\n\n      // Reset form\n      form.reset();\n      setCallDuration(0);\n    } catch (error) {\n      console.error('Error logging call:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to log call. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Delete a call\n  const deleteCall = async (callId: number) => {\n    try {\n      setIsDeleting(callId);\n      await deleteLeadActivity(leadId, 'calls', callId);\n      setCalls(prev => prev.filter(call => call.id !== callId));\n      toast({\n        title: \"Call Deleted\",\n        description: \"Call has been successfully deleted\",\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error('Error deleting call:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete call. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(null);\n    }\n  };\n\n  return (\n    <div>\n      {/* Call Controls */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex space-x-2\">\n          {isCallActive ? (\n            <>\n              <Button \n                variant=\"destructive\" \n                size=\"sm\"\n                onClick={endCall}\n              >\n                <X className=\"mr-1 h-4 w-4\" /> End Call ({formatDuration(callDuration)})\n              </Button>\n              <Button\n                variant={isRecording ? \"destructive\" : \"outline\"}\n                size=\"sm\"\n                onClick={toggleRecording}\n              >\n                {isRecording ? <MicOff className=\"mr-1 h-4 w-4\" /> : <Mic className=\"mr-1 h-4 w-4\" />}\n                {isRecording ? \"Stop Recording\" : \"Record Call\"}\n              </Button>\n            </>\n          ) : (\n            <div className=\"flex space-x-2\">\n              {phoneNumber && (\n                <Button className=\"bg-green-600 hover:bg-green-700\" onClick={startCall}>\n                  <Phone className=\"mr-1 h-4 w-4\" /> \n                  Call {formatPhoneNumber(phoneNumber)}\n                </Button>\n              )}\n              <Dialog open={isCallLogOpen} onOpenChange={setIsCallLogOpen}>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\">\n                    <Plus className=\"mr-1 h-4 w-4\" /> Log Call\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-lg\">\n                  <DialogHeader>\n                    <DialogTitle>Log a Call</DialogTitle>\n                    <DialogDescription>\n                      Record details about a call with this lead\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Call Title</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g. Initial Discussion\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"callType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Call Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {CALL_TYPES.map(type => (\n                                    <SelectItem key={type.value} value={type.value}>\n                                      <div className=\"flex items-center\">\n                                        <type.icon className=\"mr-2 h-4 w-4\" />\n                                        {type.label}\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Call Status</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select status\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {CALL_STATUSES.map(status => (\n                                    <SelectItem key={status.value} value={status.value}>\n                                      <div className=\"flex items-center\">\n                                        <span className={`w-2 h-2 rounded-full mr-2 ${status.color}`} />\n                                        {status.label}\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"duration\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Duration</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g. 15:30\" {...field} />\n                              </FormControl>\n                              <FormDescription>\n                                Format as MM:SS\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"outcome\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Outcome</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select outcome\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {CALL_OUTCOMES.map(outcome => (\n                                    <SelectItem key={outcome.value} value={outcome.value}>\n                                      {outcome.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Enter notes about the call...\" \n                                className=\"min-h-[100px]\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <Separator />\n                      \n                      <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"scheduled\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                              <FormControl>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value}\n                                  onChange={(e) => field.onChange(e.target.checked)}\n                                  className=\"h-4 w-4 rounded border-gray-300\"\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel>Scheduled Call</FormLabel>\n                                <FormDescription>\n                                  Is this a call scheduled for a future date?\n                                </FormDescription>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        {form.watch(\"scheduled\") && (\n                          <FormField\n                            control={form.control}\n                            name=\"scheduledDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Scheduled Date</FormLabel>\n                                <FormControl>\n                                  <Input type=\"datetime-local\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        )}\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"followUp\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                              <FormControl>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value}\n                                  onChange={(e) => field.onChange(e.target.checked)}\n                                  className=\"h-4 w-4 rounded border-gray-300\"\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel>Follow up Required</FormLabel>\n                                <FormDescription>\n                                  Do you need to follow up after this call?\n                                </FormDescription>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                        \n                        {form.watch(\"followUp\") && (\n                          <FormField\n                            control={form.control}\n                            name=\"followUpDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Follow-up Date</FormLabel>\n                                <FormControl>\n                                  <Input type=\"datetime-local\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        )}\n                      </div>\n                      \n                      <DialogFooter>\n                        <DialogClose asChild>\n                          <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                        </DialogClose>\n                        <Button type=\"submit\">Save Call</Button>\n                      </DialogFooter>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          )}\n        </div>\n        \n        {!isCallActive && (\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-fit\">\n            <TabsList>\n              <TabsTrigger value=\"all\">All</TabsTrigger>\n              <TabsTrigger value=\"scheduled\">Scheduled</TabsTrigger>\n              <TabsTrigger value=\"followup\">Follow-up</TabsTrigger>\n              <TabsTrigger value=\"missed\">Missed</TabsTrigger>\n            </TabsList>\n          </Tabs>\n        )}\n      </div>\n\n      {/* Call List */}\n      <div className=\"space-y-4 mt-4\">\n        {sortedCalls.length === 0 ? (\n          <div className=\"text-center p-8 border-2 border-dashed rounded-lg\">\n            <PhoneCall className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-semibold text-gray-900\">No calls</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Get started by making a new call or logging a past call.</p>\n          </div>\n        ) : (\n          sortedCalls.map(call => {\n            const callStatus = CALL_STATUSES.find(s => s.value === call.status) || CALL_STATUSES[0];\n            const callType = CALL_TYPES.find(t => t.value === call.callType);\n            const isScheduled = call.scheduled && call.scheduledDate;\n            const CallTypeIcon = callType?.icon || Phone;\n            \n            return (\n              <Card key={call.id} className={cn(\n                \"p-4\",\n                isScheduled ? \"border-blue-200 bg-blue-50\" : \"bg-muted/50\",\n                call.followUp ? \"border-purple-200\" : \"\"\n              )}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className={cn(\n                      \"mt-1 p-2 rounded-full\",\n                      callStatus.color + \"/20\"\n                    )}>\n                      <CallTypeIcon className={cn(\n                        \"w-4 h-4\",\n                        callStatus.color.replace('bg-', 'text-').replace('-500', '-700')\n                      )} />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center\">\n                        <h4 className=\"font-medium\">{call.title}</h4>\n                        <Badge \n                          variant=\"outline\" \n                          className={cn(\n                            \"ml-2 text-xs\",\n                            callStatus.color.replace('bg-', 'border-'),\n                            callStatus.color.replace('bg-', 'text-').replace('-500', '-700'),\n                          )}\n                        >\n                          {callStatus.label}\n                        </Badge>\n                        \n                        {call.outcome && (\n                          <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                            {CALL_OUTCOMES.find(o => o.value === call.outcome)?.label || call.outcome}\n                          </Badge>\n                        )}\n                      </div>\n                      \n                      {call.description && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{call.description}</p>\n                      )}\n                      \n                      <div className=\"flex items-center flex-wrap gap-3 mt-2 text-xs\">\n                        {call.duration && (\n                          <span className=\"flex items-center text-muted-foreground\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {call.duration}\n                          </span>\n                        )}\n                        \n                        <span className=\"flex items-center text-muted-foreground\">\n                          <Calendar className=\"w-3 h-3 mr-1\" />\n                          {format(new Date(call.date), 'MMM d, yyyy h:mm a')}\n                        </span>\n                        \n                        {isScheduled && (\n                          <span className=\"flex items-center text-blue-600\">\n                            <CalendarClock className=\"w-3 h-3 mr-1\" />\n                            Scheduled: {format(new Date(call.scheduledDate), 'MMM d, yyyy h:mm a')}\n                          </span>\n                        )}\n                        \n                        {call.followUp && call.followUpDate && (\n                          <span className=\"flex items-center text-purple-600\">\n                            <Clock8 className=\"w-3 h-3 mr-1\" />\n                            Follow-up: {format(new Date(call.followUpDate), 'MMM d, yyyy h:mm a')}\n                          </span>\n                        )}\n                        \n                        {call.recordingUrl && (\n                          <span className=\"flex items-center text-primary\">\n                            <Download className=\"w-3 h-3 mr-1\" />\n                            <a \n                              href={call.recordingUrl} \n                              target=\"_blank\" \n                              rel=\"noopener noreferrer\"\n                              className=\"underline hover:text-primary/80\"\n                            >\n                              Download Recording\n                            </a>\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                      <DropdownMenuItem\n                        onClick={() => {\n                          // Clone and edit the call (reusing same form)\n                          form.reset({\n                            title: call.title,\n                            description: call.description,\n                            callType: call.callType || 'outbound',\n                            duration: call.duration || '00:00',\n                            status: call.status || 'completed',\n                            outcome: call.outcome || '',\n                            scheduled: call.scheduled || false,\n                            scheduledDate: call.scheduledDate || '',\n                            followUp: call.followUp || false,\n                            followUpDate: call.followUpDate || '',\n                            recordingUrl: call.recordingUrl || '',\n                          });\n                          setIsCallLogOpen(true);\n                        }}\n                      >\n                        <Pencil className=\"mr-2 h-4 w-4\" />\n                        Edit Call\n                      </DropdownMenuItem>\n                      \n                      {!call.scheduled && (\n                        <DropdownMenuItem\n                          onClick={() => {\n                            // Edit just to set scheduled\n                            form.reset({\n                              ...form.getValues(),\n                              title: call.title,\n                              scheduled: true,\n                              scheduledDate: new Date().toISOString().slice(0, 16),\n                            });\n                            setIsCallLogOpen(true);\n                          }}\n                        >\n                          <Calendar className=\"mr-2 h-4 w-4\" />\n                          Schedule Follow-up\n                        </DropdownMenuItem>\n                      )}\n                      \n                      <DropdownMenuSeparator />\n                      \n                      <DropdownMenuItem\n                        onClick={() => deleteCall(call.id)}\n                        disabled={isDeleting === call.id}\n                        className=\"text-destructive focus:text-destructive\"\n                      >\n                        {isDeleting === call.id ? (\n                          <>Loading...</>\n                        ) : (\n                          <>\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete\n                          </>\n                        )}\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n} "
        }
    ]
}