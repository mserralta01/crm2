{
    "sourceFile": "components/leads/add-lead-dialog.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1741293845478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741293866276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,10 @@\n   SelectTrigger,\n   SelectValue,\n } from '@/components/ui/select';\n import { createLead } from '@/lib/services/leads-service';\n-import { toast } from '@/components/ui/use-toast';\n+import { toast } from '@/hooks/use-toast';\n+import { getLeadsByStatus } from '@/lib/services/leads-service';\n \n // Form validation schema\n const formSchema = z.object({\n   name: z.string().min(1, \"Name is required\"),\n@@ -74,11 +75,18 @@\n       if (!values.value.startsWith('$')) {\n         values.value = `$${values.value}`;\n       }\n \n+      // Get leads with the same status to determine position\n+      const leadsWithSameStatus = await getLeadsByStatus(values.status);\n+      const position = leadsWithSameStatus.length > 0\n+        ? Math.max(...leadsWithSameStatus.map(lead => lead.position || 0)) + 1\n+        : 1;\n+\n       // Create the lead in the database\n       await createLead({\n         ...values,\n+        position,\n         createdAt: new Date().toISOString(),\n         lastActivity: new Date().toISOString(),\n         activities: {\n           calls: [],\n"
                },
                {
                    "date": 1741293881983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,10 @@\n   SelectItem,\n   SelectTrigger,\n   SelectValue,\n } from '@/components/ui/select';\n-import { createLead } from '@/lib/services/leads-service';\n+import { createLead, getLeadsByStatus } from '@/lib/services/leads-service';\n import { toast } from '@/hooks/use-toast';\n-import { getLeadsByStatus } from '@/lib/services/leads-service';\n \n // Form validation schema\n const formSchema = z.object({\n   name: z.string().min(1, \"Name is required\"),\n"
                },
                {
                    "date": 1741295236510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,20 +74,17 @@\n       if (!values.value.startsWith('$')) {\n         values.value = `$${values.value}`;\n       }\n \n-      // Get leads with the same status to determine position\n-      const leadsWithSameStatus = await getLeadsByStatus(values.status);\n-      const position = leadsWithSameStatus.length > 0\n-        ? Math.max(...leadsWithSameStatus.map(lead => lead.position || 0)) + 1\n-        : 1;\n-\n-      // Create the lead in the database\n+      // Create the lead in the database with the current timestamp\n+      const now = new Date().toISOString();\n+      \n+      // We don't need to manually calculate position anymore as createLead handles this\n       await createLead({\n         ...values,\n-        position,\n-        createdAt: new Date().toISOString(),\n-        lastActivity: new Date().toISOString(),\n+        position: 0, // Will be calculated in createLead function\n+        createdAt: now,\n+        lastActivity: now,\n         activities: {\n           calls: [],\n           notes: [],\n           emails: [],\n@@ -109,11 +106,15 @@\n       // Notify parent component\n       onLeadAdded();\n     } catch (error) {\n       console.error('Error creating lead:', error);\n+      const errorMessage = error instanceof Error \n+        ? error.message \n+        : \"Failed to create lead. Please try again.\";\n+      \n       toast({\n         title: \"Error\",\n-        description: \"Failed to create lead. Please try again.\",\n+        description: errorMessage,\n         variant: \"destructive\",\n       });\n     } finally {\n       setIsSubmitting(false);\n"
                },
                {
                    "date": 1742496310691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,14 +46,14 @@\n \n type FormValues = z.infer<typeof formSchema>;\n \n interface AddLeadDialogProps {\n-  children?: React.ReactNode;\n-  onLeadAdded: () => void;\n+  open: boolean;\n+  onClose: () => void;\n+  onLeadAdded: (newLead: Lead) => void;\n }\n \n-export function AddLeadDialog({ children, onLeadAdded }: AddLeadDialogProps) {\n-  const [open, setOpen] = useState(false);\n+export function AddLeadDialog({ open, onClose, onLeadAdded }: AddLeadDialogProps) {\n   const [isSubmitting, setIsSubmitting] = useState(false);\n \n   const form = useForm<FormValues>({\n     resolver: zodResolver(formSchema),\n@@ -100,12 +100,30 @@\n       });\n \n       // Reset form and close dialog\n       form.reset();\n-      setOpen(false);\n+      onClose();\n       \n       // Notify parent component\n-      onLeadAdded();\n+      onLeadAdded({\n+        id: \"\",\n+        name: values.name,\n+        company: values.company,\n+        email: values.email,\n+        phone: values.phone,\n+        status: values.status,\n+        value: values.value,\n+        position: 0,\n+        createdAt: now,\n+        lastActivity: now,\n+        activities: {\n+          calls: [],\n+          notes: [],\n+          emails: [],\n+          meetings: [],\n+          documents: [],\n+        }\n+      });\n     } catch (error) {\n       console.error('Error creating lead:', error);\n       const errorMessage = error instanceof Error \n         ? error.message \n@@ -121,12 +139,9 @@\n     }\n   }\n \n   return (\n-    <Dialog open={open} onOpenChange={setOpen}>\n-      <DialogTrigger asChild>\n-        {children}\n-      </DialogTrigger>\n+    <Dialog open={open} onOpenChange={onClose}>\n       <DialogContent className=\"sm:max-w-[525px]\">\n         <DialogHeader>\n           <DialogTitle>Add New Lead</DialogTitle>\n           <DialogDescription>\n"
                },
                {
                    "date": 1742497145793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n import { toast } from '@/hooks/use-toast';\n \n // Form validation schema\n const formSchema = z.object({\n-  name: z.string().min(1, \"Name is required\"),\n+  firstName: z.string().min(1, \"First name is required\"),\n+  lastName: z.string().min(1, \"Last name is required\"),\n   company: z.string().min(1, \"Company is required\"),\n   email: z.string().email(\"Invalid email address\"),\n   phone: z.string().min(1, \"Phone number is required\"),\n   status: z.string().min(1, \"Status is required\"),\n@@ -57,9 +58,10 @@\n \n   const form = useForm<FormValues>({\n     resolver: zodResolver(formSchema),\n     defaultValues: {\n-      name: \"\",\n+      firstName: \"\",\n+      lastName: \"\",\n       company: \"\",\n       email: \"\",\n       phone: \"\",\n       status: \"New\",\n@@ -95,9 +97,9 @@\n \n       // Show success message\n       toast({\n         title: \"Success\",\n-        description: `Lead for ${values.name} from ${values.company} has been created.`,\n+        description: `Lead for ${values.firstName} ${values.lastName} from ${values.company} has been created.`,\n       });\n \n       // Reset form and close dialog\n       form.reset();\n@@ -105,9 +107,10 @@\n       \n       // Notify parent component\n       onLeadAdded({\n         id: \"\",\n-        name: values.name,\n+        firstName: values.firstName,\n+        lastName: values.lastName,\n         company: values.company,\n         email: values.email,\n         phone: values.phone,\n         status: values.status,\n@@ -152,27 +155,27 @@\n           <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-4\">\n             <div className=\"grid grid-cols-2 gap-4\">\n               <FormField\n                 control={form.control}\n-                name=\"name\"\n+                name=\"firstName\"\n                 render={({ field }) => (\n                   <FormItem>\n-                    <FormLabel>Name</FormLabel>\n+                    <FormLabel>First Name</FormLabel>\n                     <FormControl>\n-                      <Input placeholder=\"John Smith\" {...field} />\n+                      <Input placeholder=\"John\" {...field} />\n                     </FormControl>\n                     <FormMessage />\n                   </FormItem>\n                 )}\n               />\n               <FormField\n                 control={form.control}\n-                name=\"company\"\n+                name=\"lastName\"\n                 render={({ field }) => (\n                   <FormItem>\n-                    <FormLabel>Company</FormLabel>\n+                    <FormLabel>Last Name</FormLabel>\n                     <FormControl>\n-                      <Input placeholder=\"Acme Inc.\" {...field} />\n+                      <Input placeholder=\"Smith\" {...field} />\n                     </FormControl>\n                     <FormMessage />\n                   </FormItem>\n                 )}\n@@ -181,8 +184,21 @@\n             \n             <div className=\"grid grid-cols-2 gap-4\">\n               <FormField\n                 control={form.control}\n+                name=\"company\"\n+                render={({ field }) => (\n+                  <FormItem>\n+                    <FormLabel>Company</FormLabel>\n+                    <FormControl>\n+                      <Input placeholder=\"Acme Inc.\" {...field} />\n+                    </FormControl>\n+                    <FormMessage />\n+                  </FormItem>\n+                )}\n+              />\n+              <FormField\n+                control={form.control}\n                 name=\"email\"\n                 render={({ field }) => (\n                   <FormItem>\n                     <FormLabel>Email</FormLabel>\n@@ -192,8 +208,11 @@\n                     <FormMessage />\n                   </FormItem>\n                 )}\n               />\n+            </div>\n+            \n+            <div className=\"grid grid-cols-2 gap-4\">\n               <FormField\n                 control={form.control}\n                 name=\"phone\"\n                 render={({ field }) => (\n@@ -205,11 +224,8 @@\n                     <FormMessage />\n                   </FormItem>\n                 )}\n               />\n-            </div>\n-            \n-            <div className=\"grid grid-cols-2 gap-4\">\n               <FormField\n                 control={form.control}\n                 name=\"status\"\n                 render={({ field }) => (\n@@ -231,8 +247,11 @@\n                     <FormMessage />\n                   </FormItem>\n                 )}\n               />\n+            </div>\n+            \n+            <div className=\"grid grid-cols-2 gap-4\">\n               <FormField\n                 control={form.control}\n                 name=\"value\"\n                 render={({ field }) => (\n"
                },
                {
                    "date": 1742497153007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n   SelectValue,\n } from '@/components/ui/select';\n import { createLead, getLeadsByStatus } from '@/lib/services/leads-service';\n import { toast } from '@/hooks/use-toast';\n+import { Lead } from '@/data/leads';\n \n // Form validation schema\n const formSchema = z.object({\n   firstName: z.string().min(1, \"First name is required\"),\n"
                },
                {
                    "date": 1742497159188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,9 @@\n       \n       // Notify parent component\n       onLeadAdded({\n         id: \"\",\n+        numericId: Date.now(),\n         firstName: values.firstName,\n         lastName: values.lastName,\n         company: values.company,\n         email: values.email,\n"
                },
                {
                    "date": 1742497211862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,11 @@\n \n       // Create the lead in the database with the current timestamp\n       const now = new Date().toISOString();\n       \n+      // Create a temporary numeric ID for the lead\n+      const tempNumericId = Date.now();\n+      \n       // We don't need to manually calculate position anymore as createLead handles this\n       await createLead({\n         ...values,\n         position: 0, // Will be calculated in createLead function\n@@ -106,11 +109,11 @@\n       form.reset();\n       onClose();\n       \n       // Notify parent component\n-      onLeadAdded({\n+      const newLead: Lead = {\n         id: \"\",\n-        numericId: Date.now(),\n+        numericId: tempNumericId,\n         firstName: values.firstName,\n         lastName: values.lastName,\n         company: values.company,\n         email: values.email,\n@@ -126,9 +129,11 @@\n           emails: [],\n           meetings: [],\n           documents: [],\n         }\n-      });\n+      };\n+      \n+      onLeadAdded(newLead);\n     } catch (error) {\n       console.error('Error creating lead:', error);\n       const errorMessage = error instanceof Error \n         ? error.message \n"
                },
                {
                    "date": 1742497802475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,16 +33,21 @@\n } from '@/components/ui/select';\n import { createLead, getLeadsByStatus } from '@/lib/services/leads-service';\n import { toast } from '@/hooks/use-toast';\n import { Lead } from '@/data/leads';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n \n // Form validation schema\n const formSchema = z.object({\n   firstName: z.string().min(1, \"First name is required\"),\n   lastName: z.string().min(1, \"Last name is required\"),\n   company: z.string().min(1, \"Company is required\"),\n   email: z.string().email(\"Invalid email address\"),\n-  phone: z.string().min(1, \"Phone number is required\"),\n+  phone: z.string()\n+    .min(1, \"Phone number is required\")\n+    .refine(val => isValidPhoneNumber(val), {\n+      message: \"Invalid phone number format. Must be a valid US number.\"\n+    }),\n   status: z.string().min(1, \"Status is required\"),\n   value: z.string().min(1, \"Value is required\"),\n });\n \n@@ -77,8 +82,11 @@\n       if (!values.value.startsWith('$')) {\n         values.value = `$${values.value}`;\n       }\n \n+      // Format the phone number\n+      const formattedPhone = formatPhoneNumber(values.phone);\n+\n       // Create the lead in the database with the current timestamp\n       const now = new Date().toISOString();\n       \n       // Create a temporary numeric ID for the lead\n@@ -86,8 +94,9 @@\n       \n       // We don't need to manually calculate position anymore as createLead handles this\n       await createLead({\n         ...values,\n+        phone: formattedPhone,\n         position: 0, // Will be calculated in createLead function\n         createdAt: now,\n         lastActivity: now,\n         activities: {\n@@ -116,9 +125,9 @@\n         firstName: values.firstName,\n         lastName: values.lastName,\n         company: values.company,\n         email: values.email,\n-        phone: values.phone,\n+        phone: formattedPhone,\n         status: values.status,\n         value: values.value,\n         position: 0,\n         createdAt: now,\n@@ -225,10 +234,22 @@\n                 render={({ field }) => (\n                   <FormItem>\n                     <FormLabel>Phone</FormLabel>\n                     <FormControl>\n-                      <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n+                      <Input \n+                        placeholder=\"+1 (555) 123-4567\" \n+                        {...field}\n+                        onBlur={(e) => {\n+                          if (isValidPhoneNumber(e.target.value)) {\n+                            field.onChange(formatPhoneNumber(e.target.value));\n+                          }\n+                          field.onBlur();\n+                        }}\n+                      />\n                     </FormControl>\n+                    <FormDescription>\n+                      Format: +1 (###) ###-####\n+                    </FormDescription>\n                     <FormMessage />\n                   </FormItem>\n                 )}\n               />\n"
                }
            ],
            "date": 1741293845478,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { createLead } from '@/lib/services/leads-service';\nimport { toast } from '@/components/ui/use-toast';\n\n// Form validation schema\nconst formSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  company: z.string().min(1, \"Company is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  status: z.string().min(1, \"Status is required\"),\n  value: z.string().min(1, \"Value is required\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface AddLeadDialogProps {\n  children?: React.ReactNode;\n  onLeadAdded: () => void;\n}\n\nexport function AddLeadDialog({ children, onLeadAdded }: AddLeadDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      company: \"\",\n      email: \"\",\n      phone: \"\",\n      status: \"New\",\n      value: \"$0\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    try {\n      // Format the value as a currency string if it's not already\n      if (!values.value.startsWith('$')) {\n        values.value = `$${values.value}`;\n      }\n\n      // Create the lead in the database\n      await createLead({\n        ...values,\n        createdAt: new Date().toISOString(),\n        lastActivity: new Date().toISOString(),\n        activities: {\n          calls: [],\n          notes: [],\n          emails: [],\n          meetings: [],\n          documents: [],\n        }\n      });\n\n      // Show success message\n      toast({\n        title: \"Success\",\n        description: `Lead for ${values.name} from ${values.company} has been created.`,\n      });\n\n      // Reset form and close dialog\n      form.reset();\n      setOpen(false);\n      \n      // Notify parent component\n      onLeadAdded();\n    } catch (error) {\n      console.error('Error creating lead:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create lead. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Lead</DialogTitle>\n          <DialogDescription>\n            Enter the details for the new lead. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 py-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Smith\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"company\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Company</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Acme Inc.\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"john@example.com\" type=\"email\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"New\">New</SelectItem>\n                        <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                        <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                        <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"value\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Value</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"$5,000\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Estimated deal value\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <DialogFooter>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? \"Saving...\" : \"Save Lead\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n} "
        }
    ]
}