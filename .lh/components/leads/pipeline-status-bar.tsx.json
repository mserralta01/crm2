{
    "sourceFile": "components/leads/pipeline-status-bar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743707923993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743708128816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,168 +1,1 @@\n-\"use client\";\n-\n-import { useState } from 'react';\n-import { cn } from '@/lib/utils';\n-import { ChevronRight, Check } from 'lucide-react';\n-import { useRouter } from 'next/navigation';\n-import { updateLead } from '@/lib/services/leads-service';\n-import { toast } from '@/hooks/use-toast';\n-\n-interface PipelineStage {\n-  id: string;\n-  name: string;\n-  color: string;\n-  description?: string;\n-}\n-\n-// Define the pipeline stages\n-const PIPELINE_STAGES: PipelineStage[] = [\n-  { id: 'New', name: 'New', color: 'bg-blue-600', description: 'Lead has just entered the pipeline' },\n-  { id: 'Contacted', name: 'Contact Made', color: 'bg-green-600', description: 'Initial contact has been made' },\n-  { id: 'Qualified', name: 'Qualified', color: 'bg-yellow-600', description: 'Lead has been qualified' },\n-  { id: 'Negotiating', name: 'Negotiating', color: 'bg-purple-600', description: 'In active negotiation' },\n-  { id: 'Proposal', name: 'Proposal', color: 'bg-pink-600', description: 'Proposal has been sent' },\n-  { id: 'Closed', name: 'Closed', color: 'bg-teal-600', description: 'Deal has been closed' }\n-];\n-\n-interface PipelineStatusBarProps {\n-  leadId: string;\n-  currentStatus: string;\n-  stageHistory?: Record<string, { enteredAt: string }>;\n-  onStatusChange?: (newStatus: string) => void;\n-}\n-\n-export function PipelineStatusBar({ \n-  leadId, \n-  currentStatus, \n-  stageHistory = {},\n-  onStatusChange\n-}: PipelineStatusBarProps) {\n-  const [isUpdating, setIsUpdating] = useState(false);\n-  const [updating, setUpdating] = useState<string | null>(null);\n-  const router = useRouter();\n-\n-  // Calculate the current stage index\n-  const currentStageIndex = PIPELINE_STAGES.findIndex(stage => stage.id === currentStatus);\n-  \n-  // Calculate days in each stage\n-  const calculateDaysInStage = (stageId: string) => {\n-    const stage = stageHistory[stageId];\n-    if (!stage) return 0;\n-    \n-    const enteredAt = new Date(stage.enteredAt);\n-    const now = new Date();\n-    const diffTime = Math.abs(now.getTime() - enteredAt.getTime());\n-    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n-    \n-    return diffDays;\n-  };\n-\n-  // Handle click on a stage\n-  const handleStageClick = async (stageId: string) => {\n-    if (stageId === currentStatus || isUpdating) return;\n-    \n-    setIsUpdating(true);\n-    setUpdating(stageId);\n-    \n-    try {\n-      // Update the lead status\n-      await updateLead(leadId, { \n-        status: stageId,\n-        // Add entry to stage history\n-        stageHistory: {\n-          ...stageHistory,\n-          [stageId]: { enteredAt: new Date().toISOString() }\n-        }\n-      });\n-      \n-      // Call the onStatusChange callback if provided\n-      if (onStatusChange) {\n-        onStatusChange(stageId);\n-      }\n-      \n-      toast({\n-        title: \"Status updated\",\n-        description: `Lead moved to ${stageId} stage`,\n-        duration: 2000,\n-      });\n-      \n-      // Refresh the page to show updated data\n-      router.refresh();\n-    } catch (error) {\n-      console.error('Error updating lead status:', error);\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to update lead status\",\n-        variant: \"destructive\",\n-      });\n-    } finally {\n-      setIsUpdating(false);\n-      setUpdating(null);\n-    }\n-  };\n-\n-  return (\n-    <div className=\"w-full mb-8\">\n-      <div className=\"flex flex-col space-y-2\">\n-        <div className=\"flex items-center justify-between\">\n-          <h2 className=\"text-lg font-semibold\">Pipeline Progress</h2>\n-        </div>\n-        \n-        <div className=\"flex w-full relative\">\n-          {PIPELINE_STAGES.map((stage, index) => {\n-            const isActive = currentStatus === stage.id;\n-            const isCompleted = currentStageIndex > index;\n-            const isPending = currentStageIndex < index;\n-            const daysInStage = calculateDaysInStage(stage.id);\n-            \n-            return (\n-              <div \n-                key={stage.id}\n-                className=\"relative flex-1 flex flex-col\"\n-              >\n-                <button\n-                  onClick={() => handleStageClick(stage.id)}\n-                  disabled={isUpdating}\n-                  className={cn(\n-                    \"h-8 relative cursor-pointer transition-colors flex-1 first:rounded-l-md last:rounded-r-md\",\n-                    isActive && stage.color,\n-                    isCompleted && stage.color,\n-                    isPending && \"bg-gray-200\",\n-                    isUpdating && \"opacity-50 cursor-wait\"\n-                  )}\n-                  title={stage.description}\n-                >\n-                  {updating === stage.id && (\n-                    <div className=\"absolute inset-0 bg-white/20 flex items-center justify-center\">\n-                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n-                    </div>\n-                  )}\n-                  \n-                  {isCompleted && (\n-                    <div className=\"absolute inset-0 flex items-center justify-center\">\n-                      <Check className=\"w-4 h-4 text-white\" />\n-                    </div>\n-                  )}\n-                  \n-                  {/* Connector between stages */}\n-                  {index < PIPELINE_STAGES.length - 1 && (\n-                    <div className=\"absolute right-0 top-0 bottom-0 z-10 flex items-center pointer-events-none\">\n-                      <ChevronRight className=\"h-6 w-6 text-white\" />\n-                    </div>\n-                  )}\n-                </button>\n-                \n-                <div className=\"mt-1 text-center text-xs\">\n-                  <span className=\"font-medium\">{stage.name}</span>\n-                  <div className=\"text-muted-foreground text-[10px]\">\n-                    {daysInStage} {daysInStage === 1 ? 'day' : 'days'}\n-                  </div>\n-                </div>\n-              </div>\n-            );\n-          })}\n-        </div>\n-      </div>\n-    </div>\n-  );\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743707923993,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState } from 'react';\nimport { cn } from '@/lib/utils';\nimport { ChevronRight, Check } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { updateLead } from '@/lib/services/leads-service';\nimport { toast } from '@/hooks/use-toast';\n\ninterface PipelineStage {\n  id: string;\n  name: string;\n  color: string;\n  description?: string;\n}\n\n// Define the pipeline stages\nconst PIPELINE_STAGES: PipelineStage[] = [\n  { id: 'New', name: 'New', color: 'bg-blue-600', description: 'Lead has just entered the pipeline' },\n  { id: 'Contacted', name: 'Contact Made', color: 'bg-green-600', description: 'Initial contact has been made' },\n  { id: 'Qualified', name: 'Qualified', color: 'bg-yellow-600', description: 'Lead has been qualified' },\n  { id: 'Negotiating', name: 'Negotiating', color: 'bg-purple-600', description: 'In active negotiation' },\n  { id: 'Proposal', name: 'Proposal', color: 'bg-pink-600', description: 'Proposal has been sent' },\n  { id: 'Closed', name: 'Closed', color: 'bg-teal-600', description: 'Deal has been closed' }\n];\n\ninterface PipelineStatusBarProps {\n  leadId: string;\n  currentStatus: string;\n  stageHistory?: Record<string, { enteredAt: string }>;\n  onStatusChange?: (newStatus: string) => void;\n}\n\nexport function PipelineStatusBar({ \n  leadId, \n  currentStatus, \n  stageHistory = {},\n  onStatusChange\n}: PipelineStatusBarProps) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [updating, setUpdating] = useState<string | null>(null);\n  const router = useRouter();\n\n  // Calculate the current stage index\n  const currentStageIndex = PIPELINE_STAGES.findIndex(stage => stage.id === currentStatus);\n  \n  // Calculate days in each stage\n  const calculateDaysInStage = (stageId: string) => {\n    const stage = stageHistory[stageId];\n    if (!stage) return 0;\n    \n    const enteredAt = new Date(stage.enteredAt);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - enteredAt.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays;\n  };\n\n  // Handle click on a stage\n  const handleStageClick = async (stageId: string) => {\n    if (stageId === currentStatus || isUpdating) return;\n    \n    setIsUpdating(true);\n    setUpdating(stageId);\n    \n    try {\n      // Update the lead status\n      await updateLead(leadId, { \n        status: stageId,\n        // Add entry to stage history\n        stageHistory: {\n          ...stageHistory,\n          [stageId]: { enteredAt: new Date().toISOString() }\n        }\n      });\n      \n      // Call the onStatusChange callback if provided\n      if (onStatusChange) {\n        onStatusChange(stageId);\n      }\n      \n      toast({\n        title: \"Status updated\",\n        description: `Lead moved to ${stageId} stage`,\n        duration: 2000,\n      });\n      \n      // Refresh the page to show updated data\n      router.refresh();\n    } catch (error) {\n      console.error('Error updating lead status:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update lead status\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUpdating(false);\n      setUpdating(null);\n    }\n  };\n\n  return (\n    <div className=\"w-full mb-8\">\n      <div className=\"flex flex-col space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold\">Pipeline Progress</h2>\n        </div>\n        \n        <div className=\"flex w-full relative\">\n          {PIPELINE_STAGES.map((stage, index) => {\n            const isActive = currentStatus === stage.id;\n            const isCompleted = currentStageIndex > index;\n            const isPending = currentStageIndex < index;\n            const daysInStage = calculateDaysInStage(stage.id);\n            \n            return (\n              <div \n                key={stage.id}\n                className=\"relative flex-1 flex flex-col\"\n              >\n                <button\n                  onClick={() => handleStageClick(stage.id)}\n                  disabled={isUpdating}\n                  className={cn(\n                    \"h-8 relative cursor-pointer transition-colors flex-1 first:rounded-l-md last:rounded-r-md\",\n                    isActive && stage.color,\n                    isCompleted && stage.color,\n                    isPending && \"bg-gray-200\",\n                    isUpdating && \"opacity-50 cursor-wait\"\n                  )}\n                  title={stage.description}\n                >\n                  {updating === stage.id && (\n                    <div className=\"absolute inset-0 bg-white/20 flex items-center justify-center\">\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                    </div>\n                  )}\n                  \n                  {isCompleted && (\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <Check className=\"w-4 h-4 text-white\" />\n                    </div>\n                  )}\n                  \n                  {/* Connector between stages */}\n                  {index < PIPELINE_STAGES.length - 1 && (\n                    <div className=\"absolute right-0 top-0 bottom-0 z-10 flex items-center pointer-events-none\">\n                      <ChevronRight className=\"h-6 w-6 text-white\" />\n                    </div>\n                  )}\n                </button>\n                \n                <div className=\"mt-1 text-center text-xs\">\n                  <span className=\"font-medium\">{stage.name}</span>\n                  <div className=\"text-muted-foreground text-[10px]\">\n                    {daysInStage} {daysInStage === 1 ? 'day' : 'days'}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n} "
        }
    ]
}