{
    "sourceFile": "components/leads/note-section.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743707448489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743707448489,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { LeadNote } from '@/components/leads/lead-note';\nimport { addActivityToLead, updateLeadActivity, deleteLeadActivity } from '@/lib/services/leads-service';\nimport { Activity } from '@/data/leads';\n\ninterface NoteSectionProps {\n  leadId: string;\n  notes: Activity[];\n}\n\nexport function NoteSection({ leadId, notes: initialNotes }: NoteSectionProps) {\n  const [notes, setNotes] = useState<Activity[]>(initialNotes || []);\n  const [noteText, setNoteText] = useState('');\n  const [noteTitle, setNoteTitle] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Use effect to update notes when initialNotes changes (like after refresh)\n  useEffect(() => {\n    setNotes(initialNotes || []);\n  }, [initialNotes]);\n\n  // Sort notes with pinned on top, then by date descending\n  const sortedNotes = [...notes].sort((a, b) => {\n    if (a.isPinned && !b.isPinned) return -1;\n    if (!a.isPinned && b.isPinned) return 1;\n    return new Date(b.date).getTime() - new Date(a.date).getTime();\n  });\n\n  const handleSaveNote = async () => {\n    if (!noteText.trim()) return;\n\n    setIsSaving(true);\n\n    try {\n      // Create title from first line or first few words\n      const title = noteTitle.trim() || \n        (noteText.split('\\n')[0].substring(0, 50) + (noteText.split('\\n')[0].length > 50 ? '...' : ''));\n\n      // Create a new note with current timestamp\n      const newNote: Omit<Activity, 'id' | 'date'> = {\n        type: 'note',\n        title,\n        description: noteText,\n        isPinned: false\n      };\n\n      // Add to database\n      await addActivityToLead(leadId, 'notes', newNote);\n\n      // For optimistic UI update - create a temporary ID\n      const optimisticNote: Activity = {\n        ...newNote,\n        id: Date.now(),\n        date: new Date().toISOString(),\n      };\n\n      setNotes(prev => [optimisticNote, ...prev]);\n      setNoteText('');\n      setNoteTitle('');\n      \n      // Focus back on textarea for continuous note taking\n      if (textareaRef.current) {\n        textareaRef.current.focus();\n      }\n    } catch (error) {\n      console.error('Error saving note:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handlePinNote = async (noteId: number, isPinned: boolean) => {\n    // Find the note to update\n    const noteToUpdate = notes.find(note => note.id === noteId);\n    if (!noteToUpdate) return;\n\n    try {\n      // Update in database\n      await updateLeadActivity(leadId, 'notes', noteId, { isPinned });\n\n      // Update in state for immediate UI feedback\n      setNotes(prev => \n        prev.map(note => \n          note.id === noteId ? { ...note, isPinned } : note\n        )\n      );\n    } catch (error) {\n      console.error('Error pinning note:', error);\n    }\n  };\n\n  const handleDeleteNote = async (noteId: number) => {\n    try {\n      // Delete from database\n      await deleteLeadActivity(leadId, 'notes', noteId);\n\n      // Update state\n      setNotes(prev => prev.filter(note => note.id !== noteId));\n    } catch (error) {\n      console.error('Error deleting note:', error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Add note form */}\n      <div className=\"space-y-3\">\n        <Input\n          type=\"text\"\n          placeholder=\"Note title (optional)\"\n          value={noteTitle}\n          onChange={(e) => setNoteTitle(e.target.value)}\n        />\n        <Textarea \n          ref={textareaRef}\n          placeholder=\"Add a note...\" \n          className=\"min-h-[100px]\"\n          value={noteText}\n          onChange={(e) => setNoteText(e.target.value)}\n          onKeyDown={(e) => {\n            // Save on Ctrl+Enter\n            if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n              e.preventDefault();\n              handleSaveNote();\n            }\n          }}\n        />\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-xs text-muted-foreground\">\n            Press Ctrl+Enter to save\n          </div>\n          <Button \n            onClick={handleSaveNote} \n            disabled={isSaving || !noteText.trim()}\n          >\n            {isSaving ? 'Saving...' : 'Save Note'}\n          </Button>\n        </div>\n      </div>\n      \n      {/* Notes list */}\n      {sortedNotes.length > 0 ? (\n        <div className=\"space-y-4 mt-6\">\n          {sortedNotes.map(note => (\n            <LeadNote\n              key={note.id}\n              id={note.id}\n              title={note.title}\n              description={note.description}\n              date={note.date}\n              isPinned={note.isPinned}\n              onPin={handlePinNote}\n              onDelete={handleDeleteNote}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center p-4 text-muted-foreground mt-6\">\n          No notes found. Add your first note above.\n        </div>\n      )}\n    </div>\n  );\n} "
        }
    ]
}