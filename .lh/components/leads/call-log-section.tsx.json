{
    "sourceFile": "components/leads/call-log-section.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743709258525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743709258525,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogFooter,\n  DialogTrigger\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from '@/components/ui/label';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Phone, \n  Plus, \n  Clock, \n  Calendar,\n  MoreVertical,\n  PhoneCall,\n  PhoneOutgoing,\n  PhoneIncoming,\n  PhoneMissed,\n  Trash,\n  Copy,\n  VolumeX,\n  Pencil\n} from 'lucide-react';\nimport { format, formatDistance } from 'date-fns';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger\n} from \"@/components/ui/tooltip\";\nimport { addActivityToLead, updateLeadActivity, deleteLeadActivity } from '@/lib/services/leads-service';\nimport { Activity } from '@/data/leads';\nimport { toast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\n\n// Call direction options\nconst CALL_DIRECTIONS = [\n  { id: 'incoming', label: 'Incoming', icon: PhoneIncoming },\n  { id: 'outgoing', label: 'Outgoing', icon: PhoneOutgoing },\n  { id: 'missed', label: 'Missed', icon: PhoneMissed },\n  { id: 'voicemail', label: 'Voicemail', icon: VolumeX }\n];\n\n// Call outcome/status options\nconst CALL_OUTCOMES = [\n  { id: 'completed', label: 'Completed', color: 'bg-green-100 text-green-800' },\n  { id: 'scheduled_callback', label: 'Scheduled Callback', color: 'bg-blue-100 text-blue-800' },\n  { id: 'no_answer', label: 'No Answer', color: 'bg-yellow-100 text-yellow-700' },\n  { id: 'left_voicemail', label: 'Left Voicemail', color: 'bg-purple-100 text-purple-800' },\n  { id: 'call_back_later', label: 'Call Back Later', color: 'bg-orange-100 text-orange-800' },\n  { id: 'wrong_number', label: 'Wrong Number', color: 'bg-red-100 text-red-800' }\n];\n\n// Duration options for quick selection\nconst DURATION_OPTIONS = [\n  '5 min', '10 min', '15 min', '20 min', '30 min', '45 min', '1 hour', '1.5 hours'\n];\n\ninterface CallLogSectionProps {\n  leadId: string;\n  calls: Activity[];\n  phoneNumber?: string; // Optional lead phone number for quick dialing\n  onCallAdded?: () => void;\n}\n\nexport function CallLogSection({ leadId, calls: initialCalls, phoneNumber, onCallAdded }: CallLogSectionProps) {\n  const [calls, setCalls] = useState<Activity[]>(initialCalls || []);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    duration: '15 min',\n    direction: 'outgoing',\n    status: 'completed',\n    scheduleFollowUp: false,\n    followUpDate: '',\n    contactName: '',\n    contactPhone: phoneNumber || ''\n  });\n  const [editingCall, setEditingCall] = useState<Activity | null>(null);\n  \n  // Initialize with phone number from lead if available\n  useEffect(() => {\n    if (phoneNumber && !formData.contactPhone) {\n      setFormData(prev => ({ ...prev, contactPhone: phoneNumber }));\n    }\n  }, [phoneNumber]);\n  \n  // Update calls when initialCalls changes\n  useEffect(() => {\n    setCalls(initialCalls || []);\n  }, [initialCalls]);\n  \n  // Sort calls by date (most recent first)\n  const sortedCalls = [...calls].sort((a, b) => \n    new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n  \n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      duration: '15 min',\n      direction: 'outgoing',\n      status: 'completed',\n      scheduleFollowUp: false,\n      followUpDate: '',\n      contactName: '',\n      contactPhone: phoneNumber || ''\n    });\n    setEditingCall(null);\n  };\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleSelectChange = (name: string, value: string) => {\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleAddCall = async () => {\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Required field missing\",\n        description: \"Please enter a call title\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      if (editingCall) {\n        // Update existing call\n        await updateLeadActivity(leadId, 'calls', editingCall.id, {\n          title: formData.title,\n          description: formData.description,\n          duration: formData.duration,\n          direction: formData.direction,\n          status: formData.status,\n          followUpDate: formData.scheduleFollowUp ? formData.followUpDate : undefined,\n          contactName: formData.contactName,\n          contactPhone: formData.contactPhone\n        });\n        \n        // Update local state\n        setCalls(prev => prev.map(call => \n          call.id === editingCall.id \n            ? { \n                ...call, \n                title: formData.title,\n                description: formData.description,\n                duration: formData.duration,\n                direction: formData.direction,\n                status: formData.status,\n                followUpDate: formData.scheduleFollowUp ? formData.followUpDate : undefined,\n                contactName: formData.contactName,\n                contactPhone: formData.contactPhone\n              } \n            : call\n        ));\n        \n        toast({\n          title: \"Call updated\",\n          description: \"Call record has been updated successfully\",\n        });\n      } else {\n        // Create new call\n        const newCall = {\n          type: 'call' as const, // Ensure type is 'call'\n          title: formData.title,\n          description: formData.description,\n          duration: formData.duration,\n          direction: formData.direction,\n          status: formData.status,\n          followUpDate: formData.scheduleFollowUp ? formData.followUpDate : undefined,\n          contactName: formData.contactName,\n          contactPhone: formData.contactPhone\n        };\n        \n        await addActivityToLead(leadId, 'calls', newCall);\n        \n        // Add to local state with a temporary ID (for optimistic UI)\n        const tempCall: Activity = {\n          ...newCall,\n          id: Date.now(),\n          date: new Date().toISOString()\n        };\n        \n        setCalls(prev => [tempCall, ...prev]);\n        \n        if (onCallAdded) {\n          onCallAdded();\n        }\n        \n        toast({\n          title: \"Call logged\",\n          description: \"Call has been added to history\",\n        });\n      }\n      \n      // Close dialog and reset form\n      setIsAddDialogOpen(false);\n      resetForm();\n    } catch (error) {\n      console.error('Error adding/updating call:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save call record. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleDeleteCall = async (callId: number) => {\n    try {\n      await deleteLeadActivity(leadId, 'calls', callId);\n      \n      // Update local state\n      setCalls(calls.filter(call => call.id !== callId));\n      \n      toast({\n        title: \"Call deleted\",\n        description: \"Call record has been removed\",\n      });\n    } catch (error) {\n      console.error('Error deleting call:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete call record\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const handleEditCall = (call: Activity) => {\n    setEditingCall(call);\n    setFormData({\n      title: call.title,\n      description: call.description || '',\n      duration: call.duration || '15 min',\n      direction: call.direction || 'outgoing',\n      status: call.status || 'completed',\n      scheduleFollowUp: !!call.followUpDate,\n      followUpDate: call.followUpDate || '',\n      contactName: call.contactName || '',\n      contactPhone: call.contactPhone || phoneNumber || ''\n    });\n    setIsAddDialogOpen(true);\n  };\n  \n  // Format date to be more readable\n  const formatCallDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return {\n      formatted: format(date, 'MMM d, yyyy h:mm a'),\n      relative: formatDistance(date, new Date(), { addSuffix: true })\n    };\n  };\n  \n  // Get the appropriate icon for call direction\n  const getDirectionIcon = (direction: string) => {\n    const callType = CALL_DIRECTIONS.find(d => d.id === direction);\n    const Icon = callType?.icon || PhoneCall;\n    return <Icon className=\"w-4 h-4\" />;\n  };\n  \n  // Get status badge style based on outcome\n  const getStatusBadgeStyle = (status: string) => {\n    const outcome = CALL_OUTCOMES.find(o => o.id === status);\n    return outcome?.color || 'bg-gray-100 text-gray-800';\n  };\n  \n  return (\n    <>\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-lg font-semibold\">Call History</h3>\n        \n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Log New Call\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCall ? 'Edit Call Record' : 'Log New Call'}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"grid gap-4 py-4\">\n              {/* Direction selection */}\n              <div className=\"grid grid-cols-4 gap-2\">\n                {CALL_DIRECTIONS.map(direction => (\n                  <Button\n                    key={direction.id}\n                    type=\"button\"\n                    variant={formData.direction === direction.id ? \"default\" : \"outline\"}\n                    className=\"flex flex-col h-auto py-2 px-2\"\n                    onClick={() => handleSelectChange('direction', direction.id)}\n                  >\n                    <direction.icon className=\"h-4 w-4 mb-1\" />\n                    <span className=\"text-xs\">{direction.label}</span>\n                  </Button>\n                ))}\n              </div>\n              \n              {/* Contact Information */}\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contactName\">Contact Name</Label>\n                  <Input\n                    id=\"contactName\"\n                    name=\"contactName\"\n                    placeholder=\"Who did you call?\"\n                    value={formData.contactName}\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"contactPhone\">Phone Number</Label>\n                  <Input\n                    id=\"contactPhone\"\n                    name=\"contactPhone\"\n                    placeholder=\"Phone number\"\n                    value={formData.contactPhone}\n                    onChange={handleInputChange}\n                  />\n                </div>\n              </div>\n              \n              {/* Title/Subject */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Call Subject *</Label>\n                <Input\n                  id=\"title\"\n                  name=\"title\"\n                  placeholder=\"Subject or purpose of the call\"\n                  value={formData.title}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              \n              {/* Call Outcome */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\">Call Outcome</Label>\n                <Select \n                  value={formData.status} \n                  onValueChange={(value) => handleSelectChange('status', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select outcome\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CALL_OUTCOMES.map(outcome => (\n                      <SelectItem key={outcome.id} value={outcome.id}>\n                        {outcome.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              {/* Duration */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"duration\">Call Duration</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"duration\"\n                    name=\"duration\"\n                    placeholder=\"e.g. 15 min\"\n                    value={formData.duration}\n                    onChange={handleInputChange}\n                    className=\"flex-1\"\n                  />\n                  <div className=\"flex items-center gap-1 flex-wrap\">\n                    {DURATION_OPTIONS.slice(0, 3).map(duration => (\n                      <Button\n                        key={duration}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"h-7 px-2 text-xs\"\n                        onClick={() => handleSelectChange('duration', duration)}\n                        type=\"button\"\n                      >\n                        {duration}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Call Notes */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Call Notes</Label>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  placeholder=\"Notes about the call...\"\n                  value={formData.description}\n                  onChange={handleInputChange}\n                  className=\"min-h-[100px]\"\n                />\n              </div>\n              \n              {/* Follow-up scheduling */}\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"scheduleFollowUp\"\n                    checked={formData.scheduleFollowUp}\n                    onChange={(e) => setFormData(prev => ({ ...prev, scheduleFollowUp: e.target.checked }))}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"scheduleFollowUp\" className=\"text-sm font-normal cursor-pointer\">\n                    Schedule a follow-up call\n                  </Label>\n                </div>\n                \n                {formData.scheduleFollowUp && (\n                  <div className=\"pt-2\">\n                    <Label htmlFor=\"followUpDate\">Follow-up Date</Label>\n                    <Input\n                      id=\"followUpDate\"\n                      name=\"followUpDate\"\n                      type=\"datetime-local\"\n                      value={formData.followUpDate}\n                      onChange={handleInputChange}\n                      className=\"mt-1\"\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setIsAddDialogOpen(false);\n                  resetForm();\n                }}\n                disabled={isLoading}\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddCall} \n                disabled={isLoading || !formData.title.trim()}\n              >\n                {isLoading ? 'Saving...' : editingCall ? 'Update Call' : 'Save Call'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {/* Quick action buttons for common call types */}\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center\"\n            onClick={() => {\n              setFormData({\n                ...formData,\n                direction: 'outgoing',\n                status: 'completed',\n                title: 'Sales Follow-up Call'\n              });\n              setIsAddDialogOpen(true);\n            }}\n          >\n            <PhoneOutgoing className=\"w-3 h-3 mr-1\" />\n            Sales Call\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex items-center\"\n            onClick={() => {\n              setFormData({\n                ...formData,\n                direction: 'outgoing',\n                status: 'left_voicemail',\n                title: 'Left Voicemail'\n              });\n              setIsAddDialogOpen(true);\n            }}\n          >\n            <VolumeX className=\"w-3 h-3 mr-1\" />\n            Voicemail\n          </Button>\n          {phoneNumber && (\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex items-center text-primary\"\n                    onClick={() => window.open(`tel:${phoneNumber.replace(/\\D/g, '')}`)}\n                  >\n                    <Phone className=\"w-3 h-3 mr-1\" />\n                    Call Now\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Call {phoneNumber}</p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          )}\n        </div>\n      \n        {sortedCalls.length === 0 ? (\n          <div className=\"text-center p-8 text-muted-foreground border border-dashed rounded-lg\">\n            <Phone className=\"w-12 h-12 mx-auto text-muted-foreground/50 mb-3\" />\n            <p className=\"text-sm mb-2\">No call history found</p>\n            <p className=\"text-xs text-muted-foreground/70\">Log your first call by clicking the \"Log New Call\" button above.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedCalls.map(call => {\n              const date = formatCallDate(call.date);\n              const statusClass = getStatusBadgeStyle(call.status);\n              const direction = call.direction || 'outgoing';\n              \n              return (\n                <Card key={call.id} className=\"p-4 bg-muted/50 hover:bg-muted/70 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"mt-1 text-primary\">\n                        {getDirectionIcon(direction)}\n                      </div>\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h4 className=\"font-medium\">{call.title}</h4>\n                          {call.followUpDate && (\n                            <Badge variant=\"outline\" className=\"ml-2 bg-blue-50 text-blue-700 text-[10px]\">\n                              <Calendar className=\"w-2 h-2 mr-1\" />\n                              Follow-up\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        {call.contactName && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            Contact: {call.contactName} {call.contactPhone && `(${call.contactPhone})`}\n                          </div>\n                        )}\n                        \n                        {call.description && (\n                          <p className=\"text-sm text-muted-foreground mt-1\">{call.description}</p>\n                        )}\n                        \n                        <div className=\"flex items-center flex-wrap gap-x-3 gap-y-1 mt-2 text-xs\">\n                          {call.duration && (\n                            <span className=\"flex items-center text-muted-foreground\">\n                              <Clock className=\"w-3 h-3 mr-1\" />\n                              {call.duration}\n                            </span>\n                          )}\n                          <span className=\"flex items-center text-muted-foreground\" title={date.formatted}>\n                            {date.relative}\n                          </span>\n                          {call.followUpDate && (\n                            <span className=\"flex items-center text-blue-600\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              Follow-up: {format(new Date(call.followUpDate), 'MMM d, h:mm a')}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-2\">\n                      <Badge className={cn(\"px-2 py-0.5 text-xs\", statusClass)}>\n                        {CALL_OUTCOMES.find(o => o.id === call.status)?.label || call.status}\n                      </Badge>\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                          <DropdownMenuItem onClick={() => handleEditCall(call)}>\n                            <Pencil className=\"w-4 h-4 mr-2\" />\n                            Edit Call\n                          </DropdownMenuItem>\n                          {call.contactPhone && (\n                            <DropdownMenuItem onClick={() => window.open(`tel:${call.contactPhone.replace(/\\D/g, '')}`)}>\n                              <PhoneCall className=\"w-4 h-4 mr-2\" />\n                              Call Again\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuItem \n                            onClick={() => {\n                              // Create a new call with some fields prefilled\n                              setFormData({\n                                ...formData,\n                                title: `Follow-up to: ${call.title}`,\n                                contactName: call.contactName || '',\n                                contactPhone: call.contactPhone || '',\n                                description: `Previous call notes: ${call.description || ''}`\n                              });\n                              setIsAddDialogOpen(true);\n                            }}\n                          >\n                            <Copy className=\"w-4 h-4 mr-2\" />\n                            Create Follow-up\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem \n                            className=\"text-red-600\" \n                            onClick={() => handleDeleteCall(call.id)}\n                          >\n                            <Trash className=\"w-4 h-4 mr-2\" />\n                            Delete Call\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n        \n        {/* Show total calls count */}\n        {sortedCalls.length > 0 && (\n          <div className=\"text-xs text-muted-foreground text-center pt-2\">\n            {sortedCalls.length} call{sortedCalls.length !== 1 ? 's' : ''} in history\n          </div>\n        )}\n      </div>\n    </>\n  );\n} "
        }
    ]
}