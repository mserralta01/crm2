{
    "sourceFile": "components/leads/pipeline-progress.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743708202618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743708309453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,15 @@\n import { Lead } from \"@/data/leads\";\n import { updateLead } from \"@/lib/services/leads-service\";\n import { useState } from \"react\";\n import { toast } from \"@/hooks/use-toast\";\n+import {\n+  Tooltip,\n+  TooltipContent,\n+  TooltipProvider,\n+  TooltipTrigger,\n+} from \"@/components/ui/tooltip\";\n+import { Check, ChevronRight } from \"lucide-react\";\n \n // Define the pipeline stages and their corresponding visual styles\n const PIPELINE_STAGES = [\n   { id: \"New\", label: \"New Lead\", color: \"bg-blue-600 hover:bg-blue-700\" },\n@@ -64,46 +71,88 @@\n     }\n   };\n   \n   return (\n-    <div className=\"w-full bg-muted rounded-md overflow-hidden mb-8\">\n-      <div className=\"flex w-full\">\n-        {PIPELINE_STAGES.map((stage, index) => {\n-          const isCurrentStage = stage.id === lead.status;\n-          const isCompleted = index <= currentStageIndex;\n-          const isUpdatingThisStage = isUpdating === stage.id;\n-          \n-          return (\n-            <div \n-              key={stage.id}\n-              className={cn(\n-                \"h-12 flex-1 transition-all duration-200 flex flex-col justify-center items-center text-center border-r last:border-r-0 border-r-white/10 relative cursor-pointer\",\n-                isCompleted ? stage.color : \"bg-gray-200\",\n-                isUpdatingThisStage && \"opacity-70\",\n-                stage.id === isUpdating && \"animate-pulse\"\n-              )}\n-              onClick={() => handleStageClick(stage.id)}\n-            >\n-              <span className={cn(\n-                \"font-medium text-xs\",\n-                isCompleted ? \"text-white\" : \"text-gray-600\"\n-              )}>\n-                {stage.label}\n-              </span>\n-              <span className={cn(\n-                \"text-[10px]\", \n-                isCompleted ? \"text-white/80\" : \"text-gray-500\"\n-              )}>\n-                {daysInStage[stage.id] || 0} days\n-              </span>\n-              \n-              {/* Current stage indicator */}\n-              {isCurrentStage && (\n-                <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-white rounded-full border-2 border-current\"></div>\n-              )}\n-            </div>\n-          );\n-        })}\n+    <TooltipProvider>\n+      <div className=\"w-full bg-muted rounded-md overflow-hidden mb-8 relative\">\n+        <div className=\"flex w-full\">\n+          {PIPELINE_STAGES.map((stage, index) => {\n+            const isCurrentStage = stage.id === lead.status;\n+            const isCompleted = index <= currentStageIndex;\n+            const isUpdatingThisStage = isUpdating === stage.id;\n+            const days = daysInStage[stage.id] || 0;\n+            \n+            // Generate tooltip content\n+            const tooltipContent = isCurrentStage \n+              ? `Current stage: ${days} days`\n+              : isCompleted \n+                ? `Completed stage: ${days} days` \n+                : `Click to move lead to ${stage.label}`;\n+            \n+            return (\n+              <Tooltip key={stage.id}>\n+                <TooltipTrigger asChild>\n+                  <div \n+                    className={cn(\n+                      \"h-14 flex-1 transition-all duration-200 flex flex-col justify-center items-center text-center relative cursor-pointer\",\n+                      isCompleted ? stage.color : \"bg-gray-200\",\n+                      isUpdatingThisStage && \"opacity-70\",\n+                      stage.id === isUpdating && \"animate-pulse\"\n+                    )}\n+                    onClick={() => handleStageClick(stage.id)}\n+                  >\n+                    <span className={cn(\n+                      \"font-medium text-xs\",\n+                      isCompleted ? \"text-white\" : \"text-gray-600\"\n+                    )}>\n+                      {stage.label}\n+                    </span>\n+                    <span className={cn(\n+                      \"text-[10px]\", \n+                      isCompleted ? \"text-white/80\" : \"text-gray-500\"\n+                    )}>\n+                      {days} days\n+                    </span>\n+                    \n+                    {/* Stage completion indicator */}\n+                    {isCompleted && index < currentStageIndex && (\n+                      <div className=\"absolute right-1 top-1\">\n+                        <Check className=\"h-3 w-3 text-white/90\" />\n+                      </div>\n+                    )}\n+                    \n+                    {/* Current stage indicator */}\n+                    {isCurrentStage && (\n+                      <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-white rounded-full border-2 border-current\"></div>\n+                    )}\n+                    \n+                    {/* Stage connector chevron */}\n+                    {index < PIPELINE_STAGES.length - 1 && (\n+                      <div className=\"absolute right-[-8px] top-1/2 transform -translate-y-1/2 z-10\">\n+                        <ChevronRight className={cn(\n+                          \"h-4 w-4\",\n+                          isCompleted ? \"text-white\" : \"text-gray-400\"\n+                        )} />\n+                      </div>\n+                    )}\n+                  </div>\n+                </TooltipTrigger>\n+                <TooltipContent>\n+                  <p>{tooltipContent}</p>\n+                </TooltipContent>\n+              </Tooltip>\n+            );\n+          })}\n+        </div>\n+        \n+        {/* Progress line */}\n+        <div \n+          className=\"absolute h-1 bg-blue-500 bottom-0 left-0 transition-all duration-500\"\n+          style={{ \n+            width: `${Math.min(100, (currentStageIndex / (PIPELINE_STAGES.length - 1)) * 100)}%`,\n+            background: 'linear-gradient(to right, #3b82f6, #10b981)'\n+          }}\n+        />\n       </div>\n-    </div>\n+    </TooltipProvider>\n   );\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1743708202618,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Lead } from \"@/data/leads\";\nimport { updateLead } from \"@/lib/services/leads-service\";\nimport { useState } from \"react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n// Define the pipeline stages and their corresponding visual styles\nconst PIPELINE_STAGES = [\n  { id: \"New\", label: \"New Lead\", color: \"bg-blue-600 hover:bg-blue-700\" },\n  { id: \"Contacted\", label: \"Contact Made\", color: \"bg-yellow-600 hover:bg-yellow-700\" },\n  { id: \"Qualified\", label: \"Qualified\", color: \"bg-green-600 hover:bg-green-700\" },\n  { id: \"Negotiating\", label: \"Negotiating\", color: \"bg-purple-600 hover:bg-purple-700\" },\n  { id: \"Closed\", label: \"Closed Won\", color: \"bg-emerald-600 hover:bg-emerald-700\" },\n  { id: \"Lost\", label: \"Closed Lost\", color: \"bg-red-600 hover:bg-red-700\" }\n];\n\ninterface PipelineProgressProps {\n  lead: Lead;\n  onStatusUpdate?: (newStatus: string) => void;\n}\n\nexport function PipelineProgress({ lead, onStatusUpdate }: PipelineProgressProps) {\n  const [isUpdating, setIsUpdating] = useState<string | null>(null);\n  \n  // Find the current stage index\n  const currentStageIndex = PIPELINE_STAGES.findIndex(stage => stage.id === lead.status);\n  \n  // Calculate days in current stage (mocking for now, would come from lead data)\n  const daysInStage = lead.daysInStage || {}; // This would be added to the Lead interface\n  \n  const handleStageClick = async (stageId: string) => {\n    if (stageId === lead.status || isUpdating) return;\n    \n    setIsUpdating(stageId);\n    try {\n      // Update the lead's status in the database\n      await updateLead(lead.id, {\n        status: stageId,\n        // Update the timestamp for when this stage was entered\n        statusUpdatedAt: new Date().toISOString()\n      });\n      \n      // Notify parent component\n      if (onStatusUpdate) {\n        onStatusUpdate(stageId);\n      }\n      \n      toast({\n        title: \"Status Updated\",\n        description: `Lead moved to ${stageId} stage`,\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error(\"Error updating stage:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update stage. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUpdating(null);\n    }\n  };\n  \n  return (\n    <div className=\"w-full bg-muted rounded-md overflow-hidden mb-8\">\n      <div className=\"flex w-full\">\n        {PIPELINE_STAGES.map((stage, index) => {\n          const isCurrentStage = stage.id === lead.status;\n          const isCompleted = index <= currentStageIndex;\n          const isUpdatingThisStage = isUpdating === stage.id;\n          \n          return (\n            <div \n              key={stage.id}\n              className={cn(\n                \"h-12 flex-1 transition-all duration-200 flex flex-col justify-center items-center text-center border-r last:border-r-0 border-r-white/10 relative cursor-pointer\",\n                isCompleted ? stage.color : \"bg-gray-200\",\n                isUpdatingThisStage && \"opacity-70\",\n                stage.id === isUpdating && \"animate-pulse\"\n              )}\n              onClick={() => handleStageClick(stage.id)}\n            >\n              <span className={cn(\n                \"font-medium text-xs\",\n                isCompleted ? \"text-white\" : \"text-gray-600\"\n              )}>\n                {stage.label}\n              </span>\n              <span className={cn(\n                \"text-[10px]\", \n                isCompleted ? \"text-white/80\" : \"text-gray-500\"\n              )}>\n                {daysInStage[stage.id] || 0} days\n              </span>\n              \n              {/* Current stage indicator */}\n              {isCurrentStage && (\n                <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-white rounded-full border-2 border-current\"></div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n} "
        }
    ]
}