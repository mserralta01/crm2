{
    "sourceFile": "components/leads/phone-input.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743706766571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743706766571,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger\n} from '@/components/ui/popover';\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from '@/components/ui/command';\nimport { ChevronDown, Check } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// List of countries excluding OFAC sanctioned countries\nconst countries = [\n  // Put United States and Canada at the top\n  { name: 'United States', code: '1', flag: 'ðŸ‡ºðŸ‡¸' },\n  { name: 'Canada', code: '1', flag: 'ðŸ‡¨ðŸ‡¦' },\n  // Other countries alphabetically\n  { name: 'Australia', code: '61', flag: 'ðŸ‡¦ðŸ‡º' },\n  { name: 'Austria', code: '43', flag: 'ðŸ‡¦ðŸ‡¹' },\n  { name: 'Belgium', code: '32', flag: 'ðŸ‡§ðŸ‡ª' },\n  { name: 'Brazil', code: '55', flag: 'ðŸ‡§ðŸ‡·' },\n  { name: 'China', code: '86', flag: 'ðŸ‡¨ðŸ‡³' },\n  { name: 'Denmark', code: '45', flag: 'ðŸ‡©ðŸ‡°' },\n  { name: 'Finland', code: '358', flag: 'ðŸ‡«ðŸ‡®' },\n  { name: 'France', code: '33', flag: 'ðŸ‡«ðŸ‡·' },\n  { name: 'Germany', code: '49', flag: 'ðŸ‡©ðŸ‡ª' },\n  { name: 'Greece', code: '30', flag: 'ðŸ‡¬ðŸ‡·' },\n  { name: 'India', code: '91', flag: 'ðŸ‡®ðŸ‡³' },\n  { name: 'Indonesia', code: '62', flag: 'ðŸ‡®ðŸ‡©' },\n  { name: 'Ireland', code: '353', flag: 'ðŸ‡®ðŸ‡ª' },\n  { name: 'Israel', code: '972', flag: 'ðŸ‡®ðŸ‡±' },\n  { name: 'Italy', code: '39', flag: 'ðŸ‡®ðŸ‡¹' },\n  { name: 'Japan', code: '81', flag: 'ðŸ‡¯ðŸ‡µ' },\n  { name: 'Mexico', code: '52', flag: 'ðŸ‡²ðŸ‡½' },\n  { name: 'Netherlands', code: '31', flag: 'ðŸ‡³ðŸ‡±' },\n  { name: 'New Zealand', code: '64', flag: 'ðŸ‡³ðŸ‡¿' },\n  { name: 'Norway', code: '47', flag: 'ðŸ‡³ðŸ‡´' },\n  { name: 'Poland', code: '48', flag: 'ðŸ‡µðŸ‡±' },\n  { name: 'Portugal', code: '351', flag: 'ðŸ‡µðŸ‡¹' },\n  { name: 'Saudi Arabia', code: '966', flag: 'ðŸ‡¸ðŸ‡¦' },\n  { name: 'Singapore', code: '65', flag: 'ðŸ‡¸ðŸ‡¬' },\n  { name: 'South Africa', code: '27', flag: 'ðŸ‡¿ðŸ‡¦' },\n  { name: 'South Korea', code: '82', flag: 'ðŸ‡°ðŸ‡·' },\n  { name: 'Spain', code: '34', flag: 'ðŸ‡ªðŸ‡¸' },\n  { name: 'Sweden', code: '46', flag: 'ðŸ‡¸ðŸ‡ª' },\n  { name: 'Switzerland', code: '41', flag: 'ðŸ‡¨ðŸ‡­' },\n  { name: 'Thailand', code: '66', flag: 'ðŸ‡¹ðŸ‡­' },\n  { name: 'Turkey', code: '90', flag: 'ðŸ‡¹ðŸ‡·' },\n  { name: 'United Arab Emirates', code: '971', flag: 'ðŸ‡¦ðŸ‡ª' },\n  { name: 'United Kingdom', code: '44', flag: 'ðŸ‡¬ðŸ‡§' },\n];\n\n// List of US states\nconst usStates = [\n  { name: 'Alabama', code: 'AL' },\n  { name: 'Alaska', code: 'AK' },\n  { name: 'Arizona', code: 'AZ' },\n  { name: 'Arkansas', code: 'AR' },\n  { name: 'California', code: 'CA' },\n  { name: 'Colorado', code: 'CO' },\n  { name: 'Connecticut', code: 'CT' },\n  { name: 'Delaware', code: 'DE' },\n  { name: 'Florida', code: 'FL' },\n  { name: 'Georgia', code: 'GA' },\n  { name: 'Hawaii', code: 'HI' },\n  { name: 'Idaho', code: 'ID' },\n  { name: 'Illinois', code: 'IL' },\n  { name: 'Indiana', code: 'IN' },\n  { name: 'Iowa', code: 'IA' },\n  { name: 'Kansas', code: 'KS' },\n  { name: 'Kentucky', code: 'KY' },\n  { name: 'Louisiana', code: 'LA' },\n  { name: 'Maine', code: 'ME' },\n  { name: 'Maryland', code: 'MD' },\n  { name: 'Massachusetts', code: 'MA' },\n  { name: 'Michigan', code: 'MI' },\n  { name: 'Minnesota', code: 'MN' },\n  { name: 'Mississippi', code: 'MS' },\n  { name: 'Missouri', code: 'MO' },\n  { name: 'Montana', code: 'MT' },\n  { name: 'Nebraska', code: 'NE' },\n  { name: 'Nevada', code: 'NV' },\n  { name: 'New Hampshire', code: 'NH' },\n  { name: 'New Jersey', code: 'NJ' },\n  { name: 'New Mexico', code: 'NM' },\n  { name: 'New York', code: 'NY' },\n  { name: 'North Carolina', code: 'NC' },\n  { name: 'North Dakota', code: 'ND' },\n  { name: 'Ohio', code: 'OH' },\n  { name: 'Oklahoma', code: 'OK' },\n  { name: 'Oregon', code: 'OR' },\n  { name: 'Pennsylvania', code: 'PA' },\n  { name: 'Rhode Island', code: 'RI' },\n  { name: 'South Carolina', code: 'SC' },\n  { name: 'South Dakota', code: 'SD' },\n  { name: 'Tennessee', code: 'TN' },\n  { name: 'Texas', code: 'TX' },\n  { name: 'Utah', code: 'UT' },\n  { name: 'Vermont', code: 'VT' },\n  { name: 'Virginia', code: 'VA' },\n  { name: 'Washington', code: 'WA' },\n  { name: 'West Virginia', code: 'WV' },\n  { name: 'Wisconsin', code: 'WI' },\n  { name: 'Wyoming', code: 'WY' },\n];\n\ninterface PhoneInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  label?: string;\n  placeholder?: string;\n  countrySelectorLabel?: string;\n}\n\nexport function PhoneInput({\n  value,\n  onChange,\n  label = \"Phone\",\n  placeholder = \"Enter phone number\",\n  countrySelectorLabel = \"Country\"\n}: PhoneInputProps) {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(countries[0]); // Default to US\n  const [open, setOpen] = useState(false);\n\n  // Parse the initial value if it exists\n  useEffect(() => {\n    if (value) {\n      // If this is a US/Canada number (starts with +1)\n      if (value.startsWith('+1')) {\n        setSelectedCountry(countries[0]); // United States\n        // Extract the number part without the country code\n        const numberPart = value.substring(2).trim().replace(/\\D/g, '');\n        setPhoneNumber(formatUSPhoneNumber(numberPart));\n      } else {\n        // Try to determine country code from value\n        const valueDigits = value.replace(/\\D/g, '');\n        for (const country of countries) {\n          if (valueDigits.startsWith(country.code)) {\n            setSelectedCountry(country);\n            setPhoneNumber(valueDigits.substring(country.code.length));\n            break;\n          }\n        }\n      }\n    }\n  }, []);\n\n  // Format the phone number for US/Canada format\n  const formatUSPhoneNumber = (input: string) => {\n    const digitsOnly = input.replace(/\\D/g, '');\n    \n    if (digitsOnly.length <= 3) {\n      return digitsOnly;\n    } else if (digitsOnly.length <= 6) {\n      return `(${digitsOnly.slice(0, 3)}) ${digitsOnly.slice(3)}`;\n    } else {\n      return `(${digitsOnly.slice(0, 3)}) ${digitsOnly.slice(3, 6)}-${digitsOnly.slice(6, 10)}`;\n    }\n  };\n\n  // Handle phone number input change\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const input = e.target.value.replace(/\\D/g, '');\n    \n    // Format for US/Canada\n    if (selectedCountry.code === '1') {\n      setPhoneNumber(formatUSPhoneNumber(input));\n    } else {\n      setPhoneNumber(input);\n    }\n  };\n\n  // Save the complete phone number with country code\n  const savePhoneNumber = () => {\n    let formattedPhone = phoneNumber.replace(/\\D/g, '');\n    // For E.164 format (+[country code][number])\n    if (formattedPhone) {\n      formattedPhone = `+${selectedCountry.code}${formattedPhone}`;\n      onChange(formattedPhone);\n    } else {\n      onChange('');\n    }\n  };\n\n  // Handle country selection\n  const handleCountrySelect = (country: typeof countries[0]) => {\n    setSelectedCountry(country);\n    setOpen(false);\n    \n    // Reformat the phone number if switching to/from US/Canada\n    if (country.code === '1') {\n      setPhoneNumber(formatUSPhoneNumber(phoneNumber.replace(/\\D/g, '')));\n    }\n    \n    // Update the saved value with the new country code\n    setTimeout(savePhoneNumber, 0);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      {label && <Label>{label}</Label>}\n      <div className=\"flex w-full space-x-1\">\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={open}\n              className=\"h-9 px-2 flex-shrink-0 w-fit\"\n              aria-label={countrySelectorLabel}\n            >\n              <span className=\"mr-1 text-base\">{selectedCountry.flag}</span>\n              <span className=\"text-xs\">+{selectedCountry.code}</span>\n              <ChevronDown className=\"ml-1 h-3 w-3 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"p-0 w-[220px]\" align=\"start\">\n            <Command>\n              <CommandInput placeholder=\"Search country...\" className=\"h-9\" />\n              <CommandList>\n                <CommandEmpty>No country found.</CommandEmpty>\n                <CommandGroup>\n                  {countries.map((country) => (\n                    <CommandItem\n                      key={country.name}\n                      value={country.name}\n                      onSelect={() => handleCountrySelect(country)}\n                      className=\"text-sm\"\n                    >\n                      <span className=\"mr-2 text-base\">{country.flag}</span>\n                      <span>{country.name}</span>\n                      <span className=\"ml-auto text-xs text-muted-foreground\">\n                        +{country.code}\n                      </span>\n                      <Check\n                        className={cn(\n                          \"ml-2 h-4 w-4\",\n                          selectedCountry.name === country.name\n                            ? \"opacity-100\"\n                            : \"opacity-0\"\n                        )}\n                      />\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n        <Input\n          value={phoneNumber}\n          onChange={handlePhoneChange}\n          onBlur={savePhoneNumber}\n          placeholder={placeholder}\n          className=\"flex-1\"\n          type=\"tel\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function CountryStateInput({\n  countryValue,\n  stateValue,\n  onCountryChange,\n  onStateChange,\n  countryLabel = \"Country\",\n  stateLabel = \"State\"\n}: {\n  countryValue: string;\n  stateValue: string;\n  onCountryChange: (value: string) => void;\n  onStateChange: (value: string) => void;\n  countryLabel?: string;\n  stateLabel?: string;\n}) {\n  const [countryOpen, setCountryOpen] = useState(false);\n  const [stateOpen, setStateOpen] = useState(false);\n  const [isUSA, setIsUSA] = useState(countryValue === 'United States' || countryValue === 'USA' || !countryValue);\n\n  // Set the default country to USA if not already set\n  useEffect(() => {\n    if (!countryValue) {\n      onCountryChange('United States');\n      setIsUSA(true);\n    }\n  }, [countryValue, onCountryChange]);\n\n  const handleCountrySelect = (countryName: string) => {\n    onCountryChange(countryName);\n    setCountryOpen(false);\n    \n    // Show state dropdown only for USA\n    const isUS = countryName === 'United States';\n    setIsUSA(isUS);\n    \n    // Clear state if not US\n    if (!isUS) {\n      onStateChange('');\n    }\n  };\n\n  const handleStateSelect = (stateName: string) => {\n    onStateChange(stateName);\n    setStateOpen(false);\n  };\n\n  // Get just the country names\n  const countryNames = countries.map(country => country.name);\n  \n  return (\n    <div className=\"grid grid-cols-2 gap-2\">\n      <div className=\"space-y-2\">\n        <Label>{countryLabel}</Label>\n        <Popover open={countryOpen} onOpenChange={setCountryOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={countryOpen}\n              className=\"w-full justify-between\"\n            >\n              {countryValue || \"Select country\"}\n              <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"p-0 w-[200px]\">\n            <Command>\n              <CommandInput placeholder=\"Search country...\" className=\"h-9\" />\n              <CommandList>\n                <CommandEmpty>No country found.</CommandEmpty>\n                <CommandGroup>\n                  {countryNames.map((country) => (\n                    <CommandItem\n                      key={country}\n                      value={country}\n                      onSelect={() => handleCountrySelect(country)}\n                    >\n                      <Check\n                        className={cn(\n                          \"mr-2 h-4 w-4\",\n                          countryValue === country ? \"opacity-100\" : \"opacity-0\"\n                        )}\n                      />\n                      {country}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </div>\n      \n      {isUSA && (\n        <div className=\"space-y-2\">\n          <Label>{stateLabel}</Label>\n          <Popover open={stateOpen} onOpenChange={setStateOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                role=\"combobox\"\n                aria-expanded={stateOpen}\n                className=\"w-full justify-between\"\n              >\n                {stateValue || \"Select state\"}\n                <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"p-0 w-[200px]\">\n              <Command>\n                <CommandInput placeholder=\"Search state...\" className=\"h-9\" />\n                <CommandList>\n                  <CommandEmpty>No state found.</CommandEmpty>\n                  <CommandGroup>\n                    {usStates.map((state) => (\n                      <CommandItem\n                        key={state.code}\n                        value={state.name}\n                        onSelect={() => handleStateSelect(state.name)}\n                      >\n                        <Check\n                          className={cn(\n                            \"mr-2 h-4 w-4\",\n                            stateValue === state.name ? \"opacity-100\" : \"opacity-0\"\n                          )}\n                        />\n                        {state.name}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        </div>\n      )}\n    </div>\n  );\n} "
        }
    ]
}