{
    "sourceFile": "components/leads/leads-kanban-impl.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1742495530909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742495934249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,21 +173,31 @@\n     // Persist changes to the database\n     try {\n       // Update the lead status if it changed\n       if (destination.droppableId !== source.droppableId) {\n+        console.log(`Updating lead ${lead.id} status to ${destination.droppableId}`);\n         await updateLead(lead.id.toString(), { \n           status: destination.droppableId \n         });\n       }\n       \n+      // Log the position updates\n+      console.log('Saving position updates:', \n+        updatedDestinationLeads.map(lead => \n+          `${lead.id}: ${lead.position} in ${lead.status}`\n+        ).join(', ')\n+      );\n+      \n       // Update positions for all affected leads\n       await updateLeadPositions(\n         updatedDestinationLeads.map(lead => ({\n           id: lead.id.toString(),\n           position: lead.position\n         }))\n       );\n       \n+      console.log('Position updates saved successfully');\n+      \n       // Clear pending update for this lead\n       const newPendingUpdates = { ...pendingUpdates };\n       delete newPendingUpdates[lead.id.toString()];\n       setPendingUpdates(newPendingUpdates);\n"
                },
                {
                    "date": 1742495943045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n   Droppable, \n   Draggable, \n   DropResult \n } from '@hello-pangea/dnd';\n+import { toast } from '@/components/ui/use-toast';\n \n // Professional color scheme\n const initialColumns = [\n   { id: 'New', title: 'New Leads', color: 'from-slate-600 to-slate-500' },\n@@ -48,8 +49,9 @@\n   const [isLoading, setIsLoading] = useState(true);\n   const [isAddLeadOpen, setIsAddLeadOpen] = useState(false);\n   const [pendingUpdates, setPendingUpdates] = useState<Record<string, Partial<Lead>>>({});\n   const [problematicLeads, setProblematicLeads] = useState<string[]>([]);\n+  const [isSaving, setIsSaving] = useState(false);\n \n   // Fetch leads on component mount\n   useEffect(() => {\n     const fetchLeads = async () => {\n@@ -169,8 +171,11 @@\n     \n     // Update UI optimistically\n     setItems(newItems);\n     \n+    // Show saving indicator\n+    setIsSaving(true);\n+\n     // Persist changes to the database\n     try {\n       // Update the lead status if it changed\n       if (destination.droppableId !== source.droppableId) {\n@@ -200,11 +205,25 @@\n       // Clear pending update for this lead\n       const newPendingUpdates = { ...pendingUpdates };\n       delete newPendingUpdates[lead.id.toString()];\n       setPendingUpdates(newPendingUpdates);\n+      \n+      // Hide saving indicator\n+      setIsSaving(false);\n     } catch (error) {\n       console.error(\"Error updating lead:\", error);\n-      // We could implement a rollback mechanism here if needed\n+      \n+      // Show error notification\n+      toast({\n+        title: \"Error saving changes\",\n+        description: \"Your changes couldn't be saved. The board will refresh.\",\n+        variant: \"destructive\"\n+      });\n+      \n+      // Reload data from server after a short delay\n+      setTimeout(() => {\n+        fetchLeads();\n+      }, 2000);\n     }\n   };\n \n   const handleAddLead = () => {\n@@ -382,7 +401,16 @@\n         open={isAddLeadOpen} \n         onClose={() => setIsAddLeadOpen(false)}\n         onLeadAdded={handleLeadAdded}\n       />\n+\n+      {isSaving && (\n+        <div className=\"fixed bottom-4 right-4 bg-slate-800 text-white px-4 py-2 rounded-md shadow-lg\">\n+          <div className=\"flex items-center\">\n+            <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n+            Saving changes...\n+          </div>\n+        </div>\n+      )}\n     </div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1742496303180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,27 +51,28 @@\n   const [pendingUpdates, setPendingUpdates] = useState<Record<string, Partial<Lead>>>({});\n   const [problematicLeads, setProblematicLeads] = useState<string[]>([]);\n   const [isSaving, setIsSaving] = useState(false);\n \n+  // Define fetchLeads function to fix reference error\n+  const fetchLeads = async () => {\n+    setIsLoading(true);\n+    try {\n+      const fetchedLeads = await getLeads();\n+      const problemLeads = await identifyProblematicLeads();\n+      setProblematicLeads(problemLeads);\n+      \n+      // Sort leads by position within columns\n+      const sortedLeads = sortLeadsByPositionInColumns(fetchedLeads);\n+      setItems(sortedLeads);\n+    } catch (error) {\n+      console.error(\"Error fetching leads:\", error);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n   // Fetch leads on component mount\n   useEffect(() => {\n-    const fetchLeads = async () => {\n-      setIsLoading(true);\n-      try {\n-        const fetchedLeads = await getLeads();\n-        const problemLeads = await identifyProblematicLeads();\n-        setProblematicLeads(problemLeads);\n-        \n-        // Sort leads by position within columns\n-        const sortedLeads = sortLeadsByPositionInColumns(fetchedLeads);\n-        setItems(sortedLeads);\n-      } catch (error) {\n-        console.error(\"Error fetching leads:\", error);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-\n     fetchLeads();\n   }, []);\n \n   // Sort leads by position within their columns\n"
                },
                {
                    "date": 1742496845310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n       return;\n     }\n \n     // Find the lead that was dragged\n-    const lead = items.find(item => item.id.toString() === draggableId);\n+    const lead = items.find(item => item.id === draggableId);\n     if (!lead) return;\n \n     // Create a new list with updated positions\n     let newItems = [...items];\n@@ -124,17 +124,17 @@\n     if (destination.droppableId !== source.droppableId) {\n       // Create a pending update\n       setPendingUpdates({\n         ...pendingUpdates,\n-        [lead.id.toString()]: {\n-          ...pendingUpdates[lead.id.toString()],\n+        [lead.id]: {\n+          ...pendingUpdates[lead.id],\n           status: destination.droppableId,\n         }\n       });\n       \n       // Optimistically update the UI\n       newItems = newItems.map(item => \n-        item.id.toString() === draggableId \n+        item.id === draggableId \n           ? { ...item, status: destination.droppableId } \n           : item\n       );\n     }\n@@ -145,9 +145,9 @@\n     );\n     \n     // Remove the dragged lead if it's already in the destination column\n     const destinationWithoutDragged = destination.droppableId === source.droppableId\n-      ? leadsInDestination.filter(item => item.id.toString() !== draggableId)\n+      ? leadsInDestination.filter(item => item.id !== draggableId)\n       : leadsInDestination;\n     \n     // Insert the dragged lead at the new position\n     destinationWithoutDragged.splice(destination.index, 0, {\n@@ -172,17 +172,14 @@\n     \n     // Update UI optimistically\n     setItems(newItems);\n     \n-    // Show saving indicator\n-    setIsSaving(true);\n-\n     // Persist changes to the database\n     try {\n       // Update the lead status if it changed\n       if (destination.droppableId !== source.droppableId) {\n         console.log(`Updating lead ${lead.id} status to ${destination.droppableId}`);\n-        await updateLead(lead.id.toString(), { \n+        await updateLead(lead.id, { \n           status: destination.droppableId \n         });\n       }\n       \n@@ -195,36 +192,22 @@\n       \n       // Update positions for all affected leads\n       await updateLeadPositions(\n         updatedDestinationLeads.map(lead => ({\n-          id: lead.id.toString(),\n+          id: lead.id,\n           position: lead.position\n         }))\n       );\n       \n       console.log('Position updates saved successfully');\n       \n       // Clear pending update for this lead\n       const newPendingUpdates = { ...pendingUpdates };\n-      delete newPendingUpdates[lead.id.toString()];\n+      delete newPendingUpdates[lead.id];\n       setPendingUpdates(newPendingUpdates);\n-      \n-      // Hide saving indicator\n-      setIsSaving(false);\n     } catch (error) {\n       console.error(\"Error updating lead:\", error);\n-      \n-      // Show error notification\n-      toast({\n-        title: \"Error saving changes\",\n-        description: \"Your changes couldn't be saved. The board will refresh.\",\n-        variant: \"destructive\"\n-      });\n-      \n-      // Reload data from server after a short delay\n-      setTimeout(() => {\n-        fetchLeads();\n-      }, 2000);\n+      // We could implement a rollback mechanism here if needed\n     }\n   };\n \n   const handleAddLead = () => {\n"
                },
                {
                    "date": 1742496868248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -347,12 +347,12 @@\n                     {items\n                       .filter(item => item.status === column.id)\n                       .map((item, index) => (\n                         <Draggable \n-                          key={item.id.toString()} \n-                          draggableId={item.id.toString()} \n+                          key={item.id} \n+                          draggableId={item.id} \n                           index={index}\n-                          isDragDisabled={problematicLeads.includes(item.id.toString())}\n+                          isDragDisabled={problematicLeads.includes(item.id)}\n                         >\n                           {(provided, snapshot) => (\n                             <div\n                               ref={provided.innerRef}\n@@ -361,9 +361,9 @@\n                               className=\"mb-3\"\n                               style={provided.draggableProps.style}\n                             >\n                               <KanbanCard \n-                                id={item.id.toString()} \n+                                id={item.id} \n                                 lead={item} \n                                 columnColor={column.color} \n                                 isDragging={snapshot.isDragging}\n                               />\n"
                },
                {
                    "date": 1742496882391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   const [pendingUpdates, setPendingUpdates] = useState<Record<string, Partial<Lead>>>({});\n   const [problematicLeads, setProblematicLeads] = useState<string[]>([]);\n   const [isSaving, setIsSaving] = useState(false);\n \n-  // Define fetchLeads function to fix reference error\n+  // Function to fetch leads data\n   const fetchLeads = async () => {\n     setIsLoading(true);\n     try {\n       const fetchedLeads = await getLeads();\n@@ -62,8 +62,9 @@\n       \n       // Sort leads by position within columns\n       const sortedLeads = sortLeadsByPositionInColumns(fetchedLeads);\n       setItems(sortedLeads);\n+      console.log('Leads loaded successfully:', sortedLeads.length);\n     } catch (error) {\n       console.error(\"Error fetching leads:\", error);\n     } finally {\n       setIsLoading(false);\n"
                },
                {
                    "date": 1742496897627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n   Droppable, \n   Draggable, \n   DropResult \n } from '@hello-pangea/dnd';\n-import { toast } from '@/components/ui/use-toast';\n \n // Professional color scheme\n const initialColumns = [\n   { id: 'New', title: 'New Leads', color: 'from-slate-600 to-slate-500' },\n"
                },
                {
                    "date": 1742496913012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,15 @@\n       delete newPendingUpdates[lead.id];\n       setPendingUpdates(newPendingUpdates);\n     } catch (error) {\n       console.error(\"Error updating lead:\", error);\n-      // We could implement a rollback mechanism here if needed\n+      \n+      // Add more robust error handling\n+      // Reload data from server to ensure UI is consistent with database\n+      console.log(\"Refreshing data after error...\");\n+      setTimeout(() => {\n+        fetchLeads();\n+      }, 1000);\n     }\n   };\n \n   const handleAddLead = () => {\n"
                },
                {
                    "date": 1742498037285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,10 +363,13 @@\n                             <div\n                               ref={provided.innerRef}\n                               {...provided.draggableProps}\n                               {...provided.dragHandleProps}\n-                              className=\"mb-3\"\n-                              style={provided.draggableProps.style}\n+                              className=\"mb-3 touch-manipulation\"\n+                              style={{\n+                                ...provided.draggableProps.style,\n+                                cursor: snapshot.isDragging ? 'grabbing' : 'grab'\n+                              }}\n                             >\n                               <KanbanCard \n                                 id={item.id} \n                                 lead={item} \n"
                },
                {
                    "date": 1742498044629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,10 +365,9 @@\n                               {...provided.draggableProps}\n                               {...provided.dragHandleProps}\n                               className=\"mb-3 touch-manipulation\"\n                               style={{\n-                                ...provided.draggableProps.style,\n-                                cursor: snapshot.isDragging ? 'grabbing' : 'grab'\n+                                ...(provided.draggableProps.style as React.CSSProperties)\n                               }}\n                             >\n                               <KanbanCard \n                                 id={item.id} \n"
                },
                {
                    "date": 1742498052117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,11 +364,9 @@\n                               ref={provided.innerRef}\n                               {...provided.draggableProps}\n                               {...provided.dragHandleProps}\n                               className=\"mb-3 touch-manipulation\"\n-                              style={{\n-                                ...(provided.draggableProps.style as React.CSSProperties)\n-                              }}\n+                              style={provided.draggableProps.style}\n                             >\n                               <KanbanCard \n                                 id={item.id} \n                                 lead={item} \n"
                },
                {
                    "date": 1742498356249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,9 +364,14 @@\n                               ref={provided.innerRef}\n                               {...provided.draggableProps}\n                               {...provided.dragHandleProps}\n                               className=\"mb-3 touch-manipulation\"\n-                              style={provided.draggableProps.style}\n+                              style={{\n+                                ...provided.draggableProps.style,\n+                                cursor: snapshot.isDragging ? 'grabbing' : 'pointer',\n+                                transition: 'transform 0.2s ease-in-out'\n+                              }}\n+                              data-dragging={snapshot.isDragging ? 'true' : 'false'}\n                             >\n                               <KanbanCard \n                                 id={item.id} \n                                 lead={item} \n"
                },
                {
                    "date": 1742498367334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,27 @@\n import { getLeads, updateLead, updateLeadPositions, identifyProblematicLeads } from '@/lib/services/leads-service';\n import { formatCurrency } from '@/lib/utils';\n import { AddLeadDialog } from './add-lead-dialog';\n import { KanbanCard } from './kanban-card';\n-import { \n-  DragDropContext, \n-  Droppable, \n-  Draggable, \n-  DropResult \n-} from '@hello-pangea/dnd';\n+import dynamic from 'next/dynamic';\n+import type { DropResult } from '@hello-pangea/dnd';\n \n+// Dynamically import DND components to avoid SSR issues\n+const DragDropContext = dynamic(\n+  () => import('@hello-pangea/dnd').then(mod => mod.DragDropContext),\n+  { ssr: false }\n+);\n+\n+const Droppable = dynamic(\n+  () => import('@hello-pangea/dnd').then(mod => mod.Droppable),\n+  { ssr: false }\n+);\n+\n+const Draggable = dynamic(\n+  () => import('@hello-pangea/dnd').then(mod => mod.Draggable),\n+  { ssr: false }\n+);\n+\n // Professional color scheme\n const initialColumns = [\n   { id: 'New', title: 'New Leads', color: 'from-slate-600 to-slate-500' },\n   { id: 'Contacted', title: 'Contacted', color: 'from-blue-700 to-blue-600' },\n"
                },
                {
                    "date": 1742498379390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,27 +17,15 @@\n import { getLeads, updateLead, updateLeadPositions, identifyProblematicLeads } from '@/lib/services/leads-service';\n import { formatCurrency } from '@/lib/utils';\n import { AddLeadDialog } from './add-lead-dialog';\n import { KanbanCard } from './kanban-card';\n-import dynamic from 'next/dynamic';\n-import type { DropResult } from '@hello-pangea/dnd';\n+import { \n+  DragDropContext, \n+  Droppable, \n+  Draggable, \n+  DropResult \n+} from '@hello-pangea/dnd';\n \n-// Dynamically import DND components to avoid SSR issues\n-const DragDropContext = dynamic(\n-  () => import('@hello-pangea/dnd').then(mod => mod.DragDropContext),\n-  { ssr: false }\n-);\n-\n-const Droppable = dynamic(\n-  () => import('@hello-pangea/dnd').then(mod => mod.Droppable),\n-  { ssr: false }\n-);\n-\n-const Draggable = dynamic(\n-  () => import('@hello-pangea/dnd').then(mod => mod.Draggable),\n-  { ssr: false }\n-);\n-\n // Professional color scheme\n const initialColumns = [\n   { id: 'New', title: 'New Leads', color: 'from-slate-600 to-slate-500' },\n   { id: 'Contacted', title: 'Contacted', color: 'from-blue-700 to-blue-600' },\n"
                },
                {
                    "date": 1742498387665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,15 +363,10 @@\n                             <div\n                               ref={provided.innerRef}\n                               {...provided.draggableProps}\n                               {...provided.dragHandleProps}\n-                              className=\"mb-3 touch-manipulation\"\n-                              style={{\n-                                ...provided.draggableProps.style,\n-                                cursor: snapshot.isDragging ? 'grabbing' : 'pointer',\n-                                transition: 'transform 0.2s ease-in-out'\n-                              }}\n-                              data-dragging={snapshot.isDragging ? 'true' : 'false'}\n+                              className=\"mb-3 touch-manipulation select-none active:cursor-grabbing\"\n+                              style={provided.draggableProps.style}\n                             >\n                               <KanbanCard \n                                 id={item.id} \n                                 lead={item} \n"
                },
                {
                    "date": 1742498414915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,9 +356,9 @@\n                         <Draggable \n                           key={item.id} \n                           draggableId={item.id} \n                           index={index}\n-                          isDragDisabled={problematicLeads.includes(item.id)}\n+                          isDragDisabled={false}\n                         >\n                           {(provided, snapshot) => (\n                             <div\n                               ref={provided.innerRef}\n"
                }
            ],
            "date": 1742495530909,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { Lead } from '@/data/leads';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { \n  Plus, \n  Search, \n  SlidersHorizontal,\n  TrendingUp,\n  Users,\n  DollarSign,\n  BarChart,\n  AlertTriangle\n} from 'lucide-react';\nimport { getLeads, updateLead, updateLeadPositions, identifyProblematicLeads } from '@/lib/services/leads-service';\nimport { formatCurrency } from '@/lib/utils';\nimport { AddLeadDialog } from './add-lead-dialog';\nimport { KanbanCard } from './kanban-card';\nimport { \n  DragDropContext, \n  Droppable, \n  Draggable, \n  DropResult \n} from '@hello-pangea/dnd';\n\n// Professional color scheme\nconst initialColumns = [\n  { id: 'New', title: 'New Leads', color: 'from-slate-600 to-slate-500' },\n  { id: 'Contacted', title: 'Contacted', color: 'from-blue-700 to-blue-600' },\n  { id: 'Qualified', title: 'Qualified', color: 'from-emerald-700 to-emerald-600' },\n  { id: 'Negotiating', title: 'Negotiating', color: 'from-indigo-700 to-indigo-600' },\n];\n\nconst availableColors = [\n  { id: 'slate', gradient: 'from-slate-600 to-slate-500' },\n  { id: 'blue', gradient: 'from-blue-700 to-blue-600' },\n  { id: 'emerald', gradient: 'from-emerald-700 to-emerald-600' },\n  { id: 'indigo', gradient: 'from-indigo-700 to-indigo-600' },\n  { id: 'zinc', gradient: 'from-zinc-600 to-zinc-500' },\n  { id: 'gray', gradient: 'from-gray-600 to-gray-500' },\n];\n\nexport default function LeadsKanbanImpl() {\n  const [columns, setColumns] = useState(initialColumns);\n  const [items, setItems] = useState<Lead[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAddLeadOpen, setIsAddLeadOpen] = useState(false);\n  const [pendingUpdates, setPendingUpdates] = useState<Record<string, Partial<Lead>>>({});\n  const [problematicLeads, setProblematicLeads] = useState<string[]>([]);\n\n  // Fetch leads on component mount\n  useEffect(() => {\n    const fetchLeads = async () => {\n      setIsLoading(true);\n      try {\n        const fetchedLeads = await getLeads();\n        const problemLeads = await identifyProblematicLeads();\n        setProblematicLeads(problemLeads);\n        \n        // Sort leads by position within columns\n        const sortedLeads = sortLeadsByPositionInColumns(fetchedLeads);\n        setItems(sortedLeads);\n      } catch (error) {\n        console.error(\"Error fetching leads:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchLeads();\n  }, []);\n\n  // Sort leads by position within their columns\n  const sortLeadsByPositionInColumns = (leads: Lead[]) => {\n    // Group leads by status\n    const groupedLeads = leads.reduce((acc, lead) => {\n      const status = lead.status || 'New';\n      if (!acc[status]) acc[status] = [];\n      acc[status].push(lead);\n      return acc;\n    }, {} as Record<string, Lead[]>);\n\n    // Sort each group by position\n    Object.keys(groupedLeads).forEach(status => {\n      groupedLeads[status].sort((a, b) => (a.position || 0) - (b.position || 0));\n    });\n\n    // Flatten back to array\n    return Object.values(groupedLeads).flat();\n  };\n\n  // Apply any pending updates to the leads\n  const applyPendingUpdates = (leads: Lead[], updates: Record<string, Partial<Lead>>) => {\n    return leads.map(lead => {\n      const update = updates[lead.id.toString()];\n      return update ? { ...lead, ...update } : lead;\n    });\n  };\n\n  // Handle drag end for react-beautiful-dnd\n  const handleDragEnd = async (result: DropResult) => {\n    const { destination, source, draggableId } = result;\n\n    // Dropped outside or same position\n    if (!destination || \n        (destination.droppableId === source.droppableId && \n         destination.index === source.index)) {\n      return;\n    }\n\n    // Find the lead that was dragged\n    const lead = items.find(item => item.id.toString() === draggableId);\n    if (!lead) return;\n\n    // Create a new list with updated positions\n    let newItems = [...items];\n    \n    // Apply status update if moved to a different column\n    if (destination.droppableId !== source.droppableId) {\n      // Create a pending update\n      setPendingUpdates({\n        ...pendingUpdates,\n        [lead.id.toString()]: {\n          ...pendingUpdates[lead.id.toString()],\n          status: destination.droppableId,\n        }\n      });\n      \n      // Optimistically update the UI\n      newItems = newItems.map(item => \n        item.id.toString() === draggableId \n          ? { ...item, status: destination.droppableId } \n          : item\n      );\n    }\n\n    // Get leads in destination column\n    const leadsInDestination = newItems.filter(\n      item => item.status === destination.droppableId\n    );\n    \n    // Remove the dragged lead if it's already in the destination column\n    const destinationWithoutDragged = destination.droppableId === source.droppableId\n      ? leadsInDestination.filter(item => item.id.toString() !== draggableId)\n      : leadsInDestination;\n    \n    // Insert the dragged lead at the new position\n    destinationWithoutDragged.splice(destination.index, 0, {\n      ...lead,\n      status: destination.droppableId\n    });\n    \n    // Update positions for all leads in the destination column\n    const updatedDestinationLeads = destinationWithoutDragged.map((item, index) => ({\n      ...item,\n      position: index\n    }));\n    \n    // Update the items list with the new positions\n    newItems = newItems.map(item => {\n      if (item.status === destination.droppableId) {\n        const updatedItem = updatedDestinationLeads.find(u => u.id === item.id);\n        return updatedItem || item;\n      }\n      return item;\n    });\n    \n    // Update UI optimistically\n    setItems(newItems);\n    \n    // Persist changes to the database\n    try {\n      // Update the lead status if it changed\n      if (destination.droppableId !== source.droppableId) {\n        await updateLead(lead.id.toString(), { \n          status: destination.droppableId \n        });\n      }\n      \n      // Update positions for all affected leads\n      await updateLeadPositions(\n        updatedDestinationLeads.map(lead => ({\n          id: lead.id.toString(),\n          position: lead.position\n        }))\n      );\n      \n      // Clear pending update for this lead\n      const newPendingUpdates = { ...pendingUpdates };\n      delete newPendingUpdates[lead.id.toString()];\n      setPendingUpdates(newPendingUpdates);\n    } catch (error) {\n      console.error(\"Error updating lead:\", error);\n      // We could implement a rollback mechanism here if needed\n    }\n  };\n\n  const handleAddLead = () => {\n    setIsAddLeadOpen(true);\n  };\n\n  const handleLeadAdded = (newLead: Lead) => {\n    setItems(prev => [...prev, newLead]);\n  };\n\n  // Calculate summary statistics\n  const totalLeadValue = items.reduce((sum, lead) => {\n    // Convert string value like \"$5,000\" to number\n    const numericValue = typeof lead.value === 'string' \n      ? parseFloat(lead.value.replace(/[^0-9.-]+/g, \"\")) \n      : (lead.value || 0);\n    return sum + numericValue;\n  }, 0);\n  \n  const leadsByStatus = columns.map(column => ({\n    id: column.id,\n    count: items.filter(item => item.status === column.id).length,\n    value: items\n      .filter(item => item.status === column.id)\n      .reduce((sum, lead) => {\n        const numericValue = typeof lead.value === 'string'\n          ? parseFloat(lead.value.replace(/[^0-9.-]+/g, \"\"))\n          : (lead.value || 0);\n        return sum + numericValue;\n      }, 0)\n  }));\n\n  if (isLoading) {\n    return <div className=\"p-6\">Loading leads...</div>;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"p-4 shadow-md\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-muted-foreground\">Total Leads</h3>\n              <p className=\"text-2xl font-bold\">{items.length}</p>\n            </div>\n            <div className=\"bg-slate-100 p-3 rounded-full\">\n              <Users className=\"w-6 h-6 text-slate-600\" />\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4 shadow-md\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-muted-foreground\">Total Value</h3>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalLeadValue)}</p>\n            </div>\n            <div className=\"bg-blue-100 p-3 rounded-full\">\n              <DollarSign className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4 shadow-md\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-muted-foreground\">Conversion Rate</h3>\n              <p className=\"text-2xl font-bold\">\n                {items.length ? ((leadsByStatus[2]?.count || 0) / items.length * 100).toFixed(1) : 0}%\n              </p>\n            </div>\n            <div className=\"bg-emerald-100 p-3 rounded-full\">\n              <TrendingUp className=\"w-6 h-6 text-emerald-600\" />\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4 shadow-md\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-muted-foreground\">Avg. Deal Size</h3>\n              <p className=\"text-2xl font-bold\">\n                {items.length ? formatCurrency(totalLeadValue / items.length) : '$0'}\n              </p>\n            </div>\n            <div className=\"bg-indigo-100 p-3 rounded-full\">\n              <BarChart className=\"w-6 h-6 text-indigo-600\" />\n            </div>\n          </div>\n        </Card>\n      </div>\n      \n      {/* Action Bar */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Button onClick={handleAddLead} className=\"bg-slate-800 hover:bg-slate-700\">\n            <Plus className=\"mr-2 h-4 w-4\" /> Add Lead\n          </Button>\n          \n          {problematicLeads.length > 0 && (\n            <Button variant=\"ghost\" className=\"text-amber-600\" title=\"Some leads have data issues\">\n              <AlertTriangle className=\"mr-2 h-4 w-4\" /> {problematicLeads.length} Issue{problematicLeads.length > 1 ? 's' : ''}\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\">\n            <SlidersHorizontal className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"outline\" size=\"icon\">\n            <Search className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Kanban Board */}\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className=\"flex space-x-4 overflow-x-auto pb-6\">\n          {columns.map((column) => (\n            <div key={column.id} className=\"min-w-[300px]\">\n              <div \n                className={`bg-gradient-to-r ${column.color} py-2 px-4 rounded-t-md shadow-sm`}\n              >\n                <h3 className=\"font-semibold text-white\">{column.title}</h3>\n              </div>\n              <Droppable droppableId={column.id}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    className={`bg-muted/30 p-4 rounded-b-md min-h-[500px] transition-colors ${\n                      snapshot.isDraggingOver ? 'bg-muted/50' : ''\n                    }`}\n                  >\n                    {items\n                      .filter(item => item.status === column.id)\n                      .map((item, index) => (\n                        <Draggable \n                          key={item.id.toString()} \n                          draggableId={item.id.toString()} \n                          index={index}\n                          isDragDisabled={problematicLeads.includes(item.id.toString())}\n                        >\n                          {(provided, snapshot) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className=\"mb-3\"\n                              style={provided.draggableProps.style}\n                            >\n                              <KanbanCard \n                                id={item.id.toString()} \n                                lead={item} \n                                columnColor={column.color} \n                                isDragging={snapshot.isDragging}\n                              />\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          ))}\n        </div>\n      </DragDropContext>\n      \n      {/* Add Lead Dialog */}\n      <AddLeadDialog \n        open={isAddLeadOpen} \n        onClose={() => setIsAddLeadOpen(false)}\n        onLeadAdded={handleLeadAdded}\n      />\n    </div>\n  );\n} "
        }
    ]
}