{
    "sourceFile": "components/leads/lead-profile.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1741293366718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742497189689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,17 +72,26 @@\n         {/* Basic Info */}\n         {isEditing ? (\n           <div className=\"space-y-3\">\n             <div>\n-              <Label htmlFor=\"name\">Name</Label>\n+              <Label htmlFor=\"firstName\">First Name</Label>\n               <Input \n-                id=\"name\" \n-                name=\"name\" \n-                value={editedLead.name} \n+                id=\"firstName\" \n+                name=\"firstName\" \n+                value={editedLead.firstName} \n                 onChange={handleChange}\n               />\n             </div>\n             <div>\n+              <Label htmlFor=\"lastName\">Last Name</Label>\n+              <Input \n+                id=\"lastName\" \n+                name=\"lastName\" \n+                value={editedLead.lastName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n               <Label htmlFor=\"company\">Company</Label>\n               <Input \n                 id=\"company\" \n                 name=\"company\" \n@@ -92,9 +101,9 @@\n             </div>\n           </div>\n         ) : (\n           <div>\n-            <h2 className=\"text-2xl font-bold mb-2\">{lead.name}</h2>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n             <div className=\"flex items-center text-muted-foreground\">\n               <Building2 className=\"w-4 h-4 mr-2\" />\n               {lead.company}\n             </div>\n"
                },
                {
                    "date": 1742497817813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n } from 'lucide-react';\n import { format } from 'date-fns';\n import { Lead } from '@/data/leads';\n import { useRouter } from 'next/navigation';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n \n interface LeadProfileProps {\n   lead: Lead;\n   isEditMode?: boolean;\n@@ -41,10 +42,17 @@\n     return format(new Date(dateString), 'MMMM d, yyyy');\n   };\n \n   const handleSave = () => {\n+    // Format the phone number before saving\n+    const formattedPhone = formatPhoneNumber(editedLead.phone);\n+    const updatedLead = {\n+      ...editedLead,\n+      phone: formattedPhone\n+    };\n+    \n     // Here you would typically save changes to your backend\n-    console.log('Saving lead:', editedLead);\n+    console.log('Saving lead:', updatedLead);\n     \n     // After saving, exit edit mode and navigate to the non-edit view\n     setIsEditing(false);\n     router.push(`/dashboard/leads/${lead.id}`);\n@@ -61,8 +69,18 @@\n     const { name, value } = e.target;\n     setEditedLead(prev => ({ ...prev, [name]: value }));\n   };\n \n+  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n+    const value = e.target.value;\n+    if (isValidPhoneNumber(value)) {\n+      setEditedLead(prev => ({ \n+        ...prev, \n+        phone: formatPhoneNumber(value)\n+      }));\n+    }\n+  };\n+\n   const handleStatusChange = (value: string) => {\n     setEditedLead(prev => ({ ...prev, status: value }));\n   };\n \n@@ -172,9 +190,13 @@\n                   id=\"phone\"\n                   name=\"phone\"\n                   value={editedLead.phone}\n                   onChange={handleChange}\n+                  onBlur={handlePhoneBlur}\n                 />\n+                <div className=\"text-xs text-muted-foreground mt-1\">\n+                  Format: +1 (###) ###-####\n+                </div>\n               </div>\n             </div>\n           ) : (\n             <div className=\"space-y-2\">\n"
                },
                {
                    "date": 1742497845409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n import { format } from 'date-fns';\n import { Lead } from '@/data/leads';\n import { useRouter } from 'next/navigation';\n import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n+import { updateLead } from '@/lib/services/leads-service';\n+import { toast } from '@/hooks/use-toast';\n \n interface LeadProfileProps {\n   lead: Lead;\n   isEditMode?: boolean;\n@@ -41,22 +43,39 @@\n   const formatDate = (dateString: string) => {\n     return format(new Date(dateString), 'MMMM d, yyyy');\n   };\n \n-  const handleSave = () => {\n-    // Format the phone number before saving\n-    const formattedPhone = formatPhoneNumber(editedLead.phone);\n-    const updatedLead = {\n-      ...editedLead,\n-      phone: formattedPhone\n-    };\n-    \n-    // Here you would typically save changes to your backend\n-    console.log('Saving lead:', updatedLead);\n-    \n-    // After saving, exit edit mode and navigate to the non-edit view\n-    setIsEditing(false);\n-    router.push(`/dashboard/leads/${lead.id}`);\n+  const handleSave = async () => {\n+    try {\n+      // Format the phone number before saving\n+      const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      const updatedLead = {\n+        ...editedLead,\n+        phone: formattedPhone\n+      };\n+      \n+      // Save changes to the backend\n+      await updateLead(lead.id, updatedLead);\n+      \n+      // Show success message\n+      toast({\n+        title: \"Success\",\n+        description: \"Lead information has been updated.\",\n+      });\n+      \n+      // After saving, exit edit mode and navigate to the non-edit view\n+      setIsEditing(false);\n+      router.push(`/dashboard/leads/${lead.id}`);\n+    } catch (error) {\n+      console.error('Error updating lead:', error);\n+      \n+      // Show error message\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to update lead information. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n   };\n \n   const handleCancel = () => {\n     // Reset changes and exit edit mode\n"
                },
                {
                    "date": 1742498659150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,346 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Badge } from '@/components/ui/badge';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n+import {\n+  Building2,\n+  Mail,\n+  Phone,\n+  MapPin,\n+  Globe,\n+  DollarSign,\n+  Calendar,\n+  Clock,\n+  Save,\n+  X,\n+  Trash2\n+} from 'lucide-react';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { format } from 'date-fns';\n+import { Lead } from '@/data/leads';\n+import { useRouter } from 'next/navigation';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n+import { updateLead, deleteLead } from '@/lib/services/leads-service';\n+import { toast } from '@/hooks/use-toast';\n+\n+interface LeadProfileProps {\n+  lead: Lead;\n+  isEditMode?: boolean;\n+}\n+\n+export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n+  const router = useRouter();\n+  const [editedLead, setEditedLead] = useState({ ...lead });\n+  const [isEditing, setIsEditing] = useState(isEditMode);\n+  const [isDeleting, setIsDeleting] = useState(false);\n+\n+  useEffect(() => {\n+    setIsEditing(isEditMode);\n+  }, [isEditMode]);\n+\n+  const formatDate = (dateString: string) => {\n+    return format(new Date(dateString), 'MMMM d, yyyy');\n+  };\n+\n+  const handleSave = async () => {\n+    try {\n+      // Format the phone number before saving\n+      const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      const updatedLead = {\n+        ...editedLead,\n+        phone: formattedPhone\n+      };\n+      \n+      // Save changes to the backend\n+      await updateLead(lead.id, updatedLead);\n+      \n+      // Show success message\n+      toast({\n+        title: \"Success\",\n+        description: \"Lead information has been updated.\",\n+      });\n+      \n+      // After saving, exit edit mode and navigate to the non-edit view\n+      setIsEditing(false);\n+      router.push(`/dashboard/leads/${lead.id}`);\n+    } catch (error) {\n+      console.error('Error updating lead:', error);\n+      \n+      // Show error message\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to update lead information. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  const handleCancel = () => {\n+    // Reset changes and exit edit mode\n+    setEditedLead({ ...lead });\n+    setIsEditing(false);\n+    router.push(`/dashboard/leads/${lead.id}`);\n+  };\n+\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const { name, value } = e.target;\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n+    const value = e.target.value;\n+    if (isValidPhoneNumber(value)) {\n+      setEditedLead(prev => ({ \n+        ...prev, \n+        phone: formatPhoneNumber(value)\n+      }));\n+    }\n+  };\n+\n+  const handleStatusChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, status: value }));\n+  };\n+\n+  const handleDelete = async () => {\n+    try {\n+      setIsDeleting(true);\n+      await deleteLead(lead.id);\n+      \n+      toast({\n+        title: \"Success\",\n+        description: \"Lead has been deleted successfully.\",\n+      });\n+      \n+      // Redirect to leads list after deletion\n+      router.push('/dashboard/leads');\n+    } catch (error) {\n+      console.error('Error deleting lead:', error);\n+      \n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to delete the lead. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+      setIsDeleting(false);\n+    }\n+  };\n+\n+  return (\n+    <Card className=\"p-6\">\n+      <div className=\"space-y-6\">\n+        {/* Basic Info */}\n+        {isEditing ? (\n+          <div className=\"space-y-3\">\n+            <div>\n+              <Label htmlFor=\"firstName\">First Name</Label>\n+              <Input \n+                id=\"firstName\" \n+                name=\"firstName\" \n+                value={editedLead.firstName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"lastName\">Last Name</Label>\n+              <Input \n+                id=\"lastName\" \n+                name=\"lastName\" \n+                value={editedLead.lastName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"company\">Company</Label>\n+              <Input \n+                id=\"company\" \n+                name=\"company\" \n+                value={editedLead.company} \n+                onChange={handleChange}\n+              />\n+            </div>\n+          </div>\n+        ) : (\n+          <div>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n+            <div className=\"flex items-center text-muted-foreground\">\n+              <Building2 className=\"w-4 h-4 mr-2\" />\n+              {lead.company}\n+            </div>\n+          </div>\n+        )}\n+\n+        {/* Status and Value */}\n+        <div className=\"space-y-2\">\n+          {isEditing ? (\n+            <>\n+              <Label htmlFor=\"status\">Status</Label>\n+              <Select \n+                value={editedLead.status} \n+                onValueChange={handleStatusChange}\n+              >\n+                <SelectTrigger id=\"status\">\n+                  <SelectValue placeholder=\"Select status\" />\n+                </SelectTrigger>\n+                <SelectContent>\n+                  <SelectItem value=\"New\">New</SelectItem>\n+                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n+                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n+                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n+                </SelectContent>\n+              </Select>\n+              <div className=\"mt-3\">\n+                <Label htmlFor=\"value\">Value</Label>\n+                <Input\n+                  id=\"value\"\n+                  name=\"value\"\n+                  value={editedLead.value}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+            </>\n+          ) : (\n+            <>\n+              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n+                {lead.status}\n+              </Badge>\n+              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n+                <DollarSign className=\"w-5 h-5\" />\n+                {lead.value}\n+              </div>\n+            </>\n+          )}\n+        </div>\n+\n+        {/* Contact Info */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Contact Information</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"email\">Email</Label>\n+                <Input\n+                  id=\"email\"\n+                  name=\"email\"\n+                  value={editedLead.email}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"phone\">Phone</Label>\n+                <Input\n+                  id=\"phone\"\n+                  name=\"phone\"\n+                  value={editedLead.phone}\n+                  onChange={handleChange}\n+                  onBlur={handlePhoneBlur}\n+                />\n+                <div className=\"text-xs text-muted-foreground mt-1\">\n+                  Format: +1 (###) ###-####\n+                </div>\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2\">\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`mailto:${lead.email}`}>\n+                  <Mail className=\"w-4 h-4 mr-2\" />\n+                  {lead.email}\n+                </a>\n+              </Button>\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`tel:${lead.phone}`}>\n+                  <Phone className=\"w-4 h-4 mr-2\" />\n+                  {lead.phone}\n+                </a>\n+              </Button>\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Timeline */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Timeline</h3>\n+          <div className=\"space-y-2 text-sm text-muted-foreground\">\n+            <div className=\"flex items-center\">\n+              <Calendar className=\"w-4 h-4 mr-2\" />\n+              Created: {formatDate(lead.createdAt)}\n+            </div>\n+            <div className=\"flex items-center\">\n+              <Clock className=\"w-4 h-4 mr-2\" />\n+              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Action Buttons */}\n+        <div className=\"space-y-3\">\n+          {isEditing ? (\n+            <div className=\"flex gap-2\">\n+              <Button className=\"flex-1\" onClick={handleSave}>\n+                <Save className=\"w-4 h-4 mr-2\" />\n+                Save\n+              </Button>\n+              <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n+                <X className=\"w-4 h-4 mr-2\" />\n+                Cancel\n+              </Button>\n+            </div>\n+          ) : (\n+            <div className=\"flex gap-2\">\n+              <Button \n+                variant=\"outline\" \n+                className=\"flex-1\" \n+                onClick={() => router.push(`/dashboard/leads/${lead.id}?edit=true`)}\n+              >\n+                Edit Profile\n+              </Button>\n+              \n+              <AlertDialog>\n+                <AlertDialogTrigger asChild>\n+                  <Button variant=\"destructive\" disabled={isDeleting}>\n+                    <Trash2 className=\"w-4 h-4 mr-2\" />\n+                    Delete Lead\n+                  </Button>\n+                </AlertDialogTrigger>\n+                <AlertDialogContent>\n+                  <AlertDialogHeader>\n+                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n+                    <AlertDialogDescription>\n+                      This action cannot be undone. This will permanently delete the lead\n+                      and all associated information.\n+                    </AlertDialogDescription>\n+                  </AlertDialogHeader>\n+                  <AlertDialogFooter>\n+                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                    <AlertDialogAction\n+                      onClick={handleDelete}\n+                      className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n+                      disabled={isDeleting}\n+                    >\n+                      {isDeleting ? \"Deleting...\" : \"Delete\"}\n+                    </AlertDialogAction>\n+                  </AlertDialogFooter>\n+                </AlertDialogContent>\n+              </AlertDialog>\n+            </div>\n+          )}\n+        </div>\n+      </div>\n+    </Card>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742501130191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { Card } from '@/components/ui/card';\n import { Button } from '@/components/ui/button';\n import { Badge } from '@/components/ui/badge';\n import { Input } from '@/components/ui/input';\n+import { Textarea } from '@/components/ui/textarea';\n import { Label } from '@/components/ui/label';\n import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n import {\n   Building2,\n@@ -17,9 +18,13 @@\n   Calendar,\n   Clock,\n   Save,\n   X,\n-  Trash2\n+  Trash2,\n+  ExternalLink,\n+  MessageCircle,\n+  Tag,\n+  CalendarClock\n } from 'lucide-react';\n import {\n   AlertDialog,\n   AlertDialogAction,\n@@ -42,13 +47,20 @@\n   lead: Lead;\n   isEditMode?: boolean;\n }\n \n+// Lead qualification types\n+type LeadScore = 'A' | 'B' | 'C' | 'D' | '';\n+type LeadInterest = 'Hot' | 'Warm' | 'Cold' | '';\n+type LeadBudget = 'Enterprise' | 'Medium' | 'Small' | 'Unknown' | '';\n+type LeadTimeframe = 'Immediate' | '1-3 Months' | '3-6 Months' | '6+ Months' | 'Unknown' | '';\n+\n export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n   const router = useRouter();\n   const [editedLead, setEditedLead] = useState({ ...lead });\n   const [isEditing, setIsEditing] = useState(isEditMode);\n   const [isDeleting, setIsDeleting] = useState(false);\n+  const [newTag, setNewTag] = useState('');\n \n   useEffect(() => {\n     setIsEditing(isEditMode);\n   }, [isEditMode]);\n@@ -96,9 +108,9 @@\n     setIsEditing(false);\n     router.push(`/dashboard/leads/${lead.id}`);\n   };\n \n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n     const { name, value } = e.target;\n     setEditedLead(prev => ({ ...prev, [name]: value }));\n   };\n \n@@ -115,8 +127,28 @@\n   const handleStatusChange = (value: string) => {\n     setEditedLead(prev => ({ ...prev, status: value }));\n   };\n \n+  const handleScoreChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, score: value }));\n+  };\n+\n+  const handleInterestChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, interest: value }));\n+  };\n+\n+  const handleBudgetChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, budget: value }));\n+  };\n+\n+  const handleTimeframeChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, timeframe: value }));\n+  };\n+\n+  const handleCountryChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, country: value }));\n+  };\n+\n   const handleDelete = async () => {\n     try {\n       setIsDeleting(true);\n       await deleteLead(lead.id);\n@@ -139,11 +171,60 @@\n       setIsDeleting(false);\n     }\n   };\n \n+  const addTag = () => {\n+    if (newTag.trim()) {\n+      const tags = editedLead.tags || [];\n+      if (!tags.includes(newTag.trim())) {\n+        setEditedLead(prev => ({ \n+          ...prev, \n+          tags: [...tags, newTag.trim()] \n+        }));\n+      }\n+      setNewTag('');\n+    }\n+  };\n+\n+  const removeTag = (tagToRemove: string) => {\n+    const tags = editedLead.tags || [];\n+    setEditedLead(prev => ({ \n+      ...prev, \n+      tags: tags.filter(tag => tag !== tagToRemove) \n+    }));\n+  };\n+\n+  const getScoreColor = (score?: string) => {\n+    switch(score) {\n+      case 'A': return 'text-green-500';\n+      case 'B': return 'text-blue-500';\n+      case 'C': return 'text-yellow-500';\n+      case 'D': return 'text-red-500';\n+      default: return 'text-gray-500';\n+    }\n+  };\n+\n+  const getInterestColor = (interest?: string) => {\n+    switch(interest) {\n+      case 'Hot': return 'text-red-500';\n+      case 'Warm': return 'text-amber-500';\n+      case 'Cold': return 'text-blue-500';\n+      default: return 'text-gray-500';\n+    }\n+  };\n+\n   return (\n-    <Card className=\"p-6\">\n-      <div className=\"space-y-6\">\n+    <Card className=\"h-full\">\n+      <div className=\"p-6 space-y-6\">\n+        {/* Header with Status Badge */}\n+        {!isEditing && (\n+          <div className=\"relative\">\n+            <Badge variant=\"secondary\" className=\"absolute right-0 top-0 px-2 py-1\">\n+              {lead.status}\n+            </Badge>\n+          </div>\n+        )}\n+\n         {/* Basic Info */}\n         {isEditing ? (\n           <div className=\"space-y-3\">\n             <div>\n@@ -174,10 +255,13 @@\n               />\n             </div>\n           </div>\n         ) : (\n-          <div>\n-            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n+          <div className=\"flex flex-col items-center\">\n+            <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center text-primary text-xl font-bold mb-2\">\n+              {lead.firstName.charAt(0)}{lead.lastName.charAt(0)}\n+            </div>\n+            <h2 className=\"text-2xl font-bold mb-1\">{lead.firstName} {lead.lastName}</h2>\n             <div className=\"flex items-center text-muted-foreground\">\n               <Building2 className=\"w-4 h-4 mr-2\" />\n               {lead.company}\n             </div>\n@@ -214,22 +298,41 @@\n               </div>\n             </>\n           ) : (\n             <>\n-              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n-                {lead.status}\n-              </Badge>\n-              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n+              <div className=\"flex items-center justify-center text-xl font-bold text-primary mt-2\">\n                 <DollarSign className=\"w-5 h-5\" />\n                 {lead.value}\n               </div>\n             </>\n           )}\n         </div>\n \n+        {/* Quick Actions (View Mode Only) */}\n+        {!isEditing && (\n+          <div className=\"grid grid-cols-2 gap-2\">\n+            <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `mailto:${lead.email}`}>\n+              <Mail className=\"w-3 h-3 mr-1\" />\n+              Email\n+            </Button>\n+            <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `tel:${lead.phone}`}>\n+              <Phone className=\"w-3 h-3 mr-1\" />\n+              Call\n+            </Button>\n+            <Button variant=\"outline\" size=\"sm\">\n+              <CalendarClock className=\"w-3 h-3 mr-1\" />\n+              Schedule\n+            </Button>\n+            <Button variant=\"outline\" size=\"sm\">\n+              <MessageCircle className=\"w-3 h-3 mr-1\" />\n+              Text\n+            </Button>\n+          </div>\n+        )}\n+\n         {/* Contact Info */}\n         <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Contact Information</h3>\n+          <h3 className=\"font-medium text-sm text-muted-foreground\">Contact Information</h3>\n           {isEditing ? (\n             <div className=\"space-y-3\">\n               <div>\n                 <Label htmlFor=\"email\">Email</Label>\n@@ -271,25 +374,382 @@\n             </div>\n           )}\n         </div>\n \n+        {/* Address Information */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-medium text-sm text-muted-foreground\">Address Information</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-2\">\n+              <div>\n+                <Label htmlFor=\"address\">Street Address</Label>\n+                <Input\n+                  id=\"address\"\n+                  name=\"address\"\n+                  value={editedLead.address || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"123 Main St\"\n+                />\n+              </div>\n+              \n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"city\">City</Label>\n+                  <Input\n+                    id=\"city\"\n+                    name=\"city\"\n+                    value={editedLead.city || ''}\n+                    onChange={handleChange}\n+                    placeholder=\"City\"\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"state\">State/Province</Label>\n+                  <Input\n+                    id=\"state\"\n+                    name=\"state\"\n+                    value={editedLead.state || ''}\n+                    onChange={handleChange}\n+                    placeholder=\"State\"\n+                  />\n+                </div>\n+              </div>\n+              \n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"zipCode\">Zip/Postal Code</Label>\n+                  <Input\n+                    id=\"zipCode\"\n+                    name=\"zipCode\"\n+                    value={editedLead.zipCode || ''}\n+                    onChange={handleChange}\n+                    placeholder=\"Zip Code\"\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"country\">Country</Label>\n+                  <Select \n+                    value={editedLead.country || ''}\n+                    onValueChange={handleCountryChange}\n+                  >\n+                    <SelectTrigger id=\"country\">\n+                      <SelectValue placeholder=\"Select Country\" />\n+                    </SelectTrigger>\n+                    <SelectContent>\n+                      <SelectItem value=\"US\">United States</SelectItem>\n+                      <SelectItem value=\"CA\">Canada</SelectItem>\n+                      <SelectItem value=\"UK\">United Kingdom</SelectItem>\n+                      <SelectItem value=\"AU\">Australia</SelectItem>\n+                      <SelectItem value=\"OTHER\">Other</SelectItem>\n+                    </SelectContent>\n+                  </Select>\n+                </div>\n+              </div>\n+            </div>\n+          ) : (\n+            <div>\n+              {(lead.address || lead.city || lead.state || lead.zipCode || lead.country) ? (\n+                <div className=\"rounded-md bg-muted p-3 space-y-1\">\n+                  {lead.address && (\n+                    <div className=\"flex items-start\">\n+                      <MapPin className=\"w-4 h-4 mr-2 mt-0.5 text-muted-foreground\" />\n+                      <span>{lead.address}</span>\n+                    </div>\n+                  )}\n+                  \n+                  {(lead.city || lead.state || lead.zipCode) && (\n+                    <div className=\"flex items-start pl-6\">\n+                      <span>\n+                        {[\n+                          lead.city, \n+                          lead.state,\n+                          lead.zipCode\n+                        ].filter(Boolean).join(', ')}\n+                      </span>\n+                    </div>\n+                  )}\n+                  \n+                  {lead.country && (\n+                    <div className=\"flex items-start pl-6\">\n+                      <span>\n+                        {lead.country === \"US\" ? \"United States\" : \n+                         lead.country === \"CA\" ? \"Canada\" : \n+                         lead.country === \"UK\" ? \"United Kingdom\" : \n+                         lead.country === \"AU\" ? \"Australia\" : \n+                         lead.country === \"OTHER\" ? \"Other\" : lead.country}\n+                      </span>\n+                    </div>\n+                  )}\n+                  \n+                  {(lead.address || lead.city || lead.state) && (\n+                    <div className=\"pt-1\">\n+                      <Button \n+                        variant=\"link\" \n+                        size=\"sm\" \n+                        className=\"h-6 p-0 text-muted-foreground hover:text-primary\"\n+                        onClick={() => {\n+                          const query = encodeURIComponent(\n+                            [lead.address, lead.city, lead.state, lead.zipCode, lead.country]\n+                              .filter(Boolean)\n+                              .join(', ')\n+                          );\n+                          window.open(`https://maps.google.com/maps?q=${query}`, '_blank');\n+                        }}\n+                      >\n+                        <ExternalLink className=\"w-3 h-3 mr-1\" />\n+                        View on Maps\n+                      </Button>\n+                    </div>\n+                  )}\n+                </div>\n+              ) : (\n+                <p className=\"text-sm text-muted-foreground\">No address information</p>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Lead Qualification */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-medium text-sm text-muted-foreground\">Lead Qualification</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"score\">Score</Label>\n+                  <Select \n+                    value={editedLead.score || ''} \n+                    onValueChange={handleScoreChange}\n+                  >\n+                    <SelectTrigger id=\"score\">\n+                      <SelectValue placeholder=\"Score\" />\n+                    </SelectTrigger>\n+                    <SelectContent>\n+                      <SelectItem value=\"A\">A - Very Likely</SelectItem>\n+                      <SelectItem value=\"B\">B - Likely</SelectItem>\n+                      <SelectItem value=\"C\">C - Possible</SelectItem>\n+                      <SelectItem value=\"D\">D - Unlikely</SelectItem>\n+                    </SelectContent>\n+                  </Select>\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"interest\">Interest</Label>\n+                  <Select \n+                    value={editedLead.interest || ''} \n+                    onValueChange={handleInterestChange}\n+                  >\n+                    <SelectTrigger id=\"interest\">\n+                      <SelectValue placeholder=\"Interest\" />\n+                    </SelectTrigger>\n+                    <SelectContent>\n+                      <SelectItem value=\"Hot\">Hot</SelectItem>\n+                      <SelectItem value=\"Warm\">Warm</SelectItem>\n+                      <SelectItem value=\"Cold\">Cold</SelectItem>\n+                    </SelectContent>\n+                  </Select>\n+                </div>\n+              </div>\n+              \n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"budget\">Budget</Label>\n+                  <Select \n+                    value={editedLead.budget || ''} \n+                    onValueChange={handleBudgetChange}\n+                  >\n+                    <SelectTrigger id=\"budget\">\n+                      <SelectValue placeholder=\"Budget\" />\n+                    </SelectTrigger>\n+                    <SelectContent>\n+                      <SelectItem value=\"Enterprise\">Enterprise</SelectItem>\n+                      <SelectItem value=\"Medium\">Medium</SelectItem>\n+                      <SelectItem value=\"Small\">Small</SelectItem>\n+                      <SelectItem value=\"Unknown\">Unknown</SelectItem>\n+                    </SelectContent>\n+                  </Select>\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"timeframe\">Timeframe</Label>\n+                  <Select \n+                    value={editedLead.timeframe || ''} \n+                    onValueChange={handleTimeframeChange}\n+                  >\n+                    <SelectTrigger id=\"timeframe\">\n+                      <SelectValue placeholder=\"Timeframe\" />\n+                    </SelectTrigger>\n+                    <SelectContent>\n+                      <SelectItem value=\"Immediate\">Immediate</SelectItem>\n+                      <SelectItem value=\"1-3 Months\">1-3 Months</SelectItem>\n+                      <SelectItem value=\"3-6 Months\">3-6 Months</SelectItem>\n+                      <SelectItem value=\"6+ Months\">6+ Months</SelectItem>\n+                      <SelectItem value=\"Unknown\">Unknown</SelectItem>\n+                    </SelectContent>\n+                  </Select>\n+                </div>\n+              </div>\n+              \n+              <div>\n+                <Label htmlFor=\"source\">Lead Source</Label>\n+                <Input\n+                  id=\"source\"\n+                  name=\"source\"\n+                  value={editedLead.source || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"Website, Referral, etc.\"\n+                />\n+              </div>\n+              \n+              <div>\n+                <Label htmlFor=\"nextSteps\">Next Steps</Label>\n+                <Textarea\n+                  id=\"nextSteps\"\n+                  name=\"nextSteps\"\n+                  value={editedLead.nextSteps || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"Follow up actions...\"\n+                  className=\"h-20\"\n+                />\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-3\">\n+              <div className=\"grid grid-cols-2 gap-3\">\n+                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground\">Score</span>\n+                  <span className={`text-lg font-bold ${getScoreColor(lead.score)}`}>\n+                    {lead.score || 'N/A'}\n+                  </span>\n+                </div>\n+                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground\">Interest</span>\n+                  <span className={`text-lg font-bold ${getInterestColor(lead.interest)}`}>\n+                    {lead.interest || 'N/A'}\n+                  </span>\n+                </div>\n+              </div>\n+              \n+              <div className=\"grid grid-cols-2 gap-3\">\n+                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground\">Budget</span>\n+                  <span className=\"text-lg font-bold\">\n+                    {lead.budget || 'Unknown'}\n+                  </span>\n+                </div>\n+                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground\">Timeframe</span>\n+                  <span className=\"text-lg font-bold\">\n+                    {lead.timeframe || 'Unknown'}\n+                  </span>\n+                </div>\n+              </div>\n+              \n+              {lead.source && (\n+                <div className=\"p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground block\">Source</span>\n+                  <span>{lead.source}</span>\n+                </div>\n+              )}\n+              \n+              {lead.nextSteps && (\n+                <div className=\"p-2 rounded-md bg-background border\">\n+                  <span className=\"text-xs text-muted-foreground block\">Next Steps</span>\n+                  <p className=\"text-sm\">{lead.nextSteps}</p>\n+                </div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Tags */}\n+        <div className=\"space-y-2\">\n+          <h3 className=\"font-medium text-sm text-muted-foreground\">Tags</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-2\">\n+              <div className=\"flex flex-wrap gap-1\">\n+                {(editedLead.tags || []).map((tag, index) => (\n+                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n+                    {tag}\n+                    <Button \n+                      type=\"button\"\n+                      size=\"sm\" \n+                      variant=\"ghost\" \n+                      className=\"h-4 w-4 p-0 hover:bg-transparent\"\n+                      onClick={() => removeTag(tag)}\n+                    >\n+                      <X className=\"h-3 w-3\" />\n+                    </Button>\n+                  </Badge>\n+                ))}\n+              </div>\n+              <div className=\"flex gap-2\">\n+                <Input \n+                  id=\"newTag\"\n+                  placeholder=\"Add tag...\" \n+                  value={newTag}\n+                  onChange={(e) => setNewTag(e.target.value)}\n+                  className=\"h-8\"\n+                  onKeyDown={(e) => {\n+                    if (e.key === 'Enter') {\n+                      e.preventDefault();\n+                      addTag();\n+                    }\n+                  }}\n+                />\n+                <Button type=\"button\" size=\"sm\" onClick={addTag}>Add</Button>\n+              </div>\n+            </div>\n+          ) : (\n+            <div>\n+              {lead.tags && lead.tags.length > 0 ? (\n+                <div className=\"flex flex-wrap gap-1\">\n+                  {lead.tags.map((tag, index) => (\n+                    <Badge key={index} variant=\"outline\">\n+                      {tag}\n+                    </Badge>\n+                  ))}\n+                </div>\n+              ) : (\n+                <p className=\"text-sm text-muted-foreground\">No tags</p>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n         {/* Timeline */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Timeline</h3>\n-          <div className=\"space-y-2 text-sm text-muted-foreground\">\n+        <div className=\"space-y-2\">\n+          <h3 className=\"font-medium text-sm text-muted-foreground\">Timeline</h3>\n+          <div className=\"space-y-2 text-sm\">\n             <div className=\"flex items-center\">\n-              <Calendar className=\"w-4 h-4 mr-2\" />\n+              <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n               Created: {formatDate(lead.createdAt)}\n             </div>\n             <div className=\"flex items-center\">\n-              <Clock className=\"w-4 h-4 mr-2\" />\n+              <Clock className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n               Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n             </div>\n           </div>\n         </div>\n \n+        {/* Set Follow-up Reminder (View Mode Only) */}\n+        {!isEditing && (\n+          <div className=\"p-3 rounded-lg bg-muted\">\n+            <div className=\"flex justify-between items-center\">\n+              <div>\n+                <span className=\"text-xs text-muted-foreground block\">Last Contact</span>\n+                <span className=\"font-medium\">\n+                  {lead.lastTouchpoint ? format(new Date(lead.lastTouchpoint), 'MMM d, yyyy') : 'Never'}\n+                </span>\n+              </div>\n+              <Button size=\"sm\" variant=\"default\">\n+                <Clock className=\"w-3 h-3 mr-1\" />\n+                Set Reminder\n+              </Button>\n+            </div>\n+          </div>\n+        )}\n+\n         {/* Action Buttons */}\n-        <div className=\"space-y-3\">\n+        <div className=\"space-y-3 pt-2\">\n           {isEditing ? (\n             <div className=\"flex gap-2\">\n               <Button className=\"flex-1\" onClick={handleSave}>\n                 <Save className=\"w-4 h-4 mr-2\" />\n@@ -342,279 +802,5 @@\n         </div>\n       </div>\n     </Card>\n   );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Badge } from '@/components/ui/badge';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n-import {\n-  Building2,\n-  Mail,\n-  Phone,\n-  MapPin,\n-  Globe,\n-  DollarSign,\n-  Calendar,\n-  Clock,\n-  Save,\n-  X\n-} from 'lucide-react';\n-import { format } from 'date-fns';\n-import { Lead } from '@/data/leads';\n-import { useRouter } from 'next/navigation';\n-import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n-import { updateLead } from '@/lib/services/leads-service';\n-import { toast } from '@/hooks/use-toast';\n-\n-interface LeadProfileProps {\n-  lead: Lead;\n-  isEditMode?: boolean;\n-}\n-\n-export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n-  const router = useRouter();\n-  const [editedLead, setEditedLead] = useState({ ...lead });\n-  const [isEditing, setIsEditing] = useState(isEditMode);\n-\n-  useEffect(() => {\n-    setIsEditing(isEditMode);\n-  }, [isEditMode]);\n-\n-  const formatDate = (dateString: string) => {\n-    return format(new Date(dateString), 'MMMM d, yyyy');\n-  };\n-\n-  const handleSave = async () => {\n-    try {\n-      // Format the phone number before saving\n-      const formattedPhone = formatPhoneNumber(editedLead.phone);\n-      const updatedLead = {\n-        ...editedLead,\n-        phone: formattedPhone\n-      };\n-      \n-      // Save changes to the backend\n-      await updateLead(lead.id, updatedLead);\n-      \n-      // Show success message\n-      toast({\n-        title: \"Success\",\n-        description: \"Lead information has been updated.\",\n-      });\n-      \n-      // After saving, exit edit mode and navigate to the non-edit view\n-      setIsEditing(false);\n-      router.push(`/dashboard/leads/${lead.id}`);\n-    } catch (error) {\n-      console.error('Error updating lead:', error);\n-      \n-      // Show error message\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to update lead information. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-    }\n-  };\n-\n-  const handleCancel = () => {\n-    // Reset changes and exit edit mode\n-    setEditedLead({ ...lead });\n-    setIsEditing(false);\n-    router.push(`/dashboard/leads/${lead.id}`);\n-  };\n-\n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const { name, value } = e.target;\n-    setEditedLead(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n-    const value = e.target.value;\n-    if (isValidPhoneNumber(value)) {\n-      setEditedLead(prev => ({ \n-        ...prev, \n-        phone: formatPhoneNumber(value)\n-      }));\n-    }\n-  };\n-\n-  const handleStatusChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, status: value }));\n-  };\n-\n-  return (\n-    <Card className=\"p-6\">\n-      <div className=\"space-y-6\">\n-        {/* Basic Info */}\n-        {isEditing ? (\n-          <div className=\"space-y-3\">\n-            <div>\n-              <Label htmlFor=\"firstName\">First Name</Label>\n-              <Input \n-                id=\"firstName\" \n-                name=\"firstName\" \n-                value={editedLead.firstName} \n-                onChange={handleChange}\n-              />\n-            </div>\n-            <div>\n-              <Label htmlFor=\"lastName\">Last Name</Label>\n-              <Input \n-                id=\"lastName\" \n-                name=\"lastName\" \n-                value={editedLead.lastName} \n-                onChange={handleChange}\n-              />\n-            </div>\n-            <div>\n-              <Label htmlFor=\"company\">Company</Label>\n-              <Input \n-                id=\"company\" \n-                name=\"company\" \n-                value={editedLead.company} \n-                onChange={handleChange}\n-              />\n-            </div>\n-          </div>\n-        ) : (\n-          <div>\n-            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n-            <div className=\"flex items-center text-muted-foreground\">\n-              <Building2 className=\"w-4 h-4 mr-2\" />\n-              {lead.company}\n-            </div>\n-          </div>\n-        )}\n-\n-        {/* Status and Value */}\n-        <div className=\"space-y-2\">\n-          {isEditing ? (\n-            <>\n-              <Label htmlFor=\"status\">Status</Label>\n-              <Select \n-                value={editedLead.status} \n-                onValueChange={handleStatusChange}\n-              >\n-                <SelectTrigger id=\"status\">\n-                  <SelectValue placeholder=\"Select status\" />\n-                </SelectTrigger>\n-                <SelectContent>\n-                  <SelectItem value=\"New\">New</SelectItem>\n-                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n-                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n-                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n-                </SelectContent>\n-              </Select>\n-              <div className=\"mt-3\">\n-                <Label htmlFor=\"value\">Value</Label>\n-                <Input\n-                  id=\"value\"\n-                  name=\"value\"\n-                  value={editedLead.value}\n-                  onChange={handleChange}\n-                />\n-              </div>\n-            </>\n-          ) : (\n-            <>\n-              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n-                {lead.status}\n-              </Badge>\n-              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n-                <DollarSign className=\"w-5 h-5\" />\n-                {lead.value}\n-              </div>\n-            </>\n-          )}\n-        </div>\n-\n-        {/* Contact Info */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Contact Information</h3>\n-          {isEditing ? (\n-            <div className=\"space-y-3\">\n-              <div>\n-                <Label htmlFor=\"email\">Email</Label>\n-                <Input\n-                  id=\"email\"\n-                  name=\"email\"\n-                  value={editedLead.email}\n-                  onChange={handleChange}\n-                />\n-              </div>\n-              <div>\n-                <Label htmlFor=\"phone\">Phone</Label>\n-                <Input\n-                  id=\"phone\"\n-                  name=\"phone\"\n-                  value={editedLead.phone}\n-                  onChange={handleChange}\n-                  onBlur={handlePhoneBlur}\n-                />\n-                <div className=\"text-xs text-muted-foreground mt-1\">\n-                  Format: +1 (###) ###-####\n-                </div>\n-              </div>\n-            </div>\n-          ) : (\n-            <div className=\"space-y-2\">\n-              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n-                <a href={`mailto:${lead.email}`}>\n-                  <Mail className=\"w-4 h-4 mr-2\" />\n-                  {lead.email}\n-                </a>\n-              </Button>\n-              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n-                <a href={`tel:${lead.phone}`}>\n-                  <Phone className=\"w-4 h-4 mr-2\" />\n-                  {lead.phone}\n-                </a>\n-              </Button>\n-            </div>\n-          )}\n-        </div>\n-\n-        {/* Timeline */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Timeline</h3>\n-          <div className=\"space-y-2 text-sm text-muted-foreground\">\n-            <div className=\"flex items-center\">\n-              <Calendar className=\"w-4 h-4 mr-2\" />\n-              Created: {formatDate(lead.createdAt)}\n-            </div>\n-            <div className=\"flex items-center\">\n-              <Clock className=\"w-4 h-4 mr-2\" />\n-              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n-            </div>\n-          </div>\n-        </div>\n-\n-        {/* Actions */}\n-        {isEditing ? (\n-          <div className=\"flex space-x-2\">\n-            <Button className=\"flex-1\" onClick={handleSave}>\n-              <Save className=\"w-4 h-4 mr-2\" />\n-              Save\n-            </Button>\n-            <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n-              <X className=\"w-4 h-4 mr-2\" />\n-              Cancel\n-            </Button>\n-          </div>\n-        ) : (\n-          <div className=\"space-y-2\">\n-            <Button className=\"w-full\">Schedule Meeting</Button>\n-            <Button variant=\"outline\" className=\"w-full\">Send Email</Button>\n-          </div>\n-        )}\n-      </div>\n-    </Card>\n-  );\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742501165691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import { Card } from '@/components/ui/card';\n import { Button } from '@/components/ui/button';\n import { Badge } from '@/components/ui/badge';\n import { Input } from '@/components/ui/input';\n-import { Textarea } from '@/components/ui/textarea';\n import { Label } from '@/components/ui/label';\n import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n import {\n   Building2,\n@@ -18,13 +17,9 @@\n   Calendar,\n   Clock,\n   Save,\n   X,\n-  Trash2,\n-  ExternalLink,\n-  MessageCircle,\n-  Tag,\n-  CalendarClock\n+  Trash2\n } from 'lucide-react';\n import {\n   AlertDialog,\n   AlertDialogAction,\n@@ -47,20 +42,13 @@\n   lead: Lead;\n   isEditMode?: boolean;\n }\n \n-// Lead qualification types\n-type LeadScore = 'A' | 'B' | 'C' | 'D' | '';\n-type LeadInterest = 'Hot' | 'Warm' | 'Cold' | '';\n-type LeadBudget = 'Enterprise' | 'Medium' | 'Small' | 'Unknown' | '';\n-type LeadTimeframe = 'Immediate' | '1-3 Months' | '3-6 Months' | '6+ Months' | 'Unknown' | '';\n-\n export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n   const router = useRouter();\n   const [editedLead, setEditedLead] = useState({ ...lead });\n   const [isEditing, setIsEditing] = useState(isEditMode);\n   const [isDeleting, setIsDeleting] = useState(false);\n-  const [newTag, setNewTag] = useState('');\n \n   useEffect(() => {\n     setIsEditing(isEditMode);\n   }, [isEditMode]);\n@@ -108,9 +96,9 @@\n     setIsEditing(false);\n     router.push(`/dashboard/leads/${lead.id}`);\n   };\n \n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n     const { name, value } = e.target;\n     setEditedLead(prev => ({ ...prev, [name]: value }));\n   };\n \n@@ -127,28 +115,8 @@\n   const handleStatusChange = (value: string) => {\n     setEditedLead(prev => ({ ...prev, status: value }));\n   };\n \n-  const handleScoreChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, score: value }));\n-  };\n-\n-  const handleInterestChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, interest: value }));\n-  };\n-\n-  const handleBudgetChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, budget: value }));\n-  };\n-\n-  const handleTimeframeChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, timeframe: value }));\n-  };\n-\n-  const handleCountryChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, country: value }));\n-  };\n-\n   const handleDelete = async () => {\n     try {\n       setIsDeleting(true);\n       await deleteLead(lead.id);\n@@ -171,60 +139,11 @@\n       setIsDeleting(false);\n     }\n   };\n \n-  const addTag = () => {\n-    if (newTag.trim()) {\n-      const tags = editedLead.tags || [];\n-      if (!tags.includes(newTag.trim())) {\n-        setEditedLead(prev => ({ \n-          ...prev, \n-          tags: [...tags, newTag.trim()] \n-        }));\n-      }\n-      setNewTag('');\n-    }\n-  };\n-\n-  const removeTag = (tagToRemove: string) => {\n-    const tags = editedLead.tags || [];\n-    setEditedLead(prev => ({ \n-      ...prev, \n-      tags: tags.filter(tag => tag !== tagToRemove) \n-    }));\n-  };\n-\n-  const getScoreColor = (score?: string) => {\n-    switch(score) {\n-      case 'A': return 'text-green-500';\n-      case 'B': return 'text-blue-500';\n-      case 'C': return 'text-yellow-500';\n-      case 'D': return 'text-red-500';\n-      default: return 'text-gray-500';\n-    }\n-  };\n-\n-  const getInterestColor = (interest?: string) => {\n-    switch(interest) {\n-      case 'Hot': return 'text-red-500';\n-      case 'Warm': return 'text-amber-500';\n-      case 'Cold': return 'text-blue-500';\n-      default: return 'text-gray-500';\n-    }\n-  };\n-\n   return (\n-    <Card className=\"h-full\">\n-      <div className=\"p-6 space-y-6\">\n-        {/* Header with Status Badge */}\n-        {!isEditing && (\n-          <div className=\"relative\">\n-            <Badge variant=\"secondary\" className=\"absolute right-0 top-0 px-2 py-1\">\n-              {lead.status}\n-            </Badge>\n-          </div>\n-        )}\n-\n+    <Card className=\"p-6\">\n+      <div className=\"space-y-6\">\n         {/* Basic Info */}\n         {isEditing ? (\n           <div className=\"space-y-3\">\n             <div>\n@@ -255,13 +174,10 @@\n               />\n             </div>\n           </div>\n         ) : (\n-          <div className=\"flex flex-col items-center\">\n-            <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center text-primary text-xl font-bold mb-2\">\n-              {lead.firstName.charAt(0)}{lead.lastName.charAt(0)}\n-            </div>\n-            <h2 className=\"text-2xl font-bold mb-1\">{lead.firstName} {lead.lastName}</h2>\n+          <div>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n             <div className=\"flex items-center text-muted-foreground\">\n               <Building2 className=\"w-4 h-4 mr-2\" />\n               {lead.company}\n             </div>\n@@ -298,41 +214,22 @@\n               </div>\n             </>\n           ) : (\n             <>\n-              <div className=\"flex items-center justify-center text-xl font-bold text-primary mt-2\">\n+              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n+                {lead.status}\n+              </Badge>\n+              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n                 <DollarSign className=\"w-5 h-5\" />\n                 {lead.value}\n               </div>\n             </>\n           )}\n         </div>\n \n-        {/* Quick Actions (View Mode Only) */}\n-        {!isEditing && (\n-          <div className=\"grid grid-cols-2 gap-2\">\n-            <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `mailto:${lead.email}`}>\n-              <Mail className=\"w-3 h-3 mr-1\" />\n-              Email\n-            </Button>\n-            <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `tel:${lead.phone}`}>\n-              <Phone className=\"w-3 h-3 mr-1\" />\n-              Call\n-            </Button>\n-            <Button variant=\"outline\" size=\"sm\">\n-              <CalendarClock className=\"w-3 h-3 mr-1\" />\n-              Schedule\n-            </Button>\n-            <Button variant=\"outline\" size=\"sm\">\n-              <MessageCircle className=\"w-3 h-3 mr-1\" />\n-              Text\n-            </Button>\n-          </div>\n-        )}\n-\n         {/* Contact Info */}\n         <div className=\"space-y-3\">\n-          <h3 className=\"font-medium text-sm text-muted-foreground\">Contact Information</h3>\n+          <h3 className=\"font-semibold\">Contact Information</h3>\n           {isEditing ? (\n             <div className=\"space-y-3\">\n               <div>\n                 <Label htmlFor=\"email\">Email</Label>\n@@ -374,382 +271,25 @@\n             </div>\n           )}\n         </div>\n \n-        {/* Address Information */}\n+        {/* Timeline */}\n         <div className=\"space-y-3\">\n-          <h3 className=\"font-medium text-sm text-muted-foreground\">Address Information</h3>\n-          {isEditing ? (\n-            <div className=\"space-y-2\">\n-              <div>\n-                <Label htmlFor=\"address\">Street Address</Label>\n-                <Input\n-                  id=\"address\"\n-                  name=\"address\"\n-                  value={editedLead.address || ''}\n-                  onChange={handleChange}\n-                  placeholder=\"123 Main St\"\n-                />\n-              </div>\n-              \n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"city\">City</Label>\n-                  <Input\n-                    id=\"city\"\n-                    name=\"city\"\n-                    value={editedLead.city || ''}\n-                    onChange={handleChange}\n-                    placeholder=\"City\"\n-                  />\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"state\">State/Province</Label>\n-                  <Input\n-                    id=\"state\"\n-                    name=\"state\"\n-                    value={editedLead.state || ''}\n-                    onChange={handleChange}\n-                    placeholder=\"State\"\n-                  />\n-                </div>\n-              </div>\n-              \n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"zipCode\">Zip/Postal Code</Label>\n-                  <Input\n-                    id=\"zipCode\"\n-                    name=\"zipCode\"\n-                    value={editedLead.zipCode || ''}\n-                    onChange={handleChange}\n-                    placeholder=\"Zip Code\"\n-                  />\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"country\">Country</Label>\n-                  <Select \n-                    value={editedLead.country || ''}\n-                    onValueChange={handleCountryChange}\n-                  >\n-                    <SelectTrigger id=\"country\">\n-                      <SelectValue placeholder=\"Select Country\" />\n-                    </SelectTrigger>\n-                    <SelectContent>\n-                      <SelectItem value=\"US\">United States</SelectItem>\n-                      <SelectItem value=\"CA\">Canada</SelectItem>\n-                      <SelectItem value=\"UK\">United Kingdom</SelectItem>\n-                      <SelectItem value=\"AU\">Australia</SelectItem>\n-                      <SelectItem value=\"OTHER\">Other</SelectItem>\n-                    </SelectContent>\n-                  </Select>\n-                </div>\n-              </div>\n-            </div>\n-          ) : (\n-            <div>\n-              {(lead.address || lead.city || lead.state || lead.zipCode || lead.country) ? (\n-                <div className=\"rounded-md bg-muted p-3 space-y-1\">\n-                  {lead.address && (\n-                    <div className=\"flex items-start\">\n-                      <MapPin className=\"w-4 h-4 mr-2 mt-0.5 text-muted-foreground\" />\n-                      <span>{lead.address}</span>\n-                    </div>\n-                  )}\n-                  \n-                  {(lead.city || lead.state || lead.zipCode) && (\n-                    <div className=\"flex items-start pl-6\">\n-                      <span>\n-                        {[\n-                          lead.city, \n-                          lead.state,\n-                          lead.zipCode\n-                        ].filter(Boolean).join(', ')}\n-                      </span>\n-                    </div>\n-                  )}\n-                  \n-                  {lead.country && (\n-                    <div className=\"flex items-start pl-6\">\n-                      <span>\n-                        {lead.country === \"US\" ? \"United States\" : \n-                         lead.country === \"CA\" ? \"Canada\" : \n-                         lead.country === \"UK\" ? \"United Kingdom\" : \n-                         lead.country === \"AU\" ? \"Australia\" : \n-                         lead.country === \"OTHER\" ? \"Other\" : lead.country}\n-                      </span>\n-                    </div>\n-                  )}\n-                  \n-                  {(lead.address || lead.city || lead.state) && (\n-                    <div className=\"pt-1\">\n-                      <Button \n-                        variant=\"link\" \n-                        size=\"sm\" \n-                        className=\"h-6 p-0 text-muted-foreground hover:text-primary\"\n-                        onClick={() => {\n-                          const query = encodeURIComponent(\n-                            [lead.address, lead.city, lead.state, lead.zipCode, lead.country]\n-                              .filter(Boolean)\n-                              .join(', ')\n-                          );\n-                          window.open(`https://maps.google.com/maps?q=${query}`, '_blank');\n-                        }}\n-                      >\n-                        <ExternalLink className=\"w-3 h-3 mr-1\" />\n-                        View on Maps\n-                      </Button>\n-                    </div>\n-                  )}\n-                </div>\n-              ) : (\n-                <p className=\"text-sm text-muted-foreground\">No address information</p>\n-              )}\n-            </div>\n-          )}\n-        </div>\n-\n-        {/* Lead Qualification */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-medium text-sm text-muted-foreground\">Lead Qualification</h3>\n-          {isEditing ? (\n-            <div className=\"space-y-3\">\n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"score\">Score</Label>\n-                  <Select \n-                    value={editedLead.score || ''} \n-                    onValueChange={handleScoreChange}\n-                  >\n-                    <SelectTrigger id=\"score\">\n-                      <SelectValue placeholder=\"Score\" />\n-                    </SelectTrigger>\n-                    <SelectContent>\n-                      <SelectItem value=\"A\">A - Very Likely</SelectItem>\n-                      <SelectItem value=\"B\">B - Likely</SelectItem>\n-                      <SelectItem value=\"C\">C - Possible</SelectItem>\n-                      <SelectItem value=\"D\">D - Unlikely</SelectItem>\n-                    </SelectContent>\n-                  </Select>\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"interest\">Interest</Label>\n-                  <Select \n-                    value={editedLead.interest || ''} \n-                    onValueChange={handleInterestChange}\n-                  >\n-                    <SelectTrigger id=\"interest\">\n-                      <SelectValue placeholder=\"Interest\" />\n-                    </SelectTrigger>\n-                    <SelectContent>\n-                      <SelectItem value=\"Hot\">Hot</SelectItem>\n-                      <SelectItem value=\"Warm\">Warm</SelectItem>\n-                      <SelectItem value=\"Cold\">Cold</SelectItem>\n-                    </SelectContent>\n-                  </Select>\n-                </div>\n-              </div>\n-              \n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"budget\">Budget</Label>\n-                  <Select \n-                    value={editedLead.budget || ''} \n-                    onValueChange={handleBudgetChange}\n-                  >\n-                    <SelectTrigger id=\"budget\">\n-                      <SelectValue placeholder=\"Budget\" />\n-                    </SelectTrigger>\n-                    <SelectContent>\n-                      <SelectItem value=\"Enterprise\">Enterprise</SelectItem>\n-                      <SelectItem value=\"Medium\">Medium</SelectItem>\n-                      <SelectItem value=\"Small\">Small</SelectItem>\n-                      <SelectItem value=\"Unknown\">Unknown</SelectItem>\n-                    </SelectContent>\n-                  </Select>\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"timeframe\">Timeframe</Label>\n-                  <Select \n-                    value={editedLead.timeframe || ''} \n-                    onValueChange={handleTimeframeChange}\n-                  >\n-                    <SelectTrigger id=\"timeframe\">\n-                      <SelectValue placeholder=\"Timeframe\" />\n-                    </SelectTrigger>\n-                    <SelectContent>\n-                      <SelectItem value=\"Immediate\">Immediate</SelectItem>\n-                      <SelectItem value=\"1-3 Months\">1-3 Months</SelectItem>\n-                      <SelectItem value=\"3-6 Months\">3-6 Months</SelectItem>\n-                      <SelectItem value=\"6+ Months\">6+ Months</SelectItem>\n-                      <SelectItem value=\"Unknown\">Unknown</SelectItem>\n-                    </SelectContent>\n-                  </Select>\n-                </div>\n-              </div>\n-              \n-              <div>\n-                <Label htmlFor=\"source\">Lead Source</Label>\n-                <Input\n-                  id=\"source\"\n-                  name=\"source\"\n-                  value={editedLead.source || ''}\n-                  onChange={handleChange}\n-                  placeholder=\"Website, Referral, etc.\"\n-                />\n-              </div>\n-              \n-              <div>\n-                <Label htmlFor=\"nextSteps\">Next Steps</Label>\n-                <Textarea\n-                  id=\"nextSteps\"\n-                  name=\"nextSteps\"\n-                  value={editedLead.nextSteps || ''}\n-                  onChange={handleChange}\n-                  placeholder=\"Follow up actions...\"\n-                  className=\"h-20\"\n-                />\n-              </div>\n-            </div>\n-          ) : (\n-            <div className=\"space-y-3\">\n-              <div className=\"grid grid-cols-2 gap-3\">\n-                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground\">Score</span>\n-                  <span className={`text-lg font-bold ${getScoreColor(lead.score)}`}>\n-                    {lead.score || 'N/A'}\n-                  </span>\n-                </div>\n-                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground\">Interest</span>\n-                  <span className={`text-lg font-bold ${getInterestColor(lead.interest)}`}>\n-                    {lead.interest || 'N/A'}\n-                  </span>\n-                </div>\n-              </div>\n-              \n-              <div className=\"grid grid-cols-2 gap-3\">\n-                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground\">Budget</span>\n-                  <span className=\"text-lg font-bold\">\n-                    {lead.budget || 'Unknown'}\n-                  </span>\n-                </div>\n-                <div className=\"flex flex-col items-center p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground\">Timeframe</span>\n-                  <span className=\"text-lg font-bold\">\n-                    {lead.timeframe || 'Unknown'}\n-                  </span>\n-                </div>\n-              </div>\n-              \n-              {lead.source && (\n-                <div className=\"p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground block\">Source</span>\n-                  <span>{lead.source}</span>\n-                </div>\n-              )}\n-              \n-              {lead.nextSteps && (\n-                <div className=\"p-2 rounded-md bg-background border\">\n-                  <span className=\"text-xs text-muted-foreground block\">Next Steps</span>\n-                  <p className=\"text-sm\">{lead.nextSteps}</p>\n-                </div>\n-              )}\n-            </div>\n-          )}\n-        </div>\n-\n-        {/* Tags */}\n-        <div className=\"space-y-2\">\n-          <h3 className=\"font-medium text-sm text-muted-foreground\">Tags</h3>\n-          {isEditing ? (\n-            <div className=\"space-y-2\">\n-              <div className=\"flex flex-wrap gap-1\">\n-                {(editedLead.tags || []).map((tag, index) => (\n-                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n-                    {tag}\n-                    <Button \n-                      type=\"button\"\n-                      size=\"sm\" \n-                      variant=\"ghost\" \n-                      className=\"h-4 w-4 p-0 hover:bg-transparent\"\n-                      onClick={() => removeTag(tag)}\n-                    >\n-                      <X className=\"h-3 w-3\" />\n-                    </Button>\n-                  </Badge>\n-                ))}\n-              </div>\n-              <div className=\"flex gap-2\">\n-                <Input \n-                  id=\"newTag\"\n-                  placeholder=\"Add tag...\" \n-                  value={newTag}\n-                  onChange={(e) => setNewTag(e.target.value)}\n-                  className=\"h-8\"\n-                  onKeyDown={(e) => {\n-                    if (e.key === 'Enter') {\n-                      e.preventDefault();\n-                      addTag();\n-                    }\n-                  }}\n-                />\n-                <Button type=\"button\" size=\"sm\" onClick={addTag}>Add</Button>\n-              </div>\n-            </div>\n-          ) : (\n-            <div>\n-              {lead.tags && lead.tags.length > 0 ? (\n-                <div className=\"flex flex-wrap gap-1\">\n-                  {lead.tags.map((tag, index) => (\n-                    <Badge key={index} variant=\"outline\">\n-                      {tag}\n-                    </Badge>\n-                  ))}\n-                </div>\n-              ) : (\n-                <p className=\"text-sm text-muted-foreground\">No tags</p>\n-              )}\n-            </div>\n-          )}\n-        </div>\n-\n-        {/* Timeline */}\n-        <div className=\"space-y-2\">\n-          <h3 className=\"font-medium text-sm text-muted-foreground\">Timeline</h3>\n-          <div className=\"space-y-2 text-sm\">\n+          <h3 className=\"font-semibold\">Timeline</h3>\n+          <div className=\"space-y-2 text-sm text-muted-foreground\">\n             <div className=\"flex items-center\">\n-              <Calendar className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n+              <Calendar className=\"w-4 h-4 mr-2\" />\n               Created: {formatDate(lead.createdAt)}\n             </div>\n             <div className=\"flex items-center\">\n-              <Clock className=\"w-4 h-4 mr-2 text-muted-foreground\" />\n+              <Clock className=\"w-4 h-4 mr-2\" />\n               Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n             </div>\n           </div>\n         </div>\n \n-        {/* Set Follow-up Reminder (View Mode Only) */}\n-        {!isEditing && (\n-          <div className=\"p-3 rounded-lg bg-muted\">\n-            <div className=\"flex justify-between items-center\">\n-              <div>\n-                <span className=\"text-xs text-muted-foreground block\">Last Contact</span>\n-                <span className=\"font-medium\">\n-                  {lead.lastTouchpoint ? format(new Date(lead.lastTouchpoint), 'MMM d, yyyy') : 'Never'}\n-                </span>\n-              </div>\n-              <Button size=\"sm\" variant=\"default\">\n-                <Clock className=\"w-3 h-3 mr-1\" />\n-                Set Reminder\n-              </Button>\n-            </div>\n-          </div>\n-        )}\n-\n         {/* Action Buttons */}\n-        <div className=\"space-y-3 pt-2\">\n+        <div className=\"space-y-3\">\n           {isEditing ? (\n             <div className=\"flex gap-2\">\n               <Button className=\"flex-1\" onClick={handleSave}>\n                 <Save className=\"w-4 h-4 mr-2\" />\n"
                },
                {
                    "date": 1742502167823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { Badge } from '@/components/ui/badge';\n import { Input } from '@/components/ui/input';\n import { Label } from '@/components/ui/label';\n import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n import {\n   Building2,\n   Mail,\n   Phone,\n@@ -17,9 +18,18 @@\n   Calendar,\n   Clock,\n   Save,\n   X,\n-  Trash2\n+  Trash2,\n+  Plus,\n+  Tag,\n+  Settings,\n+  FileText,\n+  Users,\n+  Briefcase,\n+  Hash,\n+  Target,\n+  Clock8\n } from 'lucide-react';\n import {\n   AlertDialog,\n   AlertDialogAction,\n"
                },
                {
                    "date": 1742502186412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,19 @@\n   const handleSave = async () => {\n     try {\n       // Format the phone number before saving\n       const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      \n+      // Process tags if they're a string (comma-separated)\n+      let processedTags = editedLead.tags;\n+      if (typeof editedLead.tags === 'string') {\n+        processedTags = (editedLead.tags as string).split(',').map(tag => tag.trim()).filter(Boolean);\n+      }\n+      \n       const updatedLead = {\n         ...editedLead,\n-        phone: formattedPhone\n+        phone: formattedPhone,\n+        tags: processedTags\n       };\n       \n       // Save changes to the backend\n       await updateLead(lead.id, updatedLead);\n@@ -149,8 +157,58 @@\n       setIsDeleting(false);\n     }\n   };\n \n+  // Handle changes in nested objects like socialProfiles\n+  const handleNestedChange = (objectName: string, propertyName: string, value: string) => {\n+    setEditedLead(prev => ({\n+      ...prev,\n+      [objectName]: {\n+        ...(prev[objectName as keyof typeof prev] || {}),\n+        [propertyName]: value\n+      }\n+    }));\n+  };\n+\n+  // Handle changes for textarea elements\n+  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n+    const { name, value } = e.target;\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  // Handle select changes\n+  const handleSelectChange = (name: string, value: string) => {\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  // Add a custom field\n+  const addCustomField = () => {\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: [...(prev.customFields || []), { key: '', value: '' }]\n+    }));\n+  };\n+\n+  // Update a custom field\n+  const updateCustomField = (index: number, field: 'key' | 'value', value: string) => {\n+    const updatedFields = [...(editedLead.customFields || [])];\n+    updatedFields[index][field] = value;\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: updatedFields\n+    }));\n+  };\n+\n+  // Remove a custom field\n+  const removeCustomField = (index: number) => {\n+    const updatedFields = [...(editedLead.customFields || [])];\n+    updatedFields.splice(index, 1);\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: updatedFields\n+    }));\n+  };\n+\n   return (\n     <Card className=\"p-6\">\n       <div className=\"space-y-6\">\n         {/* Basic Info */}\n"
                },
                {
                    "date": 1742502209047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,15 +159,18 @@\n   };\n \n   // Handle changes in nested objects like socialProfiles\n   const handleNestedChange = (objectName: string, propertyName: string, value: string) => {\n-    setEditedLead(prev => ({\n-      ...prev,\n-      [objectName]: {\n-        ...(prev[objectName as keyof typeof prev] || {}),\n-        [propertyName]: value\n-      }\n-    }));\n+    setEditedLead(prev => {\n+      const currentObject = prev[objectName as keyof typeof prev] as Record<string, string> || {};\n+      return {\n+        ...prev,\n+        [objectName]: {\n+          ...currentObject,\n+          [propertyName]: value\n+        }\n+      };\n+    });\n   };\n \n   // Handle changes for textarea elements\n   const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n@@ -320,8 +323,59 @@\n                 <div className=\"text-xs text-muted-foreground mt-1\">\n                   Format: +1 (###) ###-####\n                 </div>\n               </div>\n+              \n+              {/* Add address fields */}\n+              <div>\n+                <Label htmlFor=\"address\">Address</Label>\n+                <Input\n+                  id=\"address\"\n+                  name=\"address\"\n+                  value={editedLead.address || ''}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"city\">City</Label>\n+                  <Input\n+                    id=\"city\"\n+                    name=\"city\"\n+                    value={editedLead.city || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"zipCode\">Zip Code</Label>\n+                  <Input\n+                    id=\"zipCode\"\n+                    name=\"zipCode\"\n+                    value={editedLead.zipCode || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+              </div>\n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"state\">State</Label>\n+                  <Input\n+                    id=\"state\"\n+                    name=\"state\"\n+                    value={editedLead.state || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"country\">Country</Label>\n+                  <Input\n+                    id=\"country\"\n+                    name=\"country\"\n+                    value={editedLead.country || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+              </div>\n             </div>\n           ) : (\n             <div className=\"space-y-2\">\n               <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n@@ -335,8 +389,26 @@\n                   <Phone className=\"w-4 h-4 mr-2\" />\n                   {lead.phone}\n                 </a>\n               </Button>\n+              \n+              {/* Display address if available */}\n+              {(lead.address || lead.city || lead.state || lead.zipCode || lead.country) && (\n+                <div className=\"px-3 py-2 text-sm\">\n+                  <div className=\"flex items-start\">\n+                    <MapPin className=\"w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n+                    <div>\n+                      {lead.address && <div>{lead.address}</div>}\n+                      {(lead.city || lead.state || lead.zipCode) && (\n+                        <div>\n+                          {[lead.city, lead.state, lead.zipCode].filter(Boolean).join(', ')}\n+                        </div>\n+                      )}\n+                      {lead.country && <div>{lead.country}</div>}\n+                    </div>\n+                  </div>\n+                </div>\n+              )}\n             </div>\n           )}\n         </div>\n \n"
                },
                {
                    "date": 1742502228535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,568 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Badge } from '@/components/ui/badge';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n+import { Textarea } from '@/components/ui/textarea';\n+import {\n+  Building2,\n+  Mail,\n+  Phone,\n+  MapPin,\n+  Globe,\n+  DollarSign,\n+  Calendar,\n+  Clock,\n+  Save,\n+  X,\n+  Trash2,\n+  Plus,\n+  Tag,\n+  Settings,\n+  FileText,\n+  Users,\n+  Briefcase,\n+  Hash,\n+  Target,\n+  Clock8\n+} from 'lucide-react';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { format } from 'date-fns';\n+import { Lead } from '@/data/leads';\n+import { useRouter } from 'next/navigation';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n+import { updateLead, deleteLead } from '@/lib/services/leads-service';\n+import { toast } from '@/hooks/use-toast';\n+\n+interface LeadProfileProps {\n+  lead: Lead;\n+  isEditMode?: boolean;\n+}\n+\n+export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n+  const router = useRouter();\n+  const [editedLead, setEditedLead] = useState({ ...lead });\n+  const [isEditing, setIsEditing] = useState(isEditMode);\n+  const [isDeleting, setIsDeleting] = useState(false);\n+\n+  useEffect(() => {\n+    setIsEditing(isEditMode);\n+  }, [isEditMode]);\n+\n+  const formatDate = (dateString: string) => {\n+    return format(new Date(dateString), 'MMMM d, yyyy');\n+  };\n+\n+  const handleSave = async () => {\n+    try {\n+      // Format the phone number before saving\n+      const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      \n+      // Process tags if they're a string (comma-separated)\n+      let processedTags = editedLead.tags;\n+      if (typeof editedLead.tags === 'string') {\n+        processedTags = (editedLead.tags as string).split(',').map(tag => tag.trim()).filter(Boolean);\n+      }\n+      \n+      const updatedLead = {\n+        ...editedLead,\n+        phone: formattedPhone,\n+        tags: processedTags\n+      };\n+      \n+      // Save changes to the backend\n+      await updateLead(lead.id, updatedLead);\n+      \n+      // Show success message\n+      toast({\n+        title: \"Success\",\n+        description: \"Lead information has been updated.\",\n+      });\n+      \n+      // After saving, exit edit mode and navigate to the non-edit view\n+      setIsEditing(false);\n+      router.push(`/dashboard/leads/${lead.id}`);\n+    } catch (error) {\n+      console.error('Error updating lead:', error);\n+      \n+      // Show error message\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to update lead information. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  const handleCancel = () => {\n+    // Reset changes and exit edit mode\n+    setEditedLead({ ...lead });\n+    setIsEditing(false);\n+    router.push(`/dashboard/leads/${lead.id}`);\n+  };\n+\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const { name, value } = e.target;\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n+    const value = e.target.value;\n+    if (isValidPhoneNumber(value)) {\n+      setEditedLead(prev => ({ \n+        ...prev, \n+        phone: formatPhoneNumber(value)\n+      }));\n+    }\n+  };\n+\n+  const handleStatusChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, status: value }));\n+  };\n+\n+  const handleDelete = async () => {\n+    try {\n+      setIsDeleting(true);\n+      await deleteLead(lead.id);\n+      \n+      toast({\n+        title: \"Success\",\n+        description: \"Lead has been deleted successfully.\",\n+      });\n+      \n+      // Redirect to leads list after deletion\n+      router.push('/dashboard/leads');\n+    } catch (error) {\n+      console.error('Error deleting lead:', error);\n+      \n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to delete the lead. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+      setIsDeleting(false);\n+    }\n+  };\n+\n+  // Handle changes in nested objects like socialProfiles\n+  const handleNestedChange = (objectName: string, propertyName: string, value: string) => {\n+    setEditedLead(prev => {\n+      const currentObject = prev[objectName as keyof typeof prev] as Record<string, string> || {};\n+      return {\n+        ...prev,\n+        [objectName]: {\n+          ...currentObject,\n+          [propertyName]: value\n+        }\n+      };\n+    });\n+  };\n+\n+  // Handle changes for textarea elements\n+  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n+    const { name, value } = e.target;\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  // Handle select changes\n+  const handleSelectChange = (name: string, value: string) => {\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  // Add a custom field\n+  const addCustomField = () => {\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: [...(prev.customFields || []), { key: '', value: '' }]\n+    }));\n+  };\n+\n+  // Update a custom field\n+  const updateCustomField = (index: number, field: 'key' | 'value', value: string) => {\n+    const updatedFields = [...(editedLead.customFields || [])];\n+    updatedFields[index][field] = value;\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: updatedFields\n+    }));\n+  };\n+\n+  // Remove a custom field\n+  const removeCustomField = (index: number) => {\n+    const updatedFields = [...(editedLead.customFields || [])];\n+    updatedFields.splice(index, 1);\n+    setEditedLead(prev => ({\n+      ...prev,\n+      customFields: updatedFields\n+    }));\n+  };\n+\n+  return (\n+    <Card className=\"p-6\">\n+      <div className=\"space-y-6\">\n+        {/* Basic Info */}\n+        {isEditing ? (\n+          <div className=\"space-y-3\">\n+            <div>\n+              <Label htmlFor=\"firstName\">First Name</Label>\n+              <Input \n+                id=\"firstName\" \n+                name=\"firstName\" \n+                value={editedLead.firstName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"lastName\">Last Name</Label>\n+              <Input \n+                id=\"lastName\" \n+                name=\"lastName\" \n+                value={editedLead.lastName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"company\">Company</Label>\n+              <Input \n+                id=\"company\" \n+                name=\"company\" \n+                value={editedLead.company} \n+                onChange={handleChange}\n+              />\n+            </div>\n+          </div>\n+        ) : (\n+          <div>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n+            <div className=\"flex items-center text-muted-foreground\">\n+              <Building2 className=\"w-4 h-4 mr-2\" />\n+              {lead.company}\n+            </div>\n+          </div>\n+        )}\n+\n+        {/* Status and Value */}\n+        <div className=\"space-y-2\">\n+          {isEditing ? (\n+            <>\n+              <Label htmlFor=\"status\">Status</Label>\n+              <Select \n+                value={editedLead.status} \n+                onValueChange={handleStatusChange}\n+              >\n+                <SelectTrigger id=\"status\">\n+                  <SelectValue placeholder=\"Select status\" />\n+                </SelectTrigger>\n+                <SelectContent>\n+                  <SelectItem value=\"New\">New</SelectItem>\n+                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n+                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n+                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n+                </SelectContent>\n+              </Select>\n+              <div className=\"mt-3\">\n+                <Label htmlFor=\"value\">Value</Label>\n+                <Input\n+                  id=\"value\"\n+                  name=\"value\"\n+                  value={editedLead.value}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+            </>\n+          ) : (\n+            <>\n+              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n+                {lead.status}\n+              </Badge>\n+              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n+                <DollarSign className=\"w-5 h-5\" />\n+                {lead.value}\n+              </div>\n+            </>\n+          )}\n+        </div>\n+\n+        {/* Contact Info */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Contact Information</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"email\">Email</Label>\n+                <Input\n+                  id=\"email\"\n+                  name=\"email\"\n+                  value={editedLead.email}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"phone\">Phone</Label>\n+                <Input\n+                  id=\"phone\"\n+                  name=\"phone\"\n+                  value={editedLead.phone}\n+                  onChange={handleChange}\n+                  onBlur={handlePhoneBlur}\n+                />\n+                <div className=\"text-xs text-muted-foreground mt-1\">\n+                  Format: +1 (###) ###-####\n+                </div>\n+              </div>\n+              \n+              {/* Add address fields */}\n+              <div>\n+                <Label htmlFor=\"address\">Address</Label>\n+                <Input\n+                  id=\"address\"\n+                  name=\"address\"\n+                  value={editedLead.address || ''}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"city\">City</Label>\n+                  <Input\n+                    id=\"city\"\n+                    name=\"city\"\n+                    value={editedLead.city || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"zipCode\">Zip Code</Label>\n+                  <Input\n+                    id=\"zipCode\"\n+                    name=\"zipCode\"\n+                    value={editedLead.zipCode || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+              </div>\n+              <div className=\"grid grid-cols-2 gap-2\">\n+                <div>\n+                  <Label htmlFor=\"state\">State</Label>\n+                  <Input\n+                    id=\"state\"\n+                    name=\"state\"\n+                    value={editedLead.state || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+                <div>\n+                  <Label htmlFor=\"country\">Country</Label>\n+                  <Input\n+                    id=\"country\"\n+                    name=\"country\"\n+                    value={editedLead.country || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2\">\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`mailto:${lead.email}`}>\n+                  <Mail className=\"w-4 h-4 mr-2\" />\n+                  {lead.email}\n+                </a>\n+              </Button>\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`tel:${lead.phone}`}>\n+                  <Phone className=\"w-4 h-4 mr-2\" />\n+                  {lead.phone}\n+                </a>\n+              </Button>\n+              \n+              {/* Display address if available */}\n+              {(lead.address || lead.city || lead.state || lead.zipCode || lead.country) && (\n+                <div className=\"px-3 py-2 text-sm\">\n+                  <div className=\"flex items-start\">\n+                    <MapPin className=\"w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n+                    <div>\n+                      {lead.address && <div>{lead.address}</div>}\n+                      {(lead.city || lead.state || lead.zipCode) && (\n+                        <div>\n+                          {[lead.city, lead.state, lead.zipCode].filter(Boolean).join(', ')}\n+                        </div>\n+                      )}\n+                      {lead.country && <div>{lead.country}</div>}\n+                    </div>\n+                  </div>\n+                </div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Lead Source */}\n+        <div className=\"space-y-3 mt-4\">\n+          <h3 className=\"font-semibold\">Lead Source</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"source\">Source</Label>\n+                <Select\n+                  value={editedLead.source || ''}\n+                  onValueChange={(value) => handleSelectChange('source', value)}\n+                >\n+                  <SelectTrigger id=\"source\">\n+                    <SelectValue placeholder=\"Select lead source\" />\n+                  </SelectTrigger>\n+                  <SelectContent>\n+                    <SelectItem value=\"website\">Website</SelectItem>\n+                    <SelectItem value=\"referral\">Referral</SelectItem>\n+                    <SelectItem value=\"social_media\">Social Media</SelectItem>\n+                    <SelectItem value=\"email_campaign\">Email Campaign</SelectItem>\n+                    <SelectItem value=\"advertising\">Advertising</SelectItem>\n+                    <SelectItem value=\"event\">Event</SelectItem>\n+                    <SelectItem value=\"cold_call\">Cold Call</SelectItem>\n+                    <SelectItem value=\"other\">Other</SelectItem>\n+                  </SelectContent>\n+                </Select>\n+              </div>\n+              \n+              {editedLead.source === \"referral\" && (\n+                <div>\n+                  <Label htmlFor=\"referredBy\">Referred By</Label>\n+                  <Input\n+                    id=\"referredBy\"\n+                    name=\"referredBy\"\n+                    value={editedLead.referredBy || ''}\n+                    onChange={handleChange}\n+                  />\n+                </div>\n+              )}\n+              \n+              <div>\n+                <Label htmlFor=\"campaign\">Campaign</Label>\n+                <Input\n+                  id=\"campaign\"\n+                  name=\"campaign\"\n+                  value={editedLead.campaign || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"e.g. Summer Promo 2023\"\n+                />\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2 px-3 py-2 text-sm\">\n+              {lead.source ? (\n+                <>\n+                  <div className=\"flex items-center\">\n+                    <div className=\"font-medium mr-2\">Source:</div>\n+                    <Badge variant=\"outline\" className=\"capitalize\">\n+                      {lead.source.replace(/_/g, ' ')}\n+                    </Badge>\n+                  </div>\n+                  \n+                  {lead.referredBy && (\n+                    <div className=\"flex items-center\">\n+                      <div className=\"font-medium mr-2\">Referred by:</div>\n+                      <span>{lead.referredBy}</span>\n+                    </div>\n+                  )}\n+                  \n+                  {lead.campaign && (\n+                    <div className=\"flex items-center\">\n+                      <div className=\"font-medium mr-2\">Campaign:</div>\n+                      <Badge variant=\"secondary\">{lead.campaign}</Badge>\n+                    </div>\n+                  )}\n+                </>\n+              ) : (\n+                <div className=\"text-muted-foreground\">No source information added</div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Timeline */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Timeline</h3>\n+          <div className=\"space-y-2 text-sm text-muted-foreground\">\n+            <div className=\"flex items-center\">\n+              <Calendar className=\"w-4 h-4 mr-2\" />\n+              Created: {formatDate(lead.createdAt)}\n+            </div>\n+            <div className=\"flex items-center\">\n+              <Clock className=\"w-4 h-4 mr-2\" />\n+              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Action Buttons */}\n+        <div className=\"space-y-3\">\n+          {isEditing ? (\n+            <div className=\"flex gap-2\">\n+              <Button className=\"flex-1\" onClick={handleSave}>\n+                <Save className=\"w-4 h-4 mr-2\" />\n+                Save\n+              </Button>\n+              <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n+                <X className=\"w-4 h-4 mr-2\" />\n+                Cancel\n+              </Button>\n+            </div>\n+          ) : (\n+            <div className=\"flex gap-2\">\n+              <Button \n+                variant=\"outline\" \n+                className=\"flex-1\" \n+                onClick={() => router.push(`/dashboard/leads/${lead.id}?edit=true`)}\n+              >\n+                Edit Profile\n+              </Button>\n+              \n+              <AlertDialog>\n+                <AlertDialogTrigger asChild>\n+                  <Button variant=\"destructive\" disabled={isDeleting}>\n+                    <Trash2 className=\"w-4 h-4 mr-2\" />\n+                    Delete Lead\n+                  </Button>\n+                </AlertDialogTrigger>\n+                <AlertDialogContent>\n+                  <AlertDialogHeader>\n+                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n+                    <AlertDialogDescription>\n+                      This action cannot be undone. This will permanently delete the lead\n+                      and all associated information.\n+                    </AlertDialogDescription>\n+                  </AlertDialogHeader>\n+                  <AlertDialogFooter>\n+                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                    <AlertDialogAction\n+                      onClick={handleDelete}\n+                      className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n+                      disabled={isDeleting}\n+                    >\n+                      {isDeleting ? \"Deleting...\" : \"Delete\"}\n+                    </AlertDialogAction>\n+                  </AlertDialogFooter>\n+                </AlertDialogContent>\n+              </AlertDialog>\n+            </div>\n+          )}\n+        </div>\n+      </div>\n+    </Card>\n+  );\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1742502241636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -493,489 +493,36 @@\n             </div>\n           )}\n         </div>\n \n-        {/* Timeline */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Timeline</h3>\n-          <div className=\"space-y-2 text-sm text-muted-foreground\">\n-            <div className=\"flex items-center\">\n-              <Calendar className=\"w-4 h-4 mr-2\" />\n-              Created: {formatDate(lead.createdAt)}\n-            </div>\n-            <div className=\"flex items-center\">\n-              <Clock className=\"w-4 h-4 mr-2\" />\n-              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n-            </div>\n-          </div>\n-        </div>\n-\n-        {/* Action Buttons */}\n-        <div className=\"space-y-3\">\n+        {/* Tags */}\n+        <div className=\"space-y-3 mt-4\">\n+          <h3 className=\"font-semibold\">Tags</h3>\n           {isEditing ? (\n-            <div className=\"flex gap-2\">\n-              <Button className=\"flex-1\" onClick={handleSave}>\n-                <Save className=\"w-4 h-4 mr-2\" />\n-                Save\n-              </Button>\n-              <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n-                <X className=\"w-4 h-4 mr-2\" />\n-                Cancel\n-              </Button>\n-            </div>\n-          ) : (\n-            <div className=\"flex gap-2\">\n-              <Button \n-                variant=\"outline\" \n-                className=\"flex-1\" \n-                onClick={() => router.push(`/dashboard/leads/${lead.id}?edit=true`)}\n-              >\n-                Edit Profile\n-              </Button>\n-              \n-              <AlertDialog>\n-                <AlertDialogTrigger asChild>\n-                  <Button variant=\"destructive\" disabled={isDeleting}>\n-                    <Trash2 className=\"w-4 h-4 mr-2\" />\n-                    Delete Lead\n-                  </Button>\n-                </AlertDialogTrigger>\n-                <AlertDialogContent>\n-                  <AlertDialogHeader>\n-                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n-                    <AlertDialogDescription>\n-                      This action cannot be undone. This will permanently delete the lead\n-                      and all associated information.\n-                    </AlertDialogDescription>\n-                  </AlertDialogHeader>\n-                  <AlertDialogFooter>\n-                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n-                    <AlertDialogAction\n-                      onClick={handleDelete}\n-                      className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n-                      disabled={isDeleting}\n-                    >\n-                      {isDeleting ? \"Deleting...\" : \"Delete\"}\n-                    </AlertDialogAction>\n-                  </AlertDialogFooter>\n-                </AlertDialogContent>\n-              </AlertDialog>\n-            </div>\n-          )}\n-        </div>\n-      </div>\n-    </Card>\n-  );\n-}\n-\"use client\";\n-\n-import { useState, useEffect } from 'react';\n-import { Card } from '@/components/ui/card';\n-import { Button } from '@/components/ui/button';\n-import { Badge } from '@/components/ui/badge';\n-import { Input } from '@/components/ui/input';\n-import { Label } from '@/components/ui/label';\n-import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n-import { Textarea } from '@/components/ui/textarea';\n-import {\n-  Building2,\n-  Mail,\n-  Phone,\n-  MapPin,\n-  Globe,\n-  DollarSign,\n-  Calendar,\n-  Clock,\n-  Save,\n-  X,\n-  Trash2,\n-  Plus,\n-  Tag,\n-  Settings,\n-  FileText,\n-  Users,\n-  Briefcase,\n-  Hash,\n-  Target,\n-  Clock8\n-} from 'lucide-react';\n-import {\n-  AlertDialog,\n-  AlertDialogAction,\n-  AlertDialogCancel,\n-  AlertDialogContent,\n-  AlertDialogDescription,\n-  AlertDialogFooter,\n-  AlertDialogHeader,\n-  AlertDialogTitle,\n-  AlertDialogTrigger,\n-} from \"@/components/ui/alert-dialog\";\n-import { format } from 'date-fns';\n-import { Lead } from '@/data/leads';\n-import { useRouter } from 'next/navigation';\n-import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n-import { updateLead, deleteLead } from '@/lib/services/leads-service';\n-import { toast } from '@/hooks/use-toast';\n-\n-interface LeadProfileProps {\n-  lead: Lead;\n-  isEditMode?: boolean;\n-}\n-\n-export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n-  const router = useRouter();\n-  const [editedLead, setEditedLead] = useState({ ...lead });\n-  const [isEditing, setIsEditing] = useState(isEditMode);\n-  const [isDeleting, setIsDeleting] = useState(false);\n-\n-  useEffect(() => {\n-    setIsEditing(isEditMode);\n-  }, [isEditMode]);\n-\n-  const formatDate = (dateString: string) => {\n-    return format(new Date(dateString), 'MMMM d, yyyy');\n-  };\n-\n-  const handleSave = async () => {\n-    try {\n-      // Format the phone number before saving\n-      const formattedPhone = formatPhoneNumber(editedLead.phone);\n-      \n-      // Process tags if they're a string (comma-separated)\n-      let processedTags = editedLead.tags;\n-      if (typeof editedLead.tags === 'string') {\n-        processedTags = (editedLead.tags as string).split(',').map(tag => tag.trim()).filter(Boolean);\n-      }\n-      \n-      const updatedLead = {\n-        ...editedLead,\n-        phone: formattedPhone,\n-        tags: processedTags\n-      };\n-      \n-      // Save changes to the backend\n-      await updateLead(lead.id, updatedLead);\n-      \n-      // Show success message\n-      toast({\n-        title: \"Success\",\n-        description: \"Lead information has been updated.\",\n-      });\n-      \n-      // After saving, exit edit mode and navigate to the non-edit view\n-      setIsEditing(false);\n-      router.push(`/dashboard/leads/${lead.id}`);\n-    } catch (error) {\n-      console.error('Error updating lead:', error);\n-      \n-      // Show error message\n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to update lead information. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-    }\n-  };\n-\n-  const handleCancel = () => {\n-    // Reset changes and exit edit mode\n-    setEditedLead({ ...lead });\n-    setIsEditing(false);\n-    router.push(`/dashboard/leads/${lead.id}`);\n-  };\n-\n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n-    const { name, value } = e.target;\n-    setEditedLead(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n-    const value = e.target.value;\n-    if (isValidPhoneNumber(value)) {\n-      setEditedLead(prev => ({ \n-        ...prev, \n-        phone: formatPhoneNumber(value)\n-      }));\n-    }\n-  };\n-\n-  const handleStatusChange = (value: string) => {\n-    setEditedLead(prev => ({ ...prev, status: value }));\n-  };\n-\n-  const handleDelete = async () => {\n-    try {\n-      setIsDeleting(true);\n-      await deleteLead(lead.id);\n-      \n-      toast({\n-        title: \"Success\",\n-        description: \"Lead has been deleted successfully.\",\n-      });\n-      \n-      // Redirect to leads list after deletion\n-      router.push('/dashboard/leads');\n-    } catch (error) {\n-      console.error('Error deleting lead:', error);\n-      \n-      toast({\n-        title: \"Error\",\n-        description: \"Failed to delete the lead. Please try again.\",\n-        variant: \"destructive\",\n-      });\n-      setIsDeleting(false);\n-    }\n-  };\n-\n-  // Handle changes in nested objects like socialProfiles\n-  const handleNestedChange = (objectName: string, propertyName: string, value: string) => {\n-    setEditedLead(prev => {\n-      const currentObject = prev[objectName as keyof typeof prev] as Record<string, string> || {};\n-      return {\n-        ...prev,\n-        [objectName]: {\n-          ...currentObject,\n-          [propertyName]: value\n-        }\n-      };\n-    });\n-  };\n-\n-  // Handle changes for textarea elements\n-  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n-    const { name, value } = e.target;\n-    setEditedLead(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  // Handle select changes\n-  const handleSelectChange = (name: string, value: string) => {\n-    setEditedLead(prev => ({ ...prev, [name]: value }));\n-  };\n-\n-  // Add a custom field\n-  const addCustomField = () => {\n-    setEditedLead(prev => ({\n-      ...prev,\n-      customFields: [...(prev.customFields || []), { key: '', value: '' }]\n-    }));\n-  };\n-\n-  // Update a custom field\n-  const updateCustomField = (index: number, field: 'key' | 'value', value: string) => {\n-    const updatedFields = [...(editedLead.customFields || [])];\n-    updatedFields[index][field] = value;\n-    setEditedLead(prev => ({\n-      ...prev,\n-      customFields: updatedFields\n-    }));\n-  };\n-\n-  // Remove a custom field\n-  const removeCustomField = (index: number) => {\n-    const updatedFields = [...(editedLead.customFields || [])];\n-    updatedFields.splice(index, 1);\n-    setEditedLead(prev => ({\n-      ...prev,\n-      customFields: updatedFields\n-    }));\n-  };\n-\n-  return (\n-    <Card className=\"p-6\">\n-      <div className=\"space-y-6\">\n-        {/* Basic Info */}\n-        {isEditing ? (\n-          <div className=\"space-y-3\">\n             <div>\n-              <Label htmlFor=\"firstName\">First Name</Label>\n-              <Input \n-                id=\"firstName\" \n-                name=\"firstName\" \n-                value={editedLead.firstName} \n+              <Label htmlFor=\"tags\">Tags (comma separated)</Label>\n+              <Input\n+                id=\"tags\"\n+                name=\"tags\"\n+                value={Array.isArray(editedLead.tags) ? editedLead.tags.join(', ') : editedLead.tags || ''}\n                 onChange={handleChange}\n+                placeholder=\"e.g. VIP, Needs followup, Long-term\"\n               />\n-            </div>\n-            <div>\n-              <Label htmlFor=\"lastName\">Last Name</Label>\n-              <Input \n-                id=\"lastName\" \n-                name=\"lastName\" \n-                value={editedLead.lastName} \n-                onChange={handleChange}\n-              />\n-            </div>\n-            <div>\n-              <Label htmlFor=\"company\">Company</Label>\n-              <Input \n-                id=\"company\" \n-                name=\"company\" \n-                value={editedLead.company} \n-                onChange={handleChange}\n-              />\n-            </div>\n-          </div>\n-        ) : (\n-          <div>\n-            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n-            <div className=\"flex items-center text-muted-foreground\">\n-              <Building2 className=\"w-4 h-4 mr-2\" />\n-              {lead.company}\n-            </div>\n-          </div>\n-        )}\n-\n-        {/* Status and Value */}\n-        <div className=\"space-y-2\">\n-          {isEditing ? (\n-            <>\n-              <Label htmlFor=\"status\">Status</Label>\n-              <Select \n-                value={editedLead.status} \n-                onValueChange={handleStatusChange}\n-              >\n-                <SelectTrigger id=\"status\">\n-                  <SelectValue placeholder=\"Select status\" />\n-                </SelectTrigger>\n-                <SelectContent>\n-                  <SelectItem value=\"New\">New</SelectItem>\n-                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n-                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n-                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n-                </SelectContent>\n-              </Select>\n-              <div className=\"mt-3\">\n-                <Label htmlFor=\"value\">Value</Label>\n-                <Input\n-                  id=\"value\"\n-                  name=\"value\"\n-                  value={editedLead.value}\n-                  onChange={handleChange}\n-                />\n+              <div className=\"text-xs text-muted-foreground mt-1\">\n+                Separate multiple tags with commas\n               </div>\n-            </>\n-          ) : (\n-            <>\n-              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n-                {lead.status}\n-              </Badge>\n-              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n-                <DollarSign className=\"w-5 h-5\" />\n-                {lead.value}\n-              </div>\n-            </>\n-          )}\n-        </div>\n-\n-        {/* Contact Info */}\n-        <div className=\"space-y-3\">\n-          <h3 className=\"font-semibold\">Contact Information</h3>\n-          {isEditing ? (\n-            <div className=\"space-y-3\">\n-              <div>\n-                <Label htmlFor=\"email\">Email</Label>\n-                <Input\n-                  id=\"email\"\n-                  name=\"email\"\n-                  value={editedLead.email}\n-                  onChange={handleChange}\n-                />\n-              </div>\n-              <div>\n-                <Label htmlFor=\"phone\">Phone</Label>\n-                <Input\n-                  id=\"phone\"\n-                  name=\"phone\"\n-                  value={editedLead.phone}\n-                  onChange={handleChange}\n-                  onBlur={handlePhoneBlur}\n-                />\n-                <div className=\"text-xs text-muted-foreground mt-1\">\n-                  Format: +1 (###) ###-####\n-                </div>\n-              </div>\n-              \n-              {/* Add address fields */}\n-              <div>\n-                <Label htmlFor=\"address\">Address</Label>\n-                <Input\n-                  id=\"address\"\n-                  name=\"address\"\n-                  value={editedLead.address || ''}\n-                  onChange={handleChange}\n-                />\n-              </div>\n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"city\">City</Label>\n-                  <Input\n-                    id=\"city\"\n-                    name=\"city\"\n-                    value={editedLead.city || ''}\n-                    onChange={handleChange}\n-                  />\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"zipCode\">Zip Code</Label>\n-                  <Input\n-                    id=\"zipCode\"\n-                    name=\"zipCode\"\n-                    value={editedLead.zipCode || ''}\n-                    onChange={handleChange}\n-                  />\n-                </div>\n-              </div>\n-              <div className=\"grid grid-cols-2 gap-2\">\n-                <div>\n-                  <Label htmlFor=\"state\">State</Label>\n-                  <Input\n-                    id=\"state\"\n-                    name=\"state\"\n-                    value={editedLead.state || ''}\n-                    onChange={handleChange}\n-                  />\n-                </div>\n-                <div>\n-                  <Label htmlFor=\"country\">Country</Label>\n-                  <Input\n-                    id=\"country\"\n-                    name=\"country\"\n-                    value={editedLead.country || ''}\n-                    onChange={handleChange}\n-                  />\n-                </div>\n-              </div>\n             </div>\n           ) : (\n-            <div className=\"space-y-2\">\n-              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n-                <a href={`mailto:${lead.email}`}>\n-                  <Mail className=\"w-4 h-4 mr-2\" />\n-                  {lead.email}\n-                </a>\n-              </Button>\n-              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n-                <a href={`tel:${lead.phone}`}>\n-                  <Phone className=\"w-4 h-4 mr-2\" />\n-                  {lead.phone}\n-                </a>\n-              </Button>\n-              \n-              {/* Display address if available */}\n-              {(lead.address || lead.city || lead.state || lead.zipCode || lead.country) && (\n-                <div className=\"px-3 py-2 text-sm\">\n-                  <div className=\"flex items-start\">\n-                    <MapPin className=\"w-4 h-4 mr-2 mt-0.5 flex-shrink-0\" />\n-                    <div>\n-                      {lead.address && <div>{lead.address}</div>}\n-                      {(lead.city || lead.state || lead.zipCode) && (\n-                        <div>\n-                          {[lead.city, lead.state, lead.zipCode].filter(Boolean).join(', ')}\n-                        </div>\n-                      )}\n-                      {lead.country && <div>{lead.country}</div>}\n-                    </div>\n-                  </div>\n-                </div>\n+            <div className=\"flex flex-wrap gap-1 px-3 py-2\">\n+              {lead.tags && lead.tags.length > 0 ? (\n+                lead.tags.map((tag, index) => (\n+                  <Badge key={index} variant=\"secondary\" className=\"mb-1\">\n+                    <Tag className=\"w-3 h-3 mr-1\" />\n+                    {tag}\n+                  </Badge>\n+                ))\n+              ) : (\n+                <div className=\"text-sm text-muted-foreground\">No tags</div>\n               )}\n             </div>\n           )}\n         </div>\n"
                },
                {
                    "date": 1742502282779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,8 +526,104 @@\n             </div>\n           )}\n         </div>\n \n+        {/* Social Profiles */}\n+        <div className=\"space-y-3 mt-4\">\n+          <h3 className=\"font-semibold\">Social Profiles</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"linkedin\">LinkedIn</Label>\n+                <Input\n+                  id=\"linkedin\"\n+                  placeholder=\"https://linkedin.com/in/username\"\n+                  value={editedLead.socialProfiles?.linkedin || ''}\n+                  onChange={(e) => handleNestedChange('socialProfiles', 'linkedin', e.target.value)}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"twitter\">Twitter</Label>\n+                <Input\n+                  id=\"twitter\"\n+                  placeholder=\"https://twitter.com/username\"\n+                  value={editedLead.socialProfiles?.twitter || ''}\n+                  onChange={(e) => handleNestedChange('socialProfiles', 'twitter', e.target.value)}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"facebook\">Facebook</Label>\n+                <Input\n+                  id=\"facebook\"\n+                  placeholder=\"https://facebook.com/username\"\n+                  value={editedLead.socialProfiles?.facebook || ''}\n+                  onChange={(e) => handleNestedChange('socialProfiles', 'facebook', e.target.value)}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"instagram\">Instagram</Label>\n+                <Input\n+                  id=\"instagram\"\n+                  placeholder=\"https://instagram.com/username\"\n+                  value={editedLead.socialProfiles?.instagram || ''}\n+                  onChange={(e) => handleNestedChange('socialProfiles', 'instagram', e.target.value)}\n+                />\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2\">\n+              {lead.socialProfiles?.linkedin && (\n+                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                  <a href={lead.socialProfiles.linkedin} target=\"_blank\" rel=\"noopener noreferrer\">\n+                    <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n+                      <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n+                    </svg>\n+                    LinkedIn\n+                  </a>\n+                </Button>\n+              )}\n+              \n+              {lead.socialProfiles?.twitter && (\n+                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                  <a href={lead.socialProfiles.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n+                    <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n+                      <path d=\"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"/>\n+                    </svg>\n+                    Twitter\n+                  </a>\n+                </Button>\n+              )}\n+              \n+              {lead.socialProfiles?.facebook && (\n+                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                  <a href={lead.socialProfiles.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n+                    <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n+                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n+                    </svg>\n+                    Facebook\n+                  </a>\n+                </Button>\n+              )}\n+              \n+              {lead.socialProfiles?.instagram && (\n+                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                  <a href={lead.socialProfiles.instagram} target=\"_blank\" rel=\"noopener noreferrer\">\n+                    <svg className=\"w-4 h-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n+                      <path d=\"M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z\"/>\n+                    </svg>\n+                    Instagram\n+                  </a>\n+                </Button>\n+              )}\n+              \n+              {!lead.socialProfiles?.linkedin && !lead.socialProfiles?.twitter && \n+               !lead.socialProfiles?.facebook && !lead.socialProfiles?.instagram && (\n+                <div className=\"text-sm text-muted-foreground px-3 py-2\">No social profiles added</div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n         {/* Timeline */}\n         <div className=\"space-y-3\">\n           <h3 className=\"font-semibold\">Timeline</h3>\n           <div className=\"space-y-2 text-sm text-muted-foreground\">\n"
                },
                {
                    "date": 1742502308079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -622,8 +622,119 @@\n             </div>\n           )}\n         </div>\n \n+        {/* Business Information */}\n+        <div className=\"space-y-3 mt-4\">\n+          <h3 className=\"font-semibold\">Business Information</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"website\">Website</Label>\n+                <Input\n+                  id=\"website\"\n+                  name=\"website\"\n+                  value={editedLead.website || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"https://example.com\"\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"industry\">Industry</Label>\n+                <Select\n+                  value={editedLead.industry || ''}\n+                  onValueChange={(value) => handleSelectChange('industry', value)}\n+                >\n+                  <SelectTrigger id=\"industry\">\n+                    <SelectValue placeholder=\"Select industry\" />\n+                  </SelectTrigger>\n+                  <SelectContent>\n+                    <SelectItem value=\"technology\">Technology</SelectItem>\n+                    <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n+                    <SelectItem value=\"finance\">Finance</SelectItem>\n+                    <SelectItem value=\"education\">Education</SelectItem>\n+                    <SelectItem value=\"retail\">Retail</SelectItem>\n+                    <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n+                    <SelectItem value=\"real_estate\">Real Estate</SelectItem>\n+                    <SelectItem value=\"hospitality\">Hospitality</SelectItem>\n+                    <SelectItem value=\"consulting\">Consulting</SelectItem>\n+                    <SelectItem value=\"other\">Other</SelectItem>\n+                  </SelectContent>\n+                </Select>\n+              </div>\n+              <div>\n+                <Label htmlFor=\"companySize\">Company Size</Label>\n+                <Select\n+                  value={editedLead.companySize || ''}\n+                  onValueChange={(value) => handleSelectChange('companySize', value)}\n+                >\n+                  <SelectTrigger id=\"companySize\">\n+                    <SelectValue placeholder=\"Select company size\" />\n+                  </SelectTrigger>\n+                  <SelectContent>\n+                    <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n+                    <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n+                    <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n+                    <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n+                    <SelectItem value=\"501-1000\">501-1000 employees</SelectItem>\n+                    <SelectItem value=\"1000+\">1000+ employees</SelectItem>\n+                  </SelectContent>\n+                </Select>\n+              </div>\n+              <div>\n+                <Label htmlFor=\"annualRevenue\">Annual Revenue</Label>\n+                <Input\n+                  id=\"annualRevenue\"\n+                  name=\"annualRevenue\"\n+                  value={editedLead.annualRevenue || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"e.g. $1M-$5M\"\n+                />\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2\">\n+              {lead.website && (\n+                <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                  <a href={lead.website} target=\"_blank\" rel=\"noopener noreferrer\">\n+                    <Globe className=\"w-4 h-4 mr-2\" />\n+                    {lead.website.replace(/^https?:\\/\\//, '')}\n+                  </a>\n+                </Button>\n+              )}\n+              \n+              <div className=\"px-3 py-2 text-sm space-y-1\">\n+                {lead.industry && (\n+                  <div className=\"flex items-center\">\n+                    <span className=\"font-medium mr-2\">Industry:</span>\n+                    <Badge variant=\"outline\" className=\"capitalize\">\n+                      {lead.industry.replace(/_/g, ' ')}\n+                    </Badge>\n+                  </div>\n+                )}\n+                \n+                {lead.companySize && (\n+                  <div className=\"flex items-center\">\n+                    <span className=\"font-medium mr-2\">Company Size:</span>\n+                    <span>{lead.companySize}</span>\n+                  </div>\n+                )}\n+                \n+                {lead.annualRevenue && (\n+                  <div className=\"flex items-center\">\n+                    <span className=\"font-medium mr-2\">Annual Revenue:</span>\n+                    <span>{lead.annualRevenue}</span>\n+                  </div>\n+                )}\n+                \n+                {!lead.website && !lead.industry && !lead.companySize && !lead.annualRevenue && (\n+                  <div className=\"text-muted-foreground\">No business details added</div>\n+                )}\n+              </div>\n+            </div>\n+          )}\n+        </div>\n+\n         {/* Timeline */}\n         <div className=\"space-y-3\">\n           <h3 className=\"font-semibold\">Timeline</h3>\n           <div className=\"space-y-2 text-sm text-muted-foreground\">\n"
                },
                {
                    "date": 1742502332630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -733,8 +733,114 @@\n             </div>\n           )}\n         </div>\n \n+        {/* Lead Preferences & Requirements */}\n+        <div className=\"space-y-3 mt-4\">\n+          <h3 className=\"font-semibold\">Preferences & Requirements</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"budget\">Budget Range</Label>\n+                <Input\n+                  id=\"budget\"\n+                  name=\"budget\"\n+                  value={editedLead.budget || ''}\n+                  onChange={handleChange}\n+                  placeholder=\"e.g. $5,000-$10,000\"\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"timeline\">Timeline</Label>\n+                <Select\n+                  value={editedLead.timeline || ''}\n+                  onValueChange={(value) => handleSelectChange('timeline', value)}\n+                >\n+                  <SelectTrigger id=\"timeline\">\n+                    <SelectValue placeholder=\"Select timeline\" />\n+                  </SelectTrigger>\n+                  <SelectContent>\n+                    <SelectItem value=\"immediate\">Immediate (0-1 month)</SelectItem>\n+                    <SelectItem value=\"short\">Short-term (1-3 months)</SelectItem>\n+                    <SelectItem value=\"medium\">Medium-term (3-6 months)</SelectItem>\n+                    <SelectItem value=\"long\">Long-term (6+ months)</SelectItem>\n+                  </SelectContent>\n+                </Select>\n+              </div>\n+              <div>\n+                <Label htmlFor=\"preferredContact\">Preferred Contact Method</Label>\n+                <Select\n+                  value={editedLead.preferredContact || ''}\n+                  onValueChange={(value) => handleSelectChange('preferredContact', value)}\n+                >\n+                  <SelectTrigger id=\"preferredContact\">\n+                    <SelectValue placeholder=\"Select contact method\" />\n+                  </SelectTrigger>\n+                  <SelectContent>\n+                    <SelectItem value=\"email\">Email</SelectItem>\n+                    <SelectItem value=\"phone\">Phone</SelectItem>\n+                    <SelectItem value=\"text\">Text Message</SelectItem>\n+                    <SelectItem value=\"video\">Video Call</SelectItem>\n+                  </SelectContent>\n+                </Select>\n+              </div>\n+              <div>\n+                <Label htmlFor=\"keyRequirements\">Key Requirements</Label>\n+                <Textarea\n+                  id=\"keyRequirements\"\n+                  name=\"keyRequirements\"\n+                  value={editedLead.keyRequirements || ''}\n+                  onChange={handleTextareaChange}\n+                  placeholder=\"Enter any specific requirements or needs\"\n+                />\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2 px-3 py-2 text-sm\">\n+              {lead.budget && (\n+                <div className=\"flex items-center\">\n+                  <span className=\"font-medium mr-2\">Budget:</span>\n+                  <span>{lead.budget}</span>\n+                </div>\n+              )}\n+              \n+              {lead.timeline && (\n+                <div className=\"flex items-center\">\n+                  <span className=\"font-medium mr-2\">Timeline:</span>\n+                  <Badge variant=\"outline\">\n+                    {lead.timeline === 'immediate' && 'Immediate (0-1 month)'}\n+                    {lead.timeline === 'short' && 'Short-term (1-3 months)'}\n+                    {lead.timeline === 'medium' && 'Medium-term (3-6 months)'}\n+                    {lead.timeline === 'long' && 'Long-term (6+ months)'}\n+                  </Badge>\n+                </div>\n+              )}\n+              \n+              {lead.preferredContact && (\n+                <div className=\"flex items-center\">\n+                  <span className=\"font-medium mr-2\">Preferred Contact:</span>\n+                  <Badge variant=\"secondary\" className=\"capitalize\">\n+                    {lead.preferredContact}\n+                  </Badge>\n+                </div>\n+              )}\n+              \n+              {lead.keyRequirements && (\n+                <div className=\"mt-2\">\n+                  <div className=\"font-medium mb-1\">Key Requirements:</div>\n+                  <div className=\"whitespace-pre-wrap text-muted-foreground\">\n+                    {lead.keyRequirements}\n+                  </div>\n+                </div>\n+              )}\n+              \n+              {!lead.budget && !lead.timeline && !lead.preferredContact && !lead.keyRequirements && (\n+                <div className=\"text-muted-foreground\">No preferences or requirements added</div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n         {/* Timeline */}\n         <div className=\"space-y-3\">\n           <h3 className=\"font-semibold\">Timeline</h3>\n           <div className=\"space-y-2 text-sm text-muted-foreground\">\n"
                },
                {
                    "date": 1742502352514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -839,8 +839,75 @@\n             </div>\n           )}\n         </div>\n \n+        {/* Custom Fields */}\n+        <div className=\"space-y-3 mt-4\">\n+          <div className=\"flex justify-between items-center\">\n+            <h3 className=\"font-semibold\">Custom Fields</h3>\n+            {isEditing && (\n+              <Button \n+                type=\"button\" \n+                variant=\"ghost\" \n+                size=\"sm\"\n+                onClick={addCustomField}\n+              >\n+                <Plus className=\"h-4 w-4 mr-1\" /> Add Field\n+              </Button>\n+            )}\n+          </div>\n+          \n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              {(editedLead.customFields || []).map((field, index) => (\n+                <div key={index} className=\"grid grid-cols-5 gap-2 items-center\">\n+                  <div className=\"col-span-2\">\n+                    <Input\n+                      placeholder=\"Field name\"\n+                      value={field.key}\n+                      onChange={(e) => updateCustomField(index, 'key', e.target.value)}\n+                    />\n+                  </div>\n+                  <div className=\"col-span-2\">\n+                    <Input\n+                      placeholder=\"Value\"\n+                      value={field.value}\n+                      onChange={(e) => updateCustomField(index, 'value', e.target.value)}\n+                    />\n+                  </div>\n+                  <Button\n+                    type=\"button\"\n+                    variant=\"ghost\"\n+                    size=\"icon\"\n+                    onClick={() => removeCustomField(index)}\n+                  >\n+                    <X className=\"h-4 w-4\" />\n+                  </Button>\n+                </div>\n+              ))}\n+              \n+              {(editedLead.customFields || []).length === 0 && (\n+                <div className=\"text-sm text-muted-foreground px-3 py-2\">\n+                  No custom fields added. Click \"Add Field\" to create one.\n+                </div>\n+              )}\n+            </div>\n+          ) : (\n+            <div className=\"space-y-1 px-3 py-2\">\n+              {(lead.customFields && lead.customFields.length > 0) ? (\n+                lead.customFields.map((field, index) => (\n+                  <div key={index} className=\"flex justify-between text-sm\">\n+                    <span className=\"font-medium\">{field.key}:</span>\n+                    <span>{field.value}</span>\n+                  </div>\n+                ))\n+              ) : (\n+                <div className=\"text-sm text-muted-foreground\">No custom fields</div>\n+              )}\n+            </div>\n+          )}\n+        </div>\n+\n         {/* Timeline */}\n         <div className=\"space-y-3\">\n           <h3 className=\"font-semibold\">Timeline</h3>\n           <div className=\"space-y-2 text-sm text-muted-foreground\">\n"
                },
                {
                    "date": 1742502367058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -886,9 +886,9 @@\n               ))}\n               \n               {(editedLead.customFields || []).length === 0 && (\n                 <div className=\"text-sm text-muted-foreground px-3 py-2\">\n-                  No custom fields added. Click \"Add Field\" to create one.\n+                  No custom fields added. Click &quot;Add Field&quot; to create one.\n                 </div>\n               )}\n             </div>\n           ) : (\n"
                },
                {
                    "date": 1742502827211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,11 @@\n       // Process tags if they're a string (comma-separated)\n       let processedTags = editedLead.tags;\n       if (typeof editedLead.tags === 'string') {\n         processedTags = (editedLead.tags as string).split(',').map(tag => tag.trim()).filter(Boolean);\n+      } else if (editedLead.tags === undefined) {\n+        // Ensure tags is never undefined - use empty array instead\n+        processedTags = [];\n       }\n       \n       const updatedLead = {\n         ...editedLead,\n"
                }
            ],
            "date": 1741293366718,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\nimport {\n  Building2,\n  Mail,\n  Phone,\n  MapPin,\n  Globe,\n  DollarSign,\n  Calendar,\n  Clock,\n  Save,\n  X\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Lead } from '@/data/leads';\nimport { useRouter } from 'next/navigation';\n\ninterface LeadProfileProps {\n  lead: Lead;\n  isEditMode?: boolean;\n}\n\nexport function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n  const router = useRouter();\n  const [editedLead, setEditedLead] = useState({ ...lead });\n  const [isEditing, setIsEditing] = useState(isEditMode);\n\n  useEffect(() => {\n    setIsEditing(isEditMode);\n  }, [isEditMode]);\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'MMMM d, yyyy');\n  };\n\n  const handleSave = () => {\n    // Here you would typically save changes to your backend\n    console.log('Saving lead:', editedLead);\n    \n    // After saving, exit edit mode and navigate to the non-edit view\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleCancel = () => {\n    // Reset changes and exit edit mode\n    setEditedLead({ ...lead });\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setEditedLead(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleStatusChange = (value: string) => {\n    setEditedLead(prev => ({ ...prev, status: value }));\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        {/* Basic Info */}\n        {isEditing ? (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input \n                id=\"name\" \n                name=\"name\" \n                value={editedLead.name} \n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input \n                id=\"company\" \n                name=\"company\" \n                value={editedLead.company} \n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        ) : (\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">{lead.name}</h2>\n            <div className=\"flex items-center text-muted-foreground\">\n              <Building2 className=\"w-4 h-4 mr-2\" />\n              {lead.company}\n            </div>\n          </div>\n        )}\n\n        {/* Status and Value */}\n        <div className=\"space-y-2\">\n          {isEditing ? (\n            <>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select \n                value={editedLead.status} \n                onValueChange={handleStatusChange}\n              >\n                <SelectTrigger id=\"status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"New\">New</SelectItem>\n                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n                </SelectContent>\n              </Select>\n              <div className=\"mt-3\">\n                <Label htmlFor=\"value\">Value</Label>\n                <Input\n                  id=\"value\"\n                  name=\"value\"\n                  value={editedLead.value}\n                  onChange={handleChange}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n                {lead.status}\n              </Badge>\n              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n                <DollarSign className=\"w-5 h-5\" />\n                {lead.value}\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Contact Information</h3>\n          {isEditing ? (\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  value={editedLead.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={editedLead.phone}\n                  onChange={handleChange}\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`mailto:${lead.email}`}>\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {lead.email}\n                </a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`tel:${lead.phone}`}>\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  {lead.phone}\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Timeline */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Timeline</h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Created: {formatDate(lead.createdAt)}\n            </div>\n            <div className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        {isEditing ? (\n          <div className=\"flex space-x-2\">\n            <Button className=\"flex-1\" onClick={handleSave}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <Button className=\"w-full\">Schedule Meeting</Button>\n            <Button variant=\"outline\" className=\"w-full\">Send Email</Button>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}"
        }
    ]
}