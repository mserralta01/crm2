{
    "sourceFile": "components/leads/lead-profile.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1741293366718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742497189689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,17 +72,26 @@\n         {/* Basic Info */}\n         {isEditing ? (\n           <div className=\"space-y-3\">\n             <div>\n-              <Label htmlFor=\"name\">Name</Label>\n+              <Label htmlFor=\"firstName\">First Name</Label>\n               <Input \n-                id=\"name\" \n-                name=\"name\" \n-                value={editedLead.name} \n+                id=\"firstName\" \n+                name=\"firstName\" \n+                value={editedLead.firstName} \n                 onChange={handleChange}\n               />\n             </div>\n             <div>\n+              <Label htmlFor=\"lastName\">Last Name</Label>\n+              <Input \n+                id=\"lastName\" \n+                name=\"lastName\" \n+                value={editedLead.lastName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n               <Label htmlFor=\"company\">Company</Label>\n               <Input \n                 id=\"company\" \n                 name=\"company\" \n@@ -92,9 +101,9 @@\n             </div>\n           </div>\n         ) : (\n           <div>\n-            <h2 className=\"text-2xl font-bold mb-2\">{lead.name}</h2>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n             <div className=\"flex items-center text-muted-foreground\">\n               <Building2 className=\"w-4 h-4 mr-2\" />\n               {lead.company}\n             </div>\n"
                },
                {
                    "date": 1742497817813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n } from 'lucide-react';\n import { format } from 'date-fns';\n import { Lead } from '@/data/leads';\n import { useRouter } from 'next/navigation';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n \n interface LeadProfileProps {\n   lead: Lead;\n   isEditMode?: boolean;\n@@ -41,10 +42,17 @@\n     return format(new Date(dateString), 'MMMM d, yyyy');\n   };\n \n   const handleSave = () => {\n+    // Format the phone number before saving\n+    const formattedPhone = formatPhoneNumber(editedLead.phone);\n+    const updatedLead = {\n+      ...editedLead,\n+      phone: formattedPhone\n+    };\n+    \n     // Here you would typically save changes to your backend\n-    console.log('Saving lead:', editedLead);\n+    console.log('Saving lead:', updatedLead);\n     \n     // After saving, exit edit mode and navigate to the non-edit view\n     setIsEditing(false);\n     router.push(`/dashboard/leads/${lead.id}`);\n@@ -61,8 +69,18 @@\n     const { name, value } = e.target;\n     setEditedLead(prev => ({ ...prev, [name]: value }));\n   };\n \n+  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n+    const value = e.target.value;\n+    if (isValidPhoneNumber(value)) {\n+      setEditedLead(prev => ({ \n+        ...prev, \n+        phone: formatPhoneNumber(value)\n+      }));\n+    }\n+  };\n+\n   const handleStatusChange = (value: string) => {\n     setEditedLead(prev => ({ ...prev, status: value }));\n   };\n \n@@ -172,9 +190,13 @@\n                   id=\"phone\"\n                   name=\"phone\"\n                   value={editedLead.phone}\n                   onChange={handleChange}\n+                  onBlur={handlePhoneBlur}\n                 />\n+                <div className=\"text-xs text-muted-foreground mt-1\">\n+                  Format: +1 (###) ###-####\n+                </div>\n               </div>\n             </div>\n           ) : (\n             <div className=\"space-y-2\">\n"
                },
                {
                    "date": 1742497845409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n import { format } from 'date-fns';\n import { Lead } from '@/data/leads';\n import { useRouter } from 'next/navigation';\n import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n+import { updateLead } from '@/lib/services/leads-service';\n+import { toast } from '@/hooks/use-toast';\n \n interface LeadProfileProps {\n   lead: Lead;\n   isEditMode?: boolean;\n@@ -41,22 +43,39 @@\n   const formatDate = (dateString: string) => {\n     return format(new Date(dateString), 'MMMM d, yyyy');\n   };\n \n-  const handleSave = () => {\n-    // Format the phone number before saving\n-    const formattedPhone = formatPhoneNumber(editedLead.phone);\n-    const updatedLead = {\n-      ...editedLead,\n-      phone: formattedPhone\n-    };\n-    \n-    // Here you would typically save changes to your backend\n-    console.log('Saving lead:', updatedLead);\n-    \n-    // After saving, exit edit mode and navigate to the non-edit view\n-    setIsEditing(false);\n-    router.push(`/dashboard/leads/${lead.id}`);\n+  const handleSave = async () => {\n+    try {\n+      // Format the phone number before saving\n+      const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      const updatedLead = {\n+        ...editedLead,\n+        phone: formattedPhone\n+      };\n+      \n+      // Save changes to the backend\n+      await updateLead(lead.id, updatedLead);\n+      \n+      // Show success message\n+      toast({\n+        title: \"Success\",\n+        description: \"Lead information has been updated.\",\n+      });\n+      \n+      // After saving, exit edit mode and navigate to the non-edit view\n+      setIsEditing(false);\n+      router.push(`/dashboard/leads/${lead.id}`);\n+    } catch (error) {\n+      console.error('Error updating lead:', error);\n+      \n+      // Show error message\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to update lead information. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n   };\n \n   const handleCancel = () => {\n     // Reset changes and exit edit mode\n"
                },
                {
                    "date": 1742498659150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,346 @@\n+\"use client\";\n+\n+import { useState, useEffect } from 'react';\n+import { Card } from '@/components/ui/card';\n+import { Button } from '@/components/ui/button';\n+import { Badge } from '@/components/ui/badge';\n+import { Input } from '@/components/ui/input';\n+import { Label } from '@/components/ui/label';\n+import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\n+import {\n+  Building2,\n+  Mail,\n+  Phone,\n+  MapPin,\n+  Globe,\n+  DollarSign,\n+  Calendar,\n+  Clock,\n+  Save,\n+  X,\n+  Trash2\n+} from 'lucide-react';\n+import {\n+  AlertDialog,\n+  AlertDialogAction,\n+  AlertDialogCancel,\n+  AlertDialogContent,\n+  AlertDialogDescription,\n+  AlertDialogFooter,\n+  AlertDialogHeader,\n+  AlertDialogTitle,\n+  AlertDialogTrigger,\n+} from \"@/components/ui/alert-dialog\";\n+import { format } from 'date-fns';\n+import { Lead } from '@/data/leads';\n+import { useRouter } from 'next/navigation';\n+import { formatPhoneNumber, isValidPhoneNumber } from '@/app/utils/formatters';\n+import { updateLead, deleteLead } from '@/lib/services/leads-service';\n+import { toast } from '@/hooks/use-toast';\n+\n+interface LeadProfileProps {\n+  lead: Lead;\n+  isEditMode?: boolean;\n+}\n+\n+export function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n+  const router = useRouter();\n+  const [editedLead, setEditedLead] = useState({ ...lead });\n+  const [isEditing, setIsEditing] = useState(isEditMode);\n+  const [isDeleting, setIsDeleting] = useState(false);\n+\n+  useEffect(() => {\n+    setIsEditing(isEditMode);\n+  }, [isEditMode]);\n+\n+  const formatDate = (dateString: string) => {\n+    return format(new Date(dateString), 'MMMM d, yyyy');\n+  };\n+\n+  const handleSave = async () => {\n+    try {\n+      // Format the phone number before saving\n+      const formattedPhone = formatPhoneNumber(editedLead.phone);\n+      const updatedLead = {\n+        ...editedLead,\n+        phone: formattedPhone\n+      };\n+      \n+      // Save changes to the backend\n+      await updateLead(lead.id, updatedLead);\n+      \n+      // Show success message\n+      toast({\n+        title: \"Success\",\n+        description: \"Lead information has been updated.\",\n+      });\n+      \n+      // After saving, exit edit mode and navigate to the non-edit view\n+      setIsEditing(false);\n+      router.push(`/dashboard/leads/${lead.id}`);\n+    } catch (error) {\n+      console.error('Error updating lead:', error);\n+      \n+      // Show error message\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to update lead information. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+    }\n+  };\n+\n+  const handleCancel = () => {\n+    // Reset changes and exit edit mode\n+    setEditedLead({ ...lead });\n+    setIsEditing(false);\n+    router.push(`/dashboard/leads/${lead.id}`);\n+  };\n+\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const { name, value } = e.target;\n+    setEditedLead(prev => ({ ...prev, [name]: value }));\n+  };\n+\n+  const handlePhoneBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n+    const value = e.target.value;\n+    if (isValidPhoneNumber(value)) {\n+      setEditedLead(prev => ({ \n+        ...prev, \n+        phone: formatPhoneNumber(value)\n+      }));\n+    }\n+  };\n+\n+  const handleStatusChange = (value: string) => {\n+    setEditedLead(prev => ({ ...prev, status: value }));\n+  };\n+\n+  const handleDelete = async () => {\n+    try {\n+      setIsDeleting(true);\n+      await deleteLead(lead.id);\n+      \n+      toast({\n+        title: \"Success\",\n+        description: \"Lead has been deleted successfully.\",\n+      });\n+      \n+      // Redirect to leads list after deletion\n+      router.push('/dashboard/leads');\n+    } catch (error) {\n+      console.error('Error deleting lead:', error);\n+      \n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to delete the lead. Please try again.\",\n+        variant: \"destructive\",\n+      });\n+      setIsDeleting(false);\n+    }\n+  };\n+\n+  return (\n+    <Card className=\"p-6\">\n+      <div className=\"space-y-6\">\n+        {/* Basic Info */}\n+        {isEditing ? (\n+          <div className=\"space-y-3\">\n+            <div>\n+              <Label htmlFor=\"firstName\">First Name</Label>\n+              <Input \n+                id=\"firstName\" \n+                name=\"firstName\" \n+                value={editedLead.firstName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"lastName\">Last Name</Label>\n+              <Input \n+                id=\"lastName\" \n+                name=\"lastName\" \n+                value={editedLead.lastName} \n+                onChange={handleChange}\n+              />\n+            </div>\n+            <div>\n+              <Label htmlFor=\"company\">Company</Label>\n+              <Input \n+                id=\"company\" \n+                name=\"company\" \n+                value={editedLead.company} \n+                onChange={handleChange}\n+              />\n+            </div>\n+          </div>\n+        ) : (\n+          <div>\n+            <h2 className=\"text-2xl font-bold mb-2\">{lead.firstName} {lead.lastName}</h2>\n+            <div className=\"flex items-center text-muted-foreground\">\n+              <Building2 className=\"w-4 h-4 mr-2\" />\n+              {lead.company}\n+            </div>\n+          </div>\n+        )}\n+\n+        {/* Status and Value */}\n+        <div className=\"space-y-2\">\n+          {isEditing ? (\n+            <>\n+              <Label htmlFor=\"status\">Status</Label>\n+              <Select \n+                value={editedLead.status} \n+                onValueChange={handleStatusChange}\n+              >\n+                <SelectTrigger id=\"status\">\n+                  <SelectValue placeholder=\"Select status\" />\n+                </SelectTrigger>\n+                <SelectContent>\n+                  <SelectItem value=\"New\">New</SelectItem>\n+                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n+                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n+                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n+                </SelectContent>\n+              </Select>\n+              <div className=\"mt-3\">\n+                <Label htmlFor=\"value\">Value</Label>\n+                <Input\n+                  id=\"value\"\n+                  name=\"value\"\n+                  value={editedLead.value}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+            </>\n+          ) : (\n+            <>\n+              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n+                {lead.status}\n+              </Badge>\n+              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n+                <DollarSign className=\"w-5 h-5\" />\n+                {lead.value}\n+              </div>\n+            </>\n+          )}\n+        </div>\n+\n+        {/* Contact Info */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Contact Information</h3>\n+          {isEditing ? (\n+            <div className=\"space-y-3\">\n+              <div>\n+                <Label htmlFor=\"email\">Email</Label>\n+                <Input\n+                  id=\"email\"\n+                  name=\"email\"\n+                  value={editedLead.email}\n+                  onChange={handleChange}\n+                />\n+              </div>\n+              <div>\n+                <Label htmlFor=\"phone\">Phone</Label>\n+                <Input\n+                  id=\"phone\"\n+                  name=\"phone\"\n+                  value={editedLead.phone}\n+                  onChange={handleChange}\n+                  onBlur={handlePhoneBlur}\n+                />\n+                <div className=\"text-xs text-muted-foreground mt-1\">\n+                  Format: +1 (###) ###-####\n+                </div>\n+              </div>\n+            </div>\n+          ) : (\n+            <div className=\"space-y-2\">\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`mailto:${lead.email}`}>\n+                  <Mail className=\"w-4 h-4 mr-2\" />\n+                  {lead.email}\n+                </a>\n+              </Button>\n+              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n+                <a href={`tel:${lead.phone}`}>\n+                  <Phone className=\"w-4 h-4 mr-2\" />\n+                  {lead.phone}\n+                </a>\n+              </Button>\n+            </div>\n+          )}\n+        </div>\n+\n+        {/* Timeline */}\n+        <div className=\"space-y-3\">\n+          <h3 className=\"font-semibold\">Timeline</h3>\n+          <div className=\"space-y-2 text-sm text-muted-foreground\">\n+            <div className=\"flex items-center\">\n+              <Calendar className=\"w-4 h-4 mr-2\" />\n+              Created: {formatDate(lead.createdAt)}\n+            </div>\n+            <div className=\"flex items-center\">\n+              <Clock className=\"w-4 h-4 mr-2\" />\n+              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n+            </div>\n+          </div>\n+        </div>\n+\n+        {/* Action Buttons */}\n+        <div className=\"space-y-3\">\n+          {isEditing ? (\n+            <div className=\"flex gap-2\">\n+              <Button className=\"flex-1\" onClick={handleSave}>\n+                <Save className=\"w-4 h-4 mr-2\" />\n+                Save\n+              </Button>\n+              <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n+                <X className=\"w-4 h-4 mr-2\" />\n+                Cancel\n+              </Button>\n+            </div>\n+          ) : (\n+            <div className=\"flex gap-2\">\n+              <Button \n+                variant=\"outline\" \n+                className=\"flex-1\" \n+                onClick={() => router.push(`/dashboard/leads/${lead.id}?edit=true`)}\n+              >\n+                Edit Profile\n+              </Button>\n+              \n+              <AlertDialog>\n+                <AlertDialogTrigger asChild>\n+                  <Button variant=\"destructive\" disabled={isDeleting}>\n+                    <Trash2 className=\"w-4 h-4 mr-2\" />\n+                    Delete Lead\n+                  </Button>\n+                </AlertDialogTrigger>\n+                <AlertDialogContent>\n+                  <AlertDialogHeader>\n+                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n+                    <AlertDialogDescription>\n+                      This action cannot be undone. This will permanently delete the lead\n+                      and all associated information.\n+                    </AlertDialogDescription>\n+                  </AlertDialogHeader>\n+                  <AlertDialogFooter>\n+                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n+                    <AlertDialogAction\n+                      onClick={handleDelete}\n+                      className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n+                      disabled={isDeleting}\n+                    >\n+                      {isDeleting ? \"Deleting...\" : \"Delete\"}\n+                    </AlertDialogAction>\n+                  </AlertDialogFooter>\n+                </AlertDialogContent>\n+              </AlertDialog>\n+            </div>\n+          )}\n+        </div>\n+      </div>\n+    </Card>\n+  );\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1741293366718,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\nimport {\n  Building2,\n  Mail,\n  Phone,\n  MapPin,\n  Globe,\n  DollarSign,\n  Calendar,\n  Clock,\n  Save,\n  X\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Lead } from '@/data/leads';\nimport { useRouter } from 'next/navigation';\n\ninterface LeadProfileProps {\n  lead: Lead;\n  isEditMode?: boolean;\n}\n\nexport function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n  const router = useRouter();\n  const [editedLead, setEditedLead] = useState({ ...lead });\n  const [isEditing, setIsEditing] = useState(isEditMode);\n\n  useEffect(() => {\n    setIsEditing(isEditMode);\n  }, [isEditMode]);\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'MMMM d, yyyy');\n  };\n\n  const handleSave = () => {\n    // Here you would typically save changes to your backend\n    console.log('Saving lead:', editedLead);\n    \n    // After saving, exit edit mode and navigate to the non-edit view\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleCancel = () => {\n    // Reset changes and exit edit mode\n    setEditedLead({ ...lead });\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setEditedLead(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleStatusChange = (value: string) => {\n    setEditedLead(prev => ({ ...prev, status: value }));\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        {/* Basic Info */}\n        {isEditing ? (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input \n                id=\"name\" \n                name=\"name\" \n                value={editedLead.name} \n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input \n                id=\"company\" \n                name=\"company\" \n                value={editedLead.company} \n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        ) : (\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">{lead.name}</h2>\n            <div className=\"flex items-center text-muted-foreground\">\n              <Building2 className=\"w-4 h-4 mr-2\" />\n              {lead.company}\n            </div>\n          </div>\n        )}\n\n        {/* Status and Value */}\n        <div className=\"space-y-2\">\n          {isEditing ? (\n            <>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select \n                value={editedLead.status} \n                onValueChange={handleStatusChange}\n              >\n                <SelectTrigger id=\"status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"New\">New</SelectItem>\n                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n                </SelectContent>\n              </Select>\n              <div className=\"mt-3\">\n                <Label htmlFor=\"value\">Value</Label>\n                <Input\n                  id=\"value\"\n                  name=\"value\"\n                  value={editedLead.value}\n                  onChange={handleChange}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n                {lead.status}\n              </Badge>\n              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n                <DollarSign className=\"w-5 h-5\" />\n                {lead.value}\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Contact Information</h3>\n          {isEditing ? (\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  value={editedLead.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={editedLead.phone}\n                  onChange={handleChange}\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`mailto:${lead.email}`}>\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {lead.email}\n                </a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`tel:${lead.phone}`}>\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  {lead.phone}\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Timeline */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Timeline</h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Created: {formatDate(lead.createdAt)}\n            </div>\n            <div className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        {isEditing ? (\n          <div className=\"flex space-x-2\">\n            <Button className=\"flex-1\" onClick={handleSave}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <Button className=\"w-full\">Schedule Meeting</Button>\n            <Button variant=\"outline\" className=\"w-full\">Send Email</Button>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}"
        }
    ]
}