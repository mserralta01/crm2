{
    "sourceFile": "components/leads/lead-profile.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741293366718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741293366718,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';\nimport {\n  Building2,\n  Mail,\n  Phone,\n  MapPin,\n  Globe,\n  DollarSign,\n  Calendar,\n  Clock,\n  Save,\n  X\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Lead } from '@/data/leads';\nimport { useRouter } from 'next/navigation';\n\ninterface LeadProfileProps {\n  lead: Lead;\n  isEditMode?: boolean;\n}\n\nexport function LeadProfile({ lead, isEditMode = false }: LeadProfileProps) {\n  const router = useRouter();\n  const [editedLead, setEditedLead] = useState({ ...lead });\n  const [isEditing, setIsEditing] = useState(isEditMode);\n\n  useEffect(() => {\n    setIsEditing(isEditMode);\n  }, [isEditMode]);\n\n  const formatDate = (dateString: string) => {\n    return format(new Date(dateString), 'MMMM d, yyyy');\n  };\n\n  const handleSave = () => {\n    // Here you would typically save changes to your backend\n    console.log('Saving lead:', editedLead);\n    \n    // After saving, exit edit mode and navigate to the non-edit view\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleCancel = () => {\n    // Reset changes and exit edit mode\n    setEditedLead({ ...lead });\n    setIsEditing(false);\n    router.push(`/dashboard/leads/${lead.id}`);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setEditedLead(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleStatusChange = (value: string) => {\n    setEditedLead(prev => ({ ...prev, status: value }));\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"space-y-6\">\n        {/* Basic Info */}\n        {isEditing ? (\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input \n                id=\"name\" \n                name=\"name\" \n                value={editedLead.name} \n                onChange={handleChange}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\">Company</Label>\n              <Input \n                id=\"company\" \n                name=\"company\" \n                value={editedLead.company} \n                onChange={handleChange}\n              />\n            </div>\n          </div>\n        ) : (\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">{lead.name}</h2>\n            <div className=\"flex items-center text-muted-foreground\">\n              <Building2 className=\"w-4 h-4 mr-2\" />\n              {lead.company}\n            </div>\n          </div>\n        )}\n\n        {/* Status and Value */}\n        <div className=\"space-y-2\">\n          {isEditing ? (\n            <>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select \n                value={editedLead.status} \n                onValueChange={handleStatusChange}\n              >\n                <SelectTrigger id=\"status\">\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"New\">New</SelectItem>\n                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"Negotiating\">Negotiating</SelectItem>\n                </SelectContent>\n              </Select>\n              <div className=\"mt-3\">\n                <Label htmlFor=\"value\">Value</Label>\n                <Input\n                  id=\"value\"\n                  name=\"value\"\n                  value={editedLead.value}\n                  onChange={handleChange}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <Badge variant=\"secondary\" className=\"w-full justify-center text-sm\">\n                {lead.status}\n              </Badge>\n              <div className=\"flex items-center justify-center text-xl font-bold text-primary\">\n                <DollarSign className=\"w-5 h-5\" />\n                {lead.value}\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* Contact Info */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Contact Information</h3>\n          {isEditing ? (\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  value={editedLead.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={editedLead.phone}\n                  onChange={handleChange}\n                />\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`mailto:${lead.email}`}>\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {lead.email}\n                </a>\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n                <a href={`tel:${lead.phone}`}>\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  {lead.phone}\n                </a>\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Timeline */}\n        <div className=\"space-y-3\">\n          <h3 className=\"font-semibold\">Timeline</h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Created: {formatDate(lead.createdAt)}\n            </div>\n            <div className=\"flex items-center\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              Last Activity: {format(new Date(lead.lastActivity), 'MMM d, h:mm a')}\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        {isEditing ? (\n          <div className=\"flex space-x-2\">\n            <Button className=\"flex-1\" onClick={handleSave}>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\" onClick={handleCancel}>\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-2\">\n            <Button className=\"w-full\">Schedule Meeting</Button>\n            <Button variant=\"outline\" className=\"w-full\">Send Email</Button>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}"
        }
    ]
}