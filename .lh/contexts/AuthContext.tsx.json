{
    "sourceFile": "contexts/AuthContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1741892919091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741893077242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   sendPasswordResetEmail\n } from 'firebase/auth';\n import { doc, getDoc, setDoc } from 'firebase/firestore';\n import { auth, db } from '@/lib/firebase';\n+import { setCookie, deleteCookie } from 'cookies-next';\n \n // Define user roles\n export type UserRole = 'admin' | 'user';\n \n@@ -113,8 +114,12 @@\n \n   // Sign out\n   const logout = async () => {\n     try {\n+      // Delete cookies before signing out\n+      deleteCookie('auth-token');\n+      deleteCookie('user-role');\n+      \n       await signOut(auth);\n     } catch (error) {\n       console.error('Error signing out:', error);\n       throw error;\n@@ -145,8 +150,19 @@\n           if (userDoc.exists()) {\n             const userData = userDoc.data() as UserData;\n             setUserData(userData);\n             setIsAdmin(userData.role === 'admin');\n+            \n+            // Set cookies for server-side authentication\n+            setCookie('auth-token', user.uid, {\n+              maxAge: 60 * 60 * 24 * 7, // 1 week\n+              path: '/',\n+            });\n+            \n+            setCookie('user-role', userData.role, {\n+              maxAge: 60 * 60 * 24 * 7, // 1 week\n+              path: '/',\n+            });\n           } else {\n             // If user document doesn't exist, create one\n             const newUserData: UserData = {\n               uid: user.uid,\n@@ -159,15 +175,30 @@\n             \n             await setDoc(userDocRef, newUserData);\n             setUserData(newUserData);\n             setIsAdmin(false);\n+            \n+            // Set cookies for server-side authentication\n+            setCookie('auth-token', user.uid, {\n+              maxAge: 60 * 60 * 24 * 7, // 1 week\n+              path: '/',\n+            });\n+            \n+            setCookie('user-role', 'user', {\n+              maxAge: 60 * 60 * 24 * 7, // 1 week\n+              path: '/',\n+            });\n           }\n         } catch (error) {\n           console.error('Error fetching user data:', error);\n         }\n       } else {\n         setUserData(null);\n         setIsAdmin(false);\n+        \n+        // Delete cookies when user is not authenticated\n+        deleteCookie('auth-token');\n+        deleteCookie('user-role');\n       }\n       \n       setLoading(false);\n     });\n"
                },
                {
                    "date": 1741893321008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\"use client\";\n+\n import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n import { \n   User, \n   GoogleAuthProvider, \n"
                }
            ],
            "date": 1741892919091,
            "name": "Commit-0",
            "content": "import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { \n  User, \n  GoogleAuthProvider, \n  signInWithPopup, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged,\n  sendPasswordResetEmail\n} from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '@/lib/firebase';\n\n// Define user roles\nexport type UserRole = 'admin' | 'user';\n\n// Define user data structure\nexport interface UserData {\n  uid: string;\n  email: string | null;\n  displayName: string | null;\n  photoURL: string | null;\n  role: UserRole;\n  createdAt: Date;\n}\n\n// Define authentication context type\ninterface AuthContextType {\n  currentUser: User | null;\n  userData: UserData | null;\n  loading: boolean;\n  signInWithGoogle: () => Promise<void>;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, displayName: string) => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  isAdmin: boolean;\n}\n\n// Create the authentication context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create a provider component\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [userData, setUserData] = useState<UserData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  // Sign in with Google\n  const signInWithGoogle = async () => {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n      \n      // Check if user exists in Firestore\n      const userDocRef = doc(db, 'users', user.uid);\n      const userDoc = await getDoc(userDocRef);\n      \n      if (!userDoc.exists()) {\n        // Create new user document with default role 'user'\n        const userData: UserData = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName,\n          photoURL: user.photoURL,\n          role: 'user', // Default role\n          createdAt: new Date()\n        };\n        \n        await setDoc(userDocRef, userData);\n      }\n    } catch (error) {\n      console.error('Error signing in with Google:', error);\n      throw error;\n    }\n  };\n\n  // Sign in with email and password\n  const login = async (email: string, password: string) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n    } catch (error) {\n      console.error('Error signing in:', error);\n      throw error;\n    }\n  };\n\n  // Register with email and password\n  const register = async (email: string, password: string, displayName: string) => {\n    try {\n      const result = await createUserWithEmailAndPassword(auth, email, password);\n      const user = result.user;\n      \n      // Create user document in Firestore\n      const userData: UserData = {\n        uid: user.uid,\n        email: user.email,\n        displayName: displayName,\n        photoURL: null,\n        role: 'user', // Default role\n        createdAt: new Date()\n      };\n      \n      await setDoc(doc(db, 'users', user.uid), userData);\n    } catch (error) {\n      console.error('Error registering:', error);\n      throw error;\n    }\n  };\n\n  // Sign out\n  const logout = async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    try {\n      await sendPasswordResetEmail(auth, email);\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  };\n\n  // Listen for authentication state changes\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        try {\n          // Get user data from Firestore\n          const userDocRef = doc(db, 'users', user.uid);\n          const userDoc = await getDoc(userDocRef);\n          \n          if (userDoc.exists()) {\n            const userData = userDoc.data() as UserData;\n            setUserData(userData);\n            setIsAdmin(userData.role === 'admin');\n          } else {\n            // If user document doesn't exist, create one\n            const newUserData: UserData = {\n              uid: user.uid,\n              email: user.email,\n              displayName: user.displayName,\n              photoURL: user.photoURL,\n              role: 'user', // Default role\n              createdAt: new Date()\n            };\n            \n            await setDoc(userDocRef, newUserData);\n            setUserData(newUserData);\n            setIsAdmin(false);\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n        }\n      } else {\n        setUserData(null);\n        setIsAdmin(false);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    userData,\n    loading,\n    signInWithGoogle,\n    login,\n    register,\n    logout,\n    resetPassword,\n    isAdmin\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}\n\n// Create a hook to use the auth context\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "
        }
    ]
}