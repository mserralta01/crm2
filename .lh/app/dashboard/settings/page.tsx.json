{
    "sourceFile": "app/dashboard/settings/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1741294381421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741294443307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,12 @@\n   FormLabel,\n   FormMessage,\n } from '@/components/ui/form';\n import { Input } from '@/components/ui/input';\n-import { toast } from '@/components/ui/use-toast';\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n+import { useToast } from '@/components/ui/use-toast';\n+import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n+import { CheckCircle, AlertCircle } from 'lucide-react';\n \n // Form schema for validation\n const apiSettingsSchema = z.object({\n   sendgridApiKey: z.string().min(1, {\n@@ -38,11 +40,22 @@\n });\n \n type ApiSettingsFormValues = z.infer<typeof apiSettingsSchema>;\n \n+const testEmailSchema = z.object({\n+  testEmail: z.string().email({\n+    message: \"Please enter a valid email address.\",\n+  }),\n+});\n+\n+type TestEmailFormValues = z.infer<typeof testEmailSchema>;\n+\n export default function SettingsPage() {\n   const [user] = useAuthState(auth);\n   const [isLoading, setIsLoading] = useState(false);\n+  const [isTesting, setIsTesting] = useState(false);\n+  const [testResult, setTestResult] = useState<{ success: boolean; message: string } | null>(null);\n+  const { toast } = useToast();\n   \n   // Initialize form\n   const form = useForm<ApiSettingsFormValues>({\n     resolver: zodResolver(apiSettingsSchema),\n@@ -50,8 +63,15 @@\n       sendgridApiKey: \"\",\n     },\n   });\n \n+  const testEmailForm = useForm<TestEmailFormValues>({\n+    resolver: zodResolver(testEmailSchema),\n+    defaultValues: {\n+      testEmail: \"\",\n+    },\n+  });\n+\n   // Fetch existing settings on component mount\n   useEffect(() => {\n     const fetchSettings = async () => {\n       if (!user) return;\n@@ -78,9 +98,9 @@\n       }\n     };\n \n     fetchSettings();\n-  }, [user, form]);\n+  }, [user, form, toast]);\n \n   // Form submission handler\n   const onSubmit = async (data: ApiSettingsFormValues) => {\n     if (!user) return;\n@@ -109,8 +129,57 @@\n       setIsLoading(false);\n     }\n   };\n \n+  // Test email handler\n+  const onTestEmail = async (data: TestEmailFormValues) => {\n+    if (!user) return;\n+    \n+    try {\n+      setIsTesting(true);\n+      setTestResult(null);\n+      \n+      const response = await fetch('/api/email/test', {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          testEmail: data.testEmail,\n+        }),\n+      });\n+      \n+      const result = await response.json();\n+      setTestResult(result);\n+      \n+      if (result.success) {\n+        toast({\n+          title: \"Test Email Sent\",\n+          description: \"Check your inbox for the test email.\",\n+        });\n+      } else {\n+        toast({\n+          title: \"Test Failed\",\n+          description: result.message || \"Failed to send test email.\",\n+          variant: \"destructive\",\n+        });\n+      }\n+    } catch (error) {\n+      console.error(\"Error testing email:\", error);\n+      setTestResult({\n+        success: false,\n+        message: \"Error connecting to the server.\",\n+      });\n+      toast({\n+        title: \"Error\",\n+        description: \"Failed to connect to the server.\",\n+        variant: \"destructive\",\n+      });\n+    } finally {\n+      setIsTesting(false);\n+    }\n+  };\n+\n   if (!user) {\n     return <div className=\"p-8\">Please log in to access settings.</div>;\n   }\n \n@@ -125,9 +194,9 @@\n           <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n         </TabsList>\n         \n         <TabsContent value=\"api\">\n-          <Card>\n+          <Card className=\"mb-6\">\n             <CardHeader>\n               <CardTitle>API Integration Settings</CardTitle>\n               <CardDescription>\n                 Configure your API keys for various integrations.\n@@ -163,8 +232,59 @@\n                 </form>\n               </Form>\n             </CardContent>\n           </Card>\n+          \n+          <Card>\n+            <CardHeader>\n+              <CardTitle>Test SendGrid Integration</CardTitle>\n+              <CardDescription>\n+                Send a test email to verify your SendGrid integration is working.\n+              </CardDescription>\n+            </CardHeader>\n+            <CardContent>\n+              {testResult && (\n+                <Alert className={`mb-6 ${testResult.success ? 'bg-green-50' : 'bg-red-50'}`}>\n+                  {testResult.success ? (\n+                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n+                  ) : (\n+                    <AlertCircle className=\"h-4 w-4 text-red-600\" />\n+                  )}\n+                  <AlertTitle>{testResult.success ? \"Success\" : \"Error\"}</AlertTitle>\n+                  <AlertDescription>{testResult.message}</AlertDescription>\n+                </Alert>\n+              )}\n+              \n+              <Form {...testEmailForm}>\n+                <form onSubmit={testEmailForm.handleSubmit(onTestEmail)} className=\"space-y-6\">\n+                  <FormField\n+                    control={testEmailForm.control}\n+                    name=\"testEmail\"\n+                    render={({ field }) => (\n+                      <FormItem>\n+                        <FormLabel>Email Address</FormLabel>\n+                        <FormControl>\n+                          <Input \n+                            placeholder=\"Enter email address to receive test\" \n+                            type=\"email\" \n+                            {...field} \n+                          />\n+                        </FormControl>\n+                        <FormDescription>\n+                          We'll send a test email to this address.\n+                        </FormDescription>\n+                        <FormMessage />\n+                      </FormItem>\n+                    )}\n+                  />\n+                  \n+                  <Button type=\"submit\" variant=\"outline\" disabled={isTesting}>\n+                    {isTesting ? \"Sending...\" : \"Send Test Email\"}\n+                  </Button>\n+                </form>\n+              </Form>\n+            </CardContent>\n+          </Card>\n         </TabsContent>\n         \n         <TabsContent value=\"account\">\n           <Card>\n"
                },
                {
                    "date": 1741294466862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   FormMessage,\n } from '@/components/ui/form';\n import { Input } from '@/components/ui/input';\n import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n-import { useToast } from '@/components/ui/use-toast';\n+import { useToast } from '@/hooks/use-toast';\n import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n import { CheckCircle, AlertCircle } from 'lucide-react';\n \n // Form schema for validation\n"
                }
            ],
            "date": 1741294381421,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '@/lib/firebase';\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { toast } from '@/components/ui/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\n// Form schema for validation\nconst apiSettingsSchema = z.object({\n  sendgridApiKey: z.string().min(1, {\n    message: \"SendGrid API Key is required.\",\n  }),\n});\n\ntype ApiSettingsFormValues = z.infer<typeof apiSettingsSchema>;\n\nexport default function SettingsPage() {\n  const [user] = useAuthState(auth);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Initialize form\n  const form = useForm<ApiSettingsFormValues>({\n    resolver: zodResolver(apiSettingsSchema),\n    defaultValues: {\n      sendgridApiKey: \"\",\n    },\n  });\n\n  // Fetch existing settings on component mount\n  useEffect(() => {\n    const fetchSettings = async () => {\n      if (!user) return;\n      \n      try {\n        setIsLoading(true);\n        const settingsDoc = await getDoc(doc(db, \"settings\", user.uid));\n        \n        if (settingsDoc.exists()) {\n          const data = settingsDoc.data();\n          form.reset({\n            sendgridApiKey: data.sendgridApiKey || \"\",\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching settings:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load settings.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSettings();\n  }, [user, form]);\n\n  // Form submission handler\n  const onSubmit = async (data: ApiSettingsFormValues) => {\n    if (!user) return;\n    \n    try {\n      setIsLoading(true);\n      \n      // Save settings to Firestore\n      await setDoc(doc(db, \"settings\", user.uid), {\n        sendgridApiKey: data.sendgridApiKey,\n        updatedAt: new Date(),\n      }, { merge: true });\n      \n      toast({\n        title: \"Settings Saved\",\n        description: \"Your API settings have been updated successfully.\",\n      });\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!user) {\n    return <div className=\"p-8\">Please log in to access settings.</div>;\n  }\n\n  return (\n    <div className=\"container py-10\">\n      <h1 className=\"text-3xl font-bold mb-6\">Settings</h1>\n      \n      <Tabs defaultValue=\"api\" className=\"w-full\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"api\">API Integration</TabsTrigger>\n          <TabsTrigger value=\"account\">Account</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"api\">\n          <Card>\n            <CardHeader>\n              <CardTitle>API Integration Settings</CardTitle>\n              <CardDescription>\n                Configure your API keys for various integrations.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"sendgridApiKey\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SendGrid API Key</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter your SendGrid API Key\" \n                            type=\"password\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          The API key will be used for sending emails via SendGrid.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <Button type=\"submit\" disabled={isLoading}>\n                    {isLoading ? \"Saving...\" : \"Save Settings\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"account\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Settings</CardTitle>\n              <CardDescription>\n                Manage your account preferences.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>Account settings will be implemented in a future update.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notification Settings</CardTitle>\n              <CardDescription>\n                Manage how you receive notifications.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>Notification settings will be implemented in a future update.</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} "
        }
    ]
}