{
    "sourceFile": "app/dashboard/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741292572480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741292572480,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { BarChart2, Users, MessageSquare, DollarSign } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { getLeads } from '@/lib/services/leads-service';\nimport { Lead } from '@/data/leads';\nimport { formatCurrency, getRelativeTimeString } from '@/lib/utils';\n\nexport default function DashboardPage() {\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    async function fetchLeads() {\n      try {\n        setLoading(true);\n        const data = await getLeads();\n        setLeads(data);\n        setError(null);\n      } catch (err) {\n        console.error('Error fetching leads:', err);\n        setError('Failed to load leads data. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchLeads();\n  }, []);\n  \n  // Calculate dashboard statistics\n  const totalLeads = leads.length;\n  \n  const qualifiedLeads = leads.filter(lead => lead.status === 'Qualified').length;\n  const conversionRate = totalLeads > 0 \n    ? ((qualifiedLeads / totalLeads) * 100).toFixed(1) + '%'\n    : '0%';\n  \n  const activeDeals = leads.filter(lead => \n    ['Contacted', 'Qualified', 'Negotiating'].includes(lead.status)\n  ).length;\n  \n  // Calculate total revenue from lead values\n  const totalRevenue = leads.reduce((sum, lead) => {\n    // Extract numeric value from string like \"$5,000\"\n    const numericValue = lead.value.replace(/[^0-9]/g, '');\n    return sum + (numericValue ? parseInt(numericValue) : 0);\n  }, 0);\n  \n  // Format revenue as \"$125.3k\" or similar\n  const formattedRevenue = totalRevenue >= 1000 \n    ? `$${(totalRevenue / 1000).toFixed(1)}k`\n    : formatCurrency(totalRevenue);\n\n  const stats = [\n    {\n      title: \"Total Leads\",\n      value: totalLeads.toString(),\n      change: totalLeads > 0 ? \"+12.3%\" : \"0%\", // Would need historical data for real change\n      icon: Users,\n      trend: \"up\"\n    },\n    {\n      title: \"Conversion Rate\",\n      value: conversionRate,\n      change: qualifiedLeads > 0 ? \"+4.2%\" : \"0%\", // Would need historical data for real change\n      icon: BarChart2,\n      trend: \"up\"\n    },\n    {\n      title: \"Active Deals\",\n      value: activeDeals.toString(),\n      change: activeDeals > 0 ? (activeDeals > totalLeads / 2 ? \"+2.1%\" : \"-2.1%\") : \"0%\", // Would need historical data for real change\n      icon: MessageSquare,\n      trend: activeDeals > totalLeads / 2 ? \"up\" : \"down\"\n    },\n    {\n      title: \"Revenue\",\n      value: formattedRevenue,\n      change: totalRevenue > 0 ? \"+15.2%\" : \"0%\", // Would need historical data for real change\n      icon: DollarSign,\n      trend: \"up\"\n    }\n  ];\n\n  if (loading) {\n    return <div className=\"min-h-screen bg-background p-8 flex items-center justify-center\">\n      <p className=\"text-xl\">Loading dashboard data...</p>\n    </div>;\n  }\n\n  if (error) {\n    return <div className=\"min-h-screen bg-background p-8 flex items-center justify-center\">\n      <p className=\"text-xl text-red-500\">{error}</p>\n    </div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n      >\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold\">Welcome back!</h1>\n          <p className=\"text-muted-foreground\">Here's what's happening with your sales today.</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {stats.map((stat) => (\n            <Card key={stat.title} className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <stat.icon className=\"w-6 h-6 text-primary\" />\n                </div>\n                <span className={`text-sm font-medium ${\n                  stat.trend === 'up' ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {stat.change}\n                </span>\n              </div>\n              <h3 className=\"text-2xl font-bold\">{stat.value}</h3>\n              <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-8 grid md:grid-cols-2 gap-6\">\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n            {leads.length === 0 ? (\n              <p className=\"text-muted-foreground\">No recent activity</p>\n            ) : (\n              <div className=\"space-y-4\">\n                {leads\n                  .sort((a, b) => new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime())\n                  .slice(0, 5)\n                  .map(lead => (\n                    <div key={lead.id} className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{lead.name} ({lead.company})</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Last activity: {getRelativeTimeString(lead.lastActivity)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            )}\n          </Card>\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4\">Tasks</h3>\n            <p className=\"text-muted-foreground\">Coming soon...</p>\n          </Card>\n        </div>\n      </motion.div>\n    </div>\n  );\n}"
        }
    ]
}