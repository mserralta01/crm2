{
    "sourceFile": "lib/services/email.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741294394890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741294394890,
            "name": "Commit-0",
            "content": "import { db } from '@/lib/firebase';\nimport { doc, getDoc } from 'firebase/firestore';\n\ninterface SendEmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\n// Function to retrieve the SendGrid API key from Firebase\nexport async function getSendGridApiKey(userId: string): Promise<string | null> {\n  try {\n    const settingsDoc = await getDoc(doc(db, \"settings\", userId));\n    if (settingsDoc.exists()) {\n      return settingsDoc.data().sendgridApiKey || null;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error fetching SendGrid API key:\", error);\n    return null;\n  }\n}\n\n// Function to send an email using SendGrid\nexport async function sendEmail(params: SendEmailParams, userId: string): Promise<{ success: boolean; message: string }> {\n  try {\n    const apiKey = await getSendGridApiKey(userId);\n    \n    if (!apiKey) {\n      return { \n        success: false, \n        message: \"SendGrid API key not found. Please configure it in settings.\" \n      };\n    }\n\n    // API call to SendGrid\n    const response = await fetch('https://api.sendgrid.com/v3/mail/send', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        personalizations: [{\n          to: [{ email: params.to }]\n        }],\n        from: { email: params.from },\n        subject: params.subject,\n        content: [\n          {\n            type: 'text/plain',\n            value: params.text || ''\n          },\n          ...(params.html ? [{ \n            type: 'text/html',\n            value: params.html \n          }] : [])\n        ]\n      })\n    });\n\n    if (response.ok) {\n      return { success: true, message: \"Email sent successfully\" };\n    } else {\n      const error = await response.json();\n      return { \n        success: false, \n        message: `Failed to send email: ${error.message || 'Unknown error'}` \n      };\n    }\n  } catch (error) {\n    console.error(\"Error sending email:\", error);\n    return { \n      success: false, \n      message: `Error sending email: ${error instanceof Error ? error.message : 'Unknown error'}` \n    };\n  }\n} "
        }
    ]
}