{
    "sourceFile": "docs/CODE_STRUCTURE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741293183571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741293183571,
            "name": "Commit-0",
            "content": "# Code Structure\n\nThis document outlines the structure of the codebase after the Firebase real data implementation.\n\n## Directory Structure\n\n```\n/\n├── app/                     # Next.js App Router\n│   ├── api/                 # API endpoints\n│   │   ├── leads/           # Lead-related API endpoints\n│   │   │   ├── [id]/        # Single lead operations\n│   │   │   │   ├── activities/ # Lead activity operations\n│   │   │   │   └── route.ts  # GET, PATCH, DELETE single lead\n│   │   │   ├── count/       # Endpoint for counting leads\n│   │   │   └── route.ts     # GET, POST leads\n│   │   └── uploads/         # File upload API endpoint\n│   ├── auth/                # Authentication pages\n│   ├── dashboard/           # Dashboard pages\n│   │   ├── leads/           # Lead management \n│   │   └── page.tsx         # Main dashboard\n│   ├── globals.css          # Global styles\n│   └── layout.tsx           # Root layout\n├── components/              # React components\n│   ├── ui/                  # UI components from shadcn/ui\n│   ├── leads/               # Lead-specific components\n│   │   ├── leads-table.tsx  # Table view of leads\n│   │   ├── leads-kanban.tsx # Kanban board of leads\n│   │   └── kanban-*.tsx     # Supporting kanban components\n│   ├── DatabaseSeeder.tsx   # Database seeding component\n│   └── ...                  # Other components\n├── lib/                     # Utility functions and services\n│   ├── services/            # Service layer\n│   │   ├── leads-service.ts # Lead operations with Firestore\n│   │   ├── storage-service.ts # File operations with Firebase Storage\n│   │   └── seed-service.ts  # Database seeding utilities\n│   ├── firebase.ts          # Firebase configuration and initialization\n│   └── utils.ts             # Utility functions\n├── data/                    # Data models and mock data\n│   └── leads.ts             # Lead data model and mock data\n├── docs/                    # Documentation\n│   ├── IMPLEMENTATION.md    # Firebase implementation details\n│   ├── FIREBASE.md          # Firebase integration overview\n│   ├── ARCHITECTURE.md      # Application architecture\n│   ├── LEAD_MANAGEMENT.md   # Lead management feature\n│   └── ...                  # Other documentation files\n├── public/                  # Static assets\n└── ...                      # Other configuration files\n```\n\n## Key Files\n\n### Service Layer\n\n- **`lib/services/leads-service.ts`**: Core functionality for interacting with Firestore for lead data\n- **`lib/services/storage-service.ts`**: File upload and retrieval operations with Firebase Storage\n- **`lib/services/seed-service.ts`**: Database seeding utilities\n\n### API Endpoints\n\n- **`app/api/leads/route.ts`**: API routes for retrieving all leads and creating new leads\n- **`app/api/leads/[id]/route.ts`**: API routes for individual lead operations\n- **`app/api/leads/[id]/activities/route.ts`**: API route for adding activities to leads\n- **`app/api/leads/count/route.ts`**: API route for counting leads\n- **`app/api/uploads/route.ts`**: API route for file uploads\n\n### UI Components\n\n- **`app/dashboard/page.tsx`**: Main dashboard with real-time statistics\n- **`components/leads/leads-table.tsx`**: Table view of leads with real data\n- **`components/leads/leads-kanban.tsx`**: Kanban board with real data and status updates\n- **`components/DatabaseSeeder.tsx`**: Client-side component that seeds the database if needed\n\n### Utilities\n\n- **`lib/utils.ts`**: Utility functions for date formatting, currency formatting, etc.\n\n## Data Flow\n\n1. **UI Components** fetch data using service functions or API endpoints\n2. **Service Functions** interact with Firebase directly\n3. **API Endpoints** use service functions to perform operations\n4. **Database Seeder** initializes the database with sample data\n\n## Authentication\n\nAuthentication has not been implemented yet but will be added in a future update.\n\n## Conclusion\n\nThis code structure follows a clean, modular architecture that separates concerns and makes the codebase maintainable and extensible. The service layer abstraction ensures that Firebase interactions are centralized and can be easily modified if needed. "
        }
    ]
}