{
    "sourceFile": "docs/KANBAN_ID_UPDATE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1742496946330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1742496946330,
            "name": "Commit-0",
            "content": "# Kanban ID Format Update Documentation\n\n## Overview\n\nThis document details the changes made to fix the issue with lead ID handling in the Kanban board, particularly when moving leads between columns and updating their positions.\n\n## Issue\n\nThe application was experiencing an error when attempting to update leads:\n\n```\nCannot update non-existent lead with ID: 1742496500248\nError updating lead: Error: Lead with ID 1742496500248 does not exist\n```\n\nThe root cause was a mismatch between how lead IDs were stored and referenced:\n- In Firestore, each document has a unique ID like `ZD7cty3QvnRRUMuWaqaW`\n- Inside the document, there was a `numericId` field (e.g., `1742496500248`)\n- The Lead interface used the numeric ID, but database operations needed the document ID\n\n## Changes Implemented\n\n### 1. Updated Lead Interface (`data/leads.ts`)\n\nChanged the Lead interface to use string IDs, matching Firestore's document IDs:\n\n```typescript\nexport interface Lead {\n  id: string;        // Changed from number to string (Firestore document ID)\n  numericId: number; // Added to store the numeric ID separately\n  // ...other fields\n}\n```\n\n### 2. Modified Firestore Converter (`lib/services/leads-service.ts`)\n\nUpdated the leadConverter to properly handle the string IDs:\n\n```typescript\nconst leadConverter: FirestoreDataConverter<Lead> = {\n  toFirestore(lead: Lead): DocumentData {\n    const { id, ...leadData } = lead;\n    // ...existing conversion code\n  },\n  fromFirestore(snapshot: QueryDocumentSnapshot): Lead {\n    const data = snapshot.data();\n    \n    // Use document ID as the lead ID\n    return {\n      id: snapshot.id, // Use the document ID (string)\n      numericId: data.numericId || Date.now(),\n      // ...other fields\n    };\n  }\n}\n```\n\n### 3. Updated Lead Creation Logic\n\nModified the `createLead` function to handle both ID types:\n\n```typescript\nexport async function createLead(leadData: Omit<Lead, 'id' | 'numericId'>): Promise<string> {\n  // ...existing code\n  const timestampId = Date.now();\n  const firestoreLead = {\n    ...leadData,\n    numericId: timestampId,\n    // ...other fields\n  };\n  // Document ID will become the lead.id\n  const docRef = await addDoc(leadsCollection, firestoreLead);\n  return docRef.id;\n}\n```\n\n### 4. Fixed Kanban Drag and Drop Logic\n\nUpdated `handleDragEnd` in the Kanban implementation to use document IDs consistently:\n\n```typescript\nconst handleDragEnd = async (result: DropResult) => {\n  // ...existing code\n  const lead = items.find(item => item.id === draggableId);\n  \n  // Use lead.id directly (it's now a string matching the Firestore document ID)\n  await updateLead(lead.id, { \n    status: destination.droppableId \n  });\n  \n  // Updated positions\n  await updateLeadPositions(\n    updatedDestinationLeads.map(lead => ({\n      id: lead.id, // Use document ID\n      position: lead.position\n    }))\n  );\n};\n```\n\n### 5. Added Better Error Recovery\n\nImproved error handling to ensure UI consistency:\n\n```typescript\ntry {\n  // Database operations...\n} catch (error) {\n  console.error(\"Error updating lead:\", error);\n  \n  // Reload data from server to ensure UI consistency\n  setTimeout(() => {\n    fetchLeads();\n  }, 1000);\n}\n```\n\n## Benefits\n\n1. **Consistency**: IDs now consistently refer to the Firestore document ID\n2. **Robustness**: Better error handling with automatic recovery\n3. **Type Safety**: Improved TypeScript type checking for IDs\n4. **Performance**: Fewer conversions between string and number IDs\n\n## Migration Path\n\nThis change is backward compatible because:\n1. The `numericId` field is still preserved for existing code that may reference it\n2. Firestore documents maintain their existing structure\n3. The Lead interface extends the previous one rather than replacing it "
        }
    ]
}