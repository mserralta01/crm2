{
    "sourceFile": "docs/FIREBASE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1741291286723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741291321702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,8 @@\n ```\n \n These values are also stored as environment variables in `.env.local` using the following format:\n \n-```\n-NEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyA84mJDOKyZI3UTvbitAlyh00Feuj1vn6U\n-NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=crm2-599eb.firebaseapp.com\n-NEXT_PUBLIC_FIREBASE_PROJECT_ID=crm2-599eb\n-NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=crm2-599eb.firebasestorage.app\n-NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=731447884898\n-NEXT_PUBLIC_FIREBASE_APP_ID=1:731447884898:web:3be3694ddca6bc51a9e53b\n-NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=G-PEXDYDNSG3\n-```\n \n ## Firebase Services Initialization\n \n The Firebase services are initialized in `lib/firebase.ts` as follows:\n"
                },
                {
                    "date": 1741293148239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n ## Overview\n \n This document outlines the Firebase integration in our CRM application. Firebase provides a suite of cloud-based services that have been incorporated to enhance functionality, security, and user experience.\n \n+> **Implementation Details**: For specific details about how Firebase has been implemented in the application, please refer to [IMPLEMENTATION.md](./IMPLEMENTATION.md).\n+\n ## Firebase Services Used\n \n The application uses the following Firebase services:\n \n"
                }
            ],
            "date": 1741291286723,
            "name": "Commit-0",
            "content": "# Firebase Integration\n\n## Overview\n\nThis document outlines the Firebase integration in our CRM application. Firebase provides a suite of cloud-based services that have been incorporated to enhance functionality, security, and user experience.\n\n## Firebase Services Used\n\nThe application uses the following Firebase services:\n\n1. **Firebase Authentication**: For user authentication and management\n2. **Firestore Database**: For storing and querying application data\n3. **Firebase Storage**: For storing user-generated files and documents\n4. **Firebase Analytics**: For tracking application usage and user behavior\n\n## Configuration\n\nFirebase is initialized in `lib/firebase.ts` with the following configuration:\n\n```typescript\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA84mJDOKyZI3UTvbitAlyh00Feuj1vn6U\",\n  authDomain: \"crm2-599eb.firebaseapp.com\",\n  projectId: \"crm2-599eb\",\n  storageBucket: \"crm2-599eb.firebasestorage.app\",\n  messagingSenderId: \"731447884898\",\n  appId: \"1:731447884898:web:3be3694ddca6bc51a9e53b\",\n  measurementId: \"G-PEXDYDNSG3\"\n};\n```\n\nThese values are also stored as environment variables in `.env.local` using the following format:\n\n```\nNEXT_PUBLIC_FIREBASE_API_KEY=AIzaSyA84mJDOKyZI3UTvbitAlyh00Feuj1vn6U\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=crm2-599eb.firebaseapp.com\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=crm2-599eb\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=crm2-599eb.firebasestorage.app\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=731447884898\nNEXT_PUBLIC_FIREBASE_APP_ID=1:731447884898:web:3be3694ddca6bc51a9e53b\nNEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=G-PEXDYDNSG3\n```\n\n## Firebase Services Initialization\n\nThe Firebase services are initialized in `lib/firebase.ts` as follows:\n\n```typescript\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\n// Initialize Analytics - only on client side\nlet analytics = null;\nif (typeof window !== 'undefined') {\n  analytics = getAnalytics(app);\n}\n\nexport { app, auth, db, storage, analytics };\n```\n\n## Usage in Components\n\nFirebase services can be imported into any component using:\n\n```typescript\nimport { auth, db, storage, analytics } from 'lib/firebase';\n```\n\n### Authentication Examples\n\n```typescript\n// Sign in with email and password\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from 'lib/firebase';\n\nasync function signInUser(email: string, password: string) {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    return user;\n  } catch (error) {\n    console.error('Error signing in:', error);\n    throw error;\n  }\n}\n\n// Sign out\nimport { signOut } from 'firebase/auth';\nimport { auth } from 'lib/firebase';\n\nasync function signOutUser() {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error('Error signing out:', error);\n    throw error;\n  }\n}\n```\n\n### Firestore Examples\n\n```typescript\n// Add a new document to a collection\nimport { collection, addDoc } from 'firebase/firestore';\nimport { db } from 'lib/firebase';\n\nasync function addLead(leadData) {\n  try {\n    const docRef = await addDoc(collection(db, 'leads'), leadData);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error adding lead:', error);\n    throw error;\n  }\n}\n\n// Get a document by ID\nimport { doc, getDoc } from 'firebase/firestore';\nimport { db } from 'lib/firebase';\n\nasync function getLead(leadId) {\n  try {\n    const docRef = doc(db, 'leads', leadId);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      return { id: docSnap.id, ...docSnap.data() };\n    } else {\n      return null;\n    }\n  } catch (error) {\n    console.error('Error getting lead:', error);\n    throw error;\n  }\n}\n\n// Query a collection\nimport { collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from 'lib/firebase';\n\nasync function getLeadsByStatus(status) {\n  try {\n    const q = query(collection(db, 'leads'), where('status', '==', status));\n    const querySnapshot = await getDocs(q);\n    \n    const leads = [];\n    querySnapshot.forEach((doc) => {\n      leads.push({ id: doc.id, ...doc.data() });\n    });\n    \n    return leads;\n  } catch (error) {\n    console.error('Error querying leads:', error);\n    throw error;\n  }\n}\n```\n\n### Storage Examples\n\n```typescript\n// Upload a file\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { storage } from 'lib/firebase';\n\nasync function uploadFile(file, path) {\n  try {\n    const storageRef = ref(storage, path);\n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    \n    return downloadURL;\n  } catch (error) {\n    console.error('Error uploading file:', error);\n    throw error;\n  }\n}\n```\n\n### Analytics Examples\n\n```typescript\n// Log a custom event\nimport { logEvent } from 'firebase/analytics';\nimport { analytics } from 'lib/firebase';\n\nfunction logCustomEvent(eventName, eventParams) {\n  if (analytics) {\n    logEvent(analytics, eventName, eventParams);\n  }\n}\n```\n\n## Data Models\n\n### User Model\n\nUsers are stored in Firebase Authentication and may have additional data in Firestore:\n\n```typescript\ninterface User {\n  uid: string;\n  email: string;\n  displayName?: string;\n  photoURL?: string;\n  // Additional user data stored in Firestore\n  role?: 'admin' | 'manager' | 'agent';\n  department?: string;\n  createdAt?: Timestamp;\n  lastLogin?: Timestamp;\n}\n```\n\n### Lead Model\n\nLeads are stored in Firestore with the following structure:\n\n```typescript\ninterface Lead {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'negotiation' | 'closed-won' | 'closed-lost';\n  value?: number;\n  source?: string;\n  assignedTo?: string; // UID of the user assigned to the lead\n  notes?: string;\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n```\n\n### Activity Model\n\nActivities related to leads are stored in Firestore:\n\n```typescript\ninterface Activity {\n  id: string;\n  leadId: string;\n  type: 'call' | 'email' | 'meeting' | 'note' | 'document';\n  title: string;\n  description?: string;\n  date: Timestamp;\n  createdBy: string; // UID of the user who created the activity\n  attachments?: string[]; // Array of Storage URLs\n  metadata?: Record<string, any>; // Additional type-specific data\n}\n```\n\n## Security Rules\n\nThe application uses Firebase Security Rules to protect data and enforce access control.\n\n### Firestore Rules\n\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // User profiles can only be read and written by the user themselves or admins\n    match /users/{userId} {\n      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n      allow write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n    }\n    \n    // Leads can be read by any authenticated user, but only written by their assignee or admins/managers\n    match /leads/{leadId} {\n      allow read: if request.auth != null;\n      allow create: if request.auth != null;\n      allow update, delete: if request.auth != null && \n        (resource.data.assignedTo == request.auth.uid || \n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'manager']);\n    }\n    \n    // Activities can be read by any authenticated user, but only written by the creator or admins/managers\n    match /activities/{activityId} {\n      allow read: if request.auth != null;\n      allow create: if request.auth != null;\n      allow update, delete: if request.auth != null && \n        (resource.data.createdBy == request.auth.uid || \n         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'manager']);\n    }\n  }\n}\n```\n\n### Storage Rules\n\n```\nrules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /users/{userId}/{allPaths=**} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    match /leads/{leadId}/{allPaths=**} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null;\n    }\n  }\n}\n```\n\n## Further Resources\n\n- [Firebase Documentation](https://firebase.google.com/docs)\n- [Firebase JS SDK Reference](https://firebase.google.com/docs/reference/js)\n- [Firebase Security Rules](https://firebase.google.com/docs/rules)\n- [Firebase with Next.js](https://firebase.google.com/docs/web/setup-nextjs) "
        }
    ]
}