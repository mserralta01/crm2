{
    "sourceFile": "docs/TECHNICAL_REFERENCE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743707571308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743707571308,
            "name": "Commit-0",
            "content": "# Technical Reference: Notes System\n\n## Database Schema\n\n### Activity Interface\n\nThe Lead Notes feature uses the Activity interface extended with the `isPinned` property:\n\n```typescript\nexport interface Activity {\n  id: number;              // Unique identifier (timestamp-based)\n  type: 'note' | ...;      // Type of activity\n  title: string;           // Note title\n  description: string;     // Note content\n  date: string;            // ISO date string\n  isPinned?: boolean;      // Whether the note is pinned\n  // Other optional properties\n  status?: string;\n  duration?: string;\n  attachments?: string[];\n}\n```\n\n## Core Components\n\n### NoteSection Component\n\nThe main container component that handles:\n- Note creation\n- State management\n- Sorting (pinned notes first, then by date)\n- Database operations\n\nThe component uses local state to manage notes, then syncs with Firestore for persistence:\n\n```typescript\n// Key state variables\nconst [notes, setNotes] = useState<Activity[]>(initialNotes || []);\nconst [noteText, setNoteText] = useState('');\nconst [noteTitle, setNoteTitle] = useState('');\n\n// Key operations\nconst handleSaveNote = async () => { /* ... */ }\nconst handlePinNote = async (noteId: number, isPinned: boolean) => { /* ... */ }\nconst handleDeleteNote = async (noteId: number) => { /* ... */ }\n```\n\n### LeadNote Component\n\nIndividual note display with pin/delete functionality:\n\n```typescript\ninterface LeadNoteProps {\n  id: number;\n  title: string;\n  description: string;\n  date: string;\n  isPinned?: boolean;\n  onPin: (id: number, isPinned: boolean) => void;\n  onDelete: (id: number) => void;\n}\n```\n\n## Service Functions\n\n### Adding a Note\n\n```typescript\n// Add a new note\nawait addActivityToLead(leadId, 'notes', {\n  type: 'note',\n  title: 'Note Title',\n  description: 'Note content...',\n  isPinned: false\n});\n```\n\n### Updating a Note (e.g., Pinning)\n\n```typescript\n// Pin or unpin a note\nawait updateLeadActivity(leadId, 'notes', noteId, { \n  isPinned: true \n});\n```\n\n### Deleting a Note\n\n```typescript\n// Delete a note\nawait deleteLeadActivity(leadId, 'notes', noteId);\n```\n\n## Sorting Algorithm\n\nNotes are sorted with pinned items at the top, then by reverse chronological order:\n\n```typescript\nconst sortedNotes = [...notes].sort((a, b) => {\n  // First sort by pin status\n  if (a.isPinned && !b.isPinned) return -1;\n  if (!a.isPinned && b.isPinned) return 1;\n  \n  // Then sort by date descending (newest first)\n  return new Date(b.date).getTime() - new Date(a.date).getTime();\n});\n```\n\n## Optimistic UI Updates\n\nFor a better user experience, the UI is updated immediately before the database operation completes. If the operation fails, error handling should be implemented to revert the UI state.\n\n```typescript\n// Example of optimistic UI update (pinning)\nsetNotes(prev => \n  prev.map(note => \n    note.id === noteId ? { ...note, isPinned } : note\n  )\n);\n\n// Then perform the actual database operation\nawait updateLeadActivity(leadId, 'notes', noteId, { isPinned });\n```\n\n## Styling Guidelines\n\nPinned notes use the following Tailwind CSS classes:\n\n```typescript\n// For pinned notes\nclassName={cn(\n  \"p-4 transition-colors\", \n  isPinned ? \"bg-amber-50/80 border-amber-200\" : \"bg-muted/50\",\n  isHovered && \"shadow-md\"\n)}\n```\n\nThe \"PINNED\" label uses:\n\n```typescript\n<span className=\"ml-2 bg-amber-100 text-amber-800 px-1.5 py-0.5 rounded-sm text-[10px] font-medium uppercase\">\n  Pinned\n</span>\n``` "
        }
    ]
}